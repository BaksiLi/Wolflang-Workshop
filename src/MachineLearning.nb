(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    789615,      14582]
NotebookOptionsPosition[    786924,      14528]
NotebookOutlinePosition[    787261,      14543]
CellTagsIndexPosition[    787218,      14540]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Machine Learning with Mathematica", "Title",
 CellChangeTimes->{{3.7665075331978893`*^9, 
  3.7665075480163517`*^9}},ExpressionUUID->"4382e9b2-623b-4fa0-bcec-\
6fbdd281ebab"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CurrentImage", "[", "]"}]], "Input",
 CellChangeTimes->{{3.76650756465036*^9, 3.7665075703529654`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"832cc71b-d711-4abf-a539-1b72e7b91007"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
wcu6BGlXlME/oy4pQ5FVU+PHwC+YZ609HDCqxkkaL0qqIVuWqjaqxz/d3//g
w0+/+OyLrz759K3XXr1x66U3P/zkhweP271Wu1cnupUf//H5UjwSiQZjiVAk
EgkFltKxzTgklkR8e/sP33xb7NJs6eAB/vDb/N4/jh79NX//q+rjh0KjQjXz
ptA15a4u1UZydywyp5DKofiwXYNu6Vzd4BoTjhzT9IChp4Jg8aQm9zS+YXB1
XeyIkPfpngWvwgkB9aHrOnMsMMccW+HZmsmBIQd2AL2+AkpKdHjyWGLByvZA
nQ0k623wq0Cu0m+ALF7gCXm5g3QNagLb58FhwjmngOK2TJIKTfFsW2KaKknI
fZ4lGbDKOuycphWSVglGZ0RUMegmXBqJZiCTKrQoshLgCRZCZRmR5XXgl2OH
HLDT5/ke8DhCssjB7qA4oAMDV9xnTYo3UCaiBxyrcpwIl5jvyUx/wPM6K5gi
XEreBIQFEvVy8KQu0YZAWxw74CXYmynAr8SA748Qy1DkKVhj8TScEw3OAN/l
OApqAhQXgWd4pscy7V67VMMfvPrCdafNCdq6Gllfiy0HAyFfIAGZFK4uGNn1
lSRIbApSUnzD40+AooYj0VQgGvEGwuHIItTvxVQkuLieeiHkT/uBS39sMbq0
tbx2dedKMr2RTq4toiaSdPliToffa/O7Flx+ty8aioeCEb8/EA4El2LLm8s7
i5HUcnw1GopGQtCI0qAHqfSizxdLxdeXFre8znA8mlpOpNeT0fRiNBgIxELR
nbX1u7ee//7LvxSOnuQyIKaHOJ7B8H0c28vnjkBbCzmsBI/5AzyfLeMgvnt4
/jGG7Rbz+1U0BoQD7EXsEHx1PpfFwVHndoHfApYtZveLRwfgomsFrIJlYCkj
lvFaoVLOF2tANDwWy008Uy2B8y5WiyDQeQi/VRwYx4l2TSJaCtlRGFJkaEhA
MmQchhF5UhFpHThlCZ4nBJGXJHBZpMzRqsAq3AW5EmvJoipqkiTosmQBlZIs
QXFWYGF1RTREEfzzWFfGujxQwUvzusKqCjNQRWgGxd3Drz7724efff7Bp5+8
8+5bL790587Nu1e37v7+zf/4+j9/qFRLPNXieqXc7t92luKL0XQILE48mIqs
rcavLaYSiWRkdWn7y8+/Ptz/8ckPX+Uefpd7/E1u96tK9sd+q0g1K0wjP5YY
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
Gd04nMOzQHMGdbpmHlWy92u5g0o+g+4RLhRLWLFawGuFw0Yxe/GHTXo8Q/Ik
KTKcynAWwRg0uqNTFTiR53hJkHlNYyVAWhEAT1ERJJEXJJ6GTKfznIymChC6
0IdoNpQuhkclVgHDLAO/mikpsibJOq+plKVRAw2ipTKyAN0xNCeoyUO+OxIa
P33995s7N1dWV9JLi+try6loOhkE6b11bf36c9euPnf1xvWlW7+/88bjBz9C
ceDIvsKQJpomJFuCZPICWHqhz40YaUhDBGiTfbxROcAOfso8+e7Bv7659+mf
H/7prf2v/lTc/SHz8Nvc7j/+3+ngv0+H/z4b/Nf59N8ng39P2d9m5K8T7mfg
dwSLcT7WfrGU3wbKrzMZmuVTE/yhdD5Qf7NM0KbRSJ1Y5qlpnhgKKOBM52cm
CC7xi8GdGxAkIWAKI/imijDT0TTviabNVH0q6zNDnQH7ED81eKKO0MiLNtBM
kMUTQzrXtfFAHlg0mHOoFWcD/UwDadagLJyo8liU0RirJoDRPUGDOKChxsyA
6iE/Bd00QMeHp5Z2OtBOh+bJUJmNlIkFx6mejmBL/XRoPAXFHOinY+NkaD4d
jmH5eTA5HyNJHVvWr5PJrwPzv0bmv6fWL7PR+XQ8nVjnZ8NfTo3fppPfpif/
nsz+PT15Ohn/PBn+Opk9hWU2PgeKZxNYfp6NgfGzqXUyHT0dT34eT89HSLun
4wkgPxxrM5269+WnH7/zx/XlFLhNrzvodqGpTQ67wwGx0uby+QI+fyjgDYad
fj9osdPjdLj9/mDQl3AthJ0LbhBq24IdnHbaH99OpK6ml55bSl9fAsFdvJFO
7ywu372y88bzO3c2UzfXll+5cvX32zuvXb3y6o3rd9afe237+fdu3vnrm298
9+E7377zhy9eu/PJi9ffe27nza2NO+sbt7e2bi+tXUmkEsEolIIwlBYoKnM2
xzyosHvhWdfCM67LzzqevWxHf2oLDSEtzKHurfn5hYsuNvix2Z3OgMceXFta
/eC9t9/94P23333/g7fe+/LDT2roLobDXHYvm3mCA7/ZR3jmcSF3VMwclY/2
i5l9DE1+zqBO6YNcDU28PLq45QHHcvt57CifPcplHpTze8c5dEd/tVCu4YUy
lj/Gc0y7KhJVjmwxJCVSksiIPEWiOwRZVuFpRUJzDFSRVHk07VnmBZGDR/RX
NVRRApbBM0PWlEURoq4m9nVJ1CRBF5kBBGGZVmXtYuCDV2V0e5Gu0orKKBok
NdNS9LEij1HPDIfm2UpUG8++8vzt7c3VtdX09trKxmJ6Mb66uvH81Z1bt26+
+OrtF9596ZWD7/9ZOXzA9VuoBwwCOCcbnK7RlEz2IbOzfUrjBJlhObrNk/V2
AcMf3T/68e//+Oj9v7/80oNX3zj85G+1wyelzP1G/of/76n8P+fy//yi/9cv
2r+fSv/nTPz3qfLLmP11wv8y0wDe3ybGf4+H/x6Zv03Vn0fKzyPjdKicj+Vf
phAMjdPReHohTZDyTk1joqNQeTqAvMz8bCk/m8qpAXLJnyviGeAMfOk66lMC
r2vyJ4Y4g/hp6PCusQbPgWJzrBjnBuxHGwOVUBZMY2iqE9OAJxPYHnWMawDy
iaqdmcbYADkbTk1jqssTU54OjRPLONMgtOonunpqgT02zobmOTLD1mQ0mI6H
Z1PjZKKcjIBl7efpFPg6Hw1+HlpPQXNn1ilI6mj462z623j862R0Nhv9/yS9
BXCcW5ol2O+ZRbZlZmaQLWZmRouZpeRUppQptsWQzMzMoMwUs2QZ3ntV1V3Q
UA3VPRXdE7UzOxuzuzETG3uv2vE741fmb6XkyPOfc+79vvPpNWqTVqlTScBh
UsotSo1DrbWqtDalHpxbNAqzSmJWK6wajVWlMSiUBrXSqFEYlHIjQLEakDUU
MDq1QiWTaeQqlUIK3oU6MZyXmZmRmfH4zh0Azwv+l8/73wjyv3Le/zwQyWdP
A9AGB104H3z+YrB/8OWAq5cDYR/+pQsXL14Ivnj+SiC0w/5wsTrowpNbd8Lu
PYy8/yDsyf03Tx+EPLwX+eR+/MtnqSEvsyPfxjy+H/nwYdLzpxmvX6S/f50B
JPS7kIyw8LrUtO6yIlR1eU9FQWtuclNGfGl0WF5oWEpoSErE87TXj+OevXjz
4MmT27euB18MCgg8e/q0/6mAwFOXzp4IOAUgfOLCKXBy8jTwwqcB+f5w6uSP
p4AjP3kWfHnqHIz8CAg4EwjUdUp8amFpXUF+dXlGaVZUCq69ZbC/h9DXRe7H
kPB95D64zztCGBzqIw3hkUP4dhIeceyIiYN42Pg/RsAN9RGG+voHCXgSET1C
xI3040cISPD8SH//UP/AEJEELp4cG12cn6TMjlHnJ+mwU4bJpgLanWPBnLoF
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
zazZMStWjVKnUWrXi5eMSrdWaVeLHSqeWytbUms9WvD5F1k1Qo9K6pVKlmQi
m1xkUgoAYK1KoUnBMssYZinLqOQZlDydnGWScyywHOJ44Qh4UrlAJ+PrpCKD
WG6SSQ0SESBcgxwqcLmUrobXi0wSoUnG1QOylnG1CkDEXL1CaFHKzAogj+Uq
pVqj1ijVCpVcbJSJXXK5CyhkldSgVDrUKodSalEJbGqeVSuxalVWrd6i11sB
Kg1qi15hMcgcJoXLqHRqNUt6i9Ng9xrNXqPWZdK4TGqAQbsZGFsTQKjLavKY
dCvg5mY1uCwmj83itpqWHEanw+Sym11WcJjcFpvHYvdajF67wW3VLdmMXguA
rcEGUWx2GCDSHUaTTas3KmSNH+qb6prrGxsrapoePH5948bNSxcvnzsb6H82
0O9s0Jmzl/zOXQSe91LArZvnb929evPlgwfRr1+kh73PDAtLDXufEPIu+XlI
6tuItPeRuVHRFfFJtXGxFTFRFfEJFQkxVTExNdGxTanxqPI8XG0ZuaXyE6Jp
tLViouXDZHvNPKqVgm5nEroFwwjJxIB6YcK0+FExQeYNYZlkJKWvl4JrpyCq
p3srJ5FNc6j2OVTzDLJpvKtuqLWkrza/NSs5M+Tlq1tXbl44D/B7EuL39IkT
kHBP/gBQDFezjin4zClghk+eOn8u4PbFy6UFWQlxyXHR6ckp2VXlH0hYPLGP
0EdA9+FRRCx+AIsi4VEDeNxQX99oH2YY2zmM6x7EoYbwBDIBeGTEIB6I7R4S
oYfcjyLj+0kEIqm/Z4CAGh8eos59Oo5Qm2YuzNEXFynH0aBs6oyAPsejU4At
FVBpPBqFRaUxIZYXRXSKiM3iMRkcGl3AZAoZDCCnGexZBmuWx1sQc2GNx/FS
FTS5Yg5LymEL2GwehwlEspDDFbGZUg5DxmIqOWwFrPMRyIW8yeHhhXESd2GM
OTcpgmWBTD6POT4+Qurvx6BQxYX5Xa11gz0N5O6KQUTNELKOjGpAttQgW0sG
kB8G0LV9yDrK1JCEvsCYm6VSZjiUj0LKlIA6yZ3FcxewHOrA3EfcxxHc4swQ
a4jwMSufll1Iz8lkpqUxE7Lnk4qHCqu2Xcp9p3bbrlxzyNfdug2nZtMmXzGq
lk3yNatixaz2mBSAjt0AwlqFA6BVx1tSK5bUSo9O4lALnGqRSyOzK2Q2mdiu
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
INHr3fGtbi2vbqys7yyv7q14N1a8W8vLO8sbm77lrZXljbWVNZ9n0+fbXPFu
ry5vLa9srCytL7s3vZ51j3fN7dtZXuFTqckxaaUVdSWl1Tl5RU+evroZfPvJ
/Yd37t2GUXVBl4LOBQb6XbwQcOnO1bvvnr6oyMhENtc1lGRXpieXpSQWJ0cV
JMTlxmXmp2SWpqdXp6VVZybVFeU1lBa3leR1F+f2FudgKnLQFUXo0jxieRah
vABdVoD9kI0uy0aVZKOLc7FlecjyAmRpEaK4uLOwtD0/vykztTYlrTQhPv39
m5T34fGvw988ev344dMnD28/v3ft7bNH716+jHz1Mvbty5TQd6nvQ0riwlqL
YlvzohtSIwrDXr6/fyM4wB+WYJ04Dfj3xPEmsD/sZPa/CH6ji9eCL12/dul2
VWlRe1s9oQ+3OD3d1wvkcRcWg8JjMAQsFovB4ACccTg8FkfE4gAdD2CRQzgE
CdtNwvUS8egBAn4AbhbjoSnuQ82Mk5hzo4y5adrCPHVxjkKZps5Pw4GSizPM
4zhiHm0e7sjAskmqgE7nwEUqOpu2QGcssJhUEYcmhAmKCyImFRZSwqh2hpAF
yHdOBGsmeWw2k8/jcbmLIt6CBDbgsKQ8nprDUbLZUqFI/J8FkxyxVgg08sTi
BAmP7Y6LyygqqJoZGxrtR+OQzSRU3QimnYzqJSFbhnrryT31hN4WIqJzAIC3
p328p3G4q2GgGzxTTUaXDSLrRtDNo7gWNm0GKGc4qwhmg1B41DEhfVwEu36A
6eaI6RTm+MgUune4pXu8o3+gCYmobWwpqCnLqv5pXXu0atpfs2+vGDZXFFte
8bZbvuXWbXs0Ww7FpkW5btWs2Q1eu3bJBlykesWmXrbIvUap16hcNelXLTqf
WeUxa5aM+iWD1m3Q2HVyq57r1HLdOr1NpbBrWXYD36oW29ViGwQdUNpANost
CoVDrbCqFSa13KSUOnSAVVlGwM5K2Augl4s0Sp5OI9bB6+FGlVEt1KkFgOUt
arFBBSheCvGr1Zo0SrNebjXJHFAJKN0Gg9uodxqUDpPcAcBr1nosepdZv2S1
eexmj824ajev2sxeu8vr9CwDfbvk8AGd7LaveFyrXveGx7Hr9W4B0K0sbax6
t1Y8a17v2jJA5fL28uqmb+VgbetgeW1nbXVjc31zY2NzZW1nfe1ga3N/Y3t/
fXdvfXt9fXlj3be7ury/ura3tr67urqztrYOkL69NvdxMvJtQmZWWVZWdUR4
4s3rt29evfHw3r1HD+5cDg4K9D/jf/ZMACy4uvbk7ovQN+9rgKbtaKgtyi1L
T82MjUmNCosLCYkPiU2MiI4NC48PDc+IjchMiMlKS87PTK9Mz2tIy2/Ly+rI
z+4pLkAW5WJKixHlBT2l6V1FWd3FOd0l6eiStN7CtO6CzM78gtbc4tLUpPzk
uLTw6KhXb9+/ePr64bMntx7cu/Pk5u3HN2/evHXr2sP79149eR764kXEq5dJ
70LyYyKyot8XJrxvyk5sTo9rTA7NDX314PotOMD0xLkffzgNvfCJk35nzgT4
+129fPXSxeuXr1x/+uB5XmpKclIcgOn01ExXW0tfdxsJi8GjcDhwYPE4DJqA
RhEx6H4smgg8L7aLhEOS8YgBbPcAHjVM7Bvuww3B8SgDn4YGF2fh5DsWHP32
aQGOvJmlzk5RZz+yKEBCf2IufuLS5wVMKodBZVMZPAaTzYQTMYQMmoAF2I0K
u3uYcyLmnITDEDDZHBaTw2Nz2AwWiwL873H+JEwf5bMBoqlimNnOEB+npsg4
dBjCwBcJWRwug/txYJw9+Ym6OLRAIy7O9KE6G9CdDX2oBiKqfhDZQkJ1Enrb
yIimYUT9MKq+H9lCQHQQelv7u5tJ3Y1kRDuxp7EfUU9CtQwhW4bR9UOYD/QF
goQ5K6LNiJg0GcxkmxdyaUIBm8/miDhCQPd8YO0nRwYaWogZleSEgtaE3MrY
4u4Pbb/es3zfdH3f8nzbsh5s6LaX1bsr+r0V055P+9mj3nWoNxz6FbveZ1d7
rGqvSbdqMqzodcsG5YpJAR8NOq9B6zQolsxSt0ngNArsBjE4XEbRkkFp10nt
eq5LL7bpRG6N2KmUmNUis0ZkVQlhdw+wsVpYP2xQ8EwqoRG2PgF7qwDQNigV
wOoa1AKdWqxViMxKqVkpNyiUVrXcqgLmV2XRKcE/N2u1do3WplOaTXrbca2U
U2/0Hu/Yukwat0nrNuk8FuBzdSsOi88G16ZWnLY1l2PZ6V5xOdaXnGvAui65
VlzWbZ97y7cCoLq9vL7tWV33LgHM7m6s762u7aysgse9VQDO7b313YNNgN21
zY2tvY3Nz9sb++u+z1sbB5tb+5sHexu7B1vbO2sru2srB+tbRxube+urO+tb
6xtraxs+m9HY2dSTnFBQVdsbF597J/jR3Uv37t28/fDOrSuXLp7zO+vv73/2
bCDA7+P7z6LDItob61DtTbX5hQUxiQnvo8LehoS8ePbm1ZtXL189ffbk9ctX
Ya/fR72JiAyJSIyJTY1MKExIr0hNqkpLrk/L7MzN6y0sastPbytM6yksbM3J
aSvM7CzMacvPasvLacnIqklNS4uMjHofHvUm9N2DJ89u3L5z5da1azduXLt7
/cqDG5fBveXaozvPXzx88fLp07A3b9LD3hVHv8+Oep0f97YiJb4uJbE1Laol
NTHmycsrgefPnDzz4w+nfvjx1I8nzp49ee5i4PlgICiCrly/dvfxvTslWfFJ
sXE9vaiB4bH6pjZkRxcJqGgkkojCEjCofgxiEIPsR/f0o3vJwBFjekjYXiIG
MYBDDcDFZ9xgHx7w7zhpiDI1OT8P570yFqaYi1OwbHFmfH5ihDr7CTAsY3GK
QRll0ka5jEkYLwnT+6mwihKIZAZTyoUlzRw2XK3iw24FFp/FhknIbCituVwe
h8sSwPpn8BKdw6EIYC8hHHQkEADPSxfz6DI+W8FlyjkUYLHbajrKMiuT4pIT
Y6Iy40LRnRVDmJZ+JIBk0yCynYhqRfcAhdxIRjeRkG39Pe0A1GREQ19XFb6n
gYDs6gemGNGC7gWg7h5BtJORrTMTRDFrVrCwKGCwJBwWEPMSHoy2EMC5AJzj
iJsF0cL4p/KmubgKSlLZQGI5pqxxikT452+7fzhc+fXe8t/seX/Ztv20ZTva
su5s6vdWTUdew/6Scn9Jveu2rtpN63bThsOyYdWvGFQevdhjEHh1QnBi00qc
WplLx7PoWUYtz6IWLemENh0PKF6LVu4ySt3gYq3EpwFaWm7SCm1agUMtsKj5
Zg14lFuUcis4VwlhcZdarFFDX2xQKbQKYKiByQW4lgA37YRqWQ6xr5dY9Sor
kOJqtU2rs2u1NpPOoDdY9Wab0WAzGFxGPSyCMhuXrAafzeQBP7BNu261Ltus
Hpd13W3fdNo33I4Nt31jybW25AbaeMvtAeDdWFrd8Hh3V9c2Vpc317wH6xuA
QPc2V8Cxs7G2t7F+uL11sLkNEHqwtbG/tXm4vflld/PL1tbn3Z39nZ3D3cOD
zf3PO7tHOwDOy3vgmo3Nw43N/dX13Y2Vjc3l7c3VnQ3v1MfJ5kZsSkrB/dsP
rwffuX3jzv07t4MvXfMPDA4KuuDnF3j5/JUX956lRcf0tNa0VFYUJqZkREcl
RIUnvn8f8Trk9cvXT+4+fnnv4atHz57AbvAXrx+9evf83bvXITHvojNjknLj
E4oS4qvTU1uycjryczuLCjtzSztyS1tz89tyylsLquvzyspSM3Ijo6Jehbx6
9vrB3ccPr99/ePn2jeDrVy9dv3P1/oMbzx/efPrq3pPIp++jXryLev0y4dWr
7HchmaGvksOeZce+LE8MrUmKqc+Kb89NLooOu3Ml+OyZUz+chGXQP544ffak
33n/wLP+fgH+AXeuXAp9erckMy47NQOLIX78ONHR3oHo6O1HYfoRvQM9CCKy
l4gCVIvEI7sI6G4SFgWwTEIjCFgECQ9IubcfeGE8itSHnfs4Qp/5SJ2Z4s3B
cTkwG2dxfmpy5OMocX56nE1ZYFLn6NQZJmOay5gQMOd5NPoxcmeEwOrCCRo0
AXeBx6OwYNY6Swwb9jlSNkPEpsDIfS6bC1sJmHzmgpAL55HByQvgGR7MEJYK
jiv2j1McJXwgrefFXPrE6Gh3W2dFdgGy6QMR0UDorSOhGwjohj5MYx+qBY9u
I6EBEbf0I1qIvU1kZPMQsoHYW9nXW09AteDg9Q0E4ILRrYMocFnHx9EB2NjO
5IlYAj64w7DnhDyKmEcTC9kKvlDLEMgZi3LGBKurh5pSTkusmsxqZpCGJ3CY
f/7VwT/8svb7X1b+8HXzr3dWfru7/PP20pdN+09bjp/XrT+tGL/59Pte49qS
YdmlXfWoVt1yn1W1ZJL4LGIfJFke7HoA2hj4ViVfpxLolQKLgmdVwk1bi1Jp
U8jtaolLI3UD0wossFbhVIvsANpquAYFaNesFNkVIodKalbJDRqFRitXA4er
lhgBrlUApEqzWmXTyQH2rSqpUS0yaUVGrcSmVdpUKrtWb9PpTQaNwaB2GAwe
vc5lMDhNVofR5DQbXGag+XVANqxY9Ms2p9duW3Hb1h32bZtr0+nahEvHwJ96
t31r257lbe/6jmd9d2UZwHZ3DTCsDwB2d2MLYHB/ff1gbfNwfePr9srRtu/r
7t73vYMvB/uf9/a/7O7A8/2Dzwf7R7v7R9v7hzu7BzsA2mufdzb2d7cOtncO
NnaOAOQ3IS8fbHqAeJgaXSjJr3n46FXwxRvX4XSya1euXgkMCg4ICPL3D7gc
HPzi0bOS7Exka21JZnZGfFJqYjzQyTnhUVHPX7x+9vjR3cfPbj97ePMxDBy9
duvubXAHePj0/mMA5PCXofFRkYlRUYUJ8Q2Z6S1Z2U25+S35Bc2ZeS0ZOU2Z
JdXpZRWp+TmxqSnhUeEv37548vzxzacPbjx9cP3Ro8sP3z56Fhcamh2bUpSa
W5ycXZ6Wk5eYnBUdkRcdmRUWmh0Rkh3+Ni/8bXlMaFVyZG1WVFt+dFNOQtiz
xxfO+f/448m/+qu/Oq7IOn3mjP+5cwFXL1x4cu1KbmxYS3FeRU4BqY8wNzvV
1drW09GOx2AJKAQZ0UPo6SKiu/uR3QMoFAHT049FkrDYfjTqmHx7+2GbIQIY
4Y/Dg7TpKcbsDGV2jj1PYc/OMRcnFuc/zXwcGh/BT06SqAszHBrleELHIodO
YcM6RhaHvsijz/HZNNiSwJwXcGbYrDk21Ms0PgsYYa6YxQWcy4exqGwul8vn
0lnMOTGPBZ6XcLhSDtw2knG5Ch5byacreXQpnynms0RcgKw5iXCONj86gIA6
eQgJOLSFhGggoxoJPVUkRPUgugXYXjKi5SMAMqJtANlBRrYNAMAimwk9jcTu
yhEkkNYNRHRtP66VjGr72E/gcWEnBazy4lIkHMD+TCHskRdI2VIRlSllLKgZ
0/NVtYtJRbSksqnEuvl27DgS/a9/OPqXv9n84689f/urtT98Wf/D4dpf763/
am/t5333L7v2X205vm249lcsm8vWda9t3aNddutW7ZY1i2LNJlmzydbMQEKr
3DqxUye1qmRAHusUbKNcaJLCyklYgyEQWcUim1RoFvE0QoFBKbWpBGalxKQS
WcCJSmRWC+1KgVOptCjUZoXUCFgY2lugtIHnlarlIrVKotcC4ywxA9esVlo1
KrNWATALJLRVq3LoYdePWa8zalVOncprBMyrdli0LqvRZdW5rbpli2HNagHg
9Tgty4B2ne4tx9K617Xmc20sezc8Szvg0efdW1478K3srq/vrG0DCB9srOyt
rx1tbn7Z3vq8uXO0vv1te/dod/twd+Pb3s7P+/vf9w6/7X7+vrf3y+e9z7t7
R/uHR/vbn/f3jgCu93eODnaO9ncO9jYBhAE7f9nbPdo6OFzfOtxelonFH0dn
i3M/vHoRfj7o2vXrD25cvX3r8rUL5wH5Bvj7BwEVG/7yZVNVSVfjh5LMnMKs
3Iyk5NyouJw3sQlvQiLfPQ979i7sefjbp2+f3n3y4A7A77Wndx++vPf0+d2H
rx89igp9mwCwFh39ITW9KSe/Pj27LrugOj23OjmtJi2jLCG9KDYjJzYtKTQ6
6mVI2KMXb24/e3br1dsnMQmhaVnxyYW5WdXl+Y1VhXUfyhs/fKgsyMtLSy5O
Sy+KSymJiS4KDS8OjyiKeV+S+L4hM7I9K64jOyUr5OX1gIAzJ/z/6q9gI9KP
PwAb7BfgF/Dk5rXC5GhkdQGqIru5NLequKSnpbP6Q1V3Vxcai0Uheojo9j5k
K2ArIroDHARMOxGLwmEwOAwSiMwBdDeZiO3Do0kDuJmpsfnpScr8LHVhmjo7
yZyDs9dnPw3PjpAmhvpnJ0fYC3CypJAyL6DROAw6hwWQSGHTKSLWPJ8xD9DK
ZczzWLMc2BvM4sK2XxgwLmJx+Wy2jA0Ay+DB4mcGh0MXsZkyLk8GgyXZMg5L
DhO/WTIuG4adcukiLk0CWFi0ODNCHOhqJfc2DCIbhxAtJGQzGfhZRPNwT91Q
by0J04robcSj2odRnWR0OwGuawFp3TqK6hjoaQf/aqi3cgBdh+tt6Ed3kns7
pkhEPpfJB7zPWZRw5hRAIXCEYq5YzhLKWVwpm6risCSjExPZVfTUWmZc+XxU
+Uxuy0Qr4r/9w/f/+Pvdf/vDxr/9dutffrP5u583fvtl43dft379ZfNXh6t/
/Xnt297S3oZ1Z9VxuO49WHHseM17bvOGy+BxKNYcylWLctkMq6aBSHbpZE61
yqpUG49zPLRytl7O04v5ehFPK+RoBDy1QKSA4asUmYCmEdB1QoZByjdLeVYZ
oGyFWSaxKqBgtqtkdrVcD6CtBQTNMir5gHPNeolNo7ACI6yVGXRynV5hMSrt
WrVdAyuszAajTqOyGpVOWISscVs1Pqt+CaDYbPJZTOs2s89uWXKZ3Q7rusu1
5nEte53rK+71ZSCenYfA5y4t7y6v7q6vbG2sbW+s7m8uH6z5DjbXvmxtfN7c
2AeyeXfn8w7A6dHhzv63nd2fdne/7+182z34tv/556Pd74d73w+PvgIKPjg4
OgSPO18OAHh3P+/vfjvY/roHHnc/723t7azvbq1MTkyPTCx09mCeP30XHHT9
3vUn9688vHP1xsULFwD/+p27+ODm/ZSQ94jmWnR3a1dTQ2VBLiTBqPj8yNis
qLCk0JDC8Kjc0NCU8LDY0IjI0PdREW+jXr0KefDs5YMnTx88evPwTfybsOSI
8MLEpJr0DOCFa5PzqlOLKxPzquJTK+IT8qMiMyIik8KiYt++D3n64s3z17Fh
8Ykx6bFxKQnxyfFx0bHxYUnJEWnJ8eWF2fWluTX5WdUZmWXxcTlxIYnhb3Ij
QwvDn1bGvKhLiGjJSm3LSyiJf3vn4sWAH/1P/nASNgL/4H/6lP+VK0H5Sa/x
TTmouhxEVRqyJre6JHdmanR2ZnJ+bn5sdByLxGKRXXhkCw4cqO5+NGIADbi4
DYvqJmBRJGzPIKpnAI8mEJDTE6TFmbH5mUnK3Cf6LHC7Y9T56bmpyY+Dw+MD
xDEyYWqczKFMc6lzXOoii0aBk61YswCtXMYCnznHhfhlshlwHiiby2CzFvns
BR6bKmBRhVwGD4pVOmwb5NF4PBiaKuEy1VyBiiNUcMRKnljG5cj5HCmHByf/
8ublMAua82mwn9zV8bG3fbSnabi3joxsJGOaB9AdQCoMYTtJ3W0kTCcO3YZB
t6MQzXh0IwH9gYysGkI0kIAv7u0ElE3uLSWianDI5r6elkFEG2WcLIaBljyR
gCbiLci4NAWbp2JzFRyelE6ndPdQK5oXShtn8yoXU8sWo3PnYjInk/I/VrX9
jz/98pc/ff6Pf9r/j3/48l9+9+2ffrP/j79e/duf1n53tPW3X3Z+fbj5fX/5
297K4Y7raMtytOn4vGr/7HVsLFl9Pu2KS7XmMKw6TMsW3ZJR4dBL3DqpEy5J
CXVKjhFCmKeW8TX/2V4k4KlgXhxwEBQln6rkUBScRSWPomaxlEzg2SkKLg2m
5Uj4SjFPK2fq4HKWGCbSSPkWtdSkkZnlarNcblYILWqZRScHhxl6asmSVuoy
6lwmw5JR6zQC/Wx0mLQ+k85nNnos5iWbwWMz+WxWr8PqchpWgQV2wtXmNZ9n
w+ve8XgPPSv7vuWtVdfO+tL2um9nDdyvfPsby7tbawfb2192D/e3tw/2to/2
D77uHXzd3QX8+31/52cA0v39o8/7R0c73z8f/nT45efPX759/vL94PDr/v6X
o71vRwdf93d+Odz5ugeOvcO9zb3dlY1VH444PD7HakEQ7j8JuXbxzs0Ld64F
X4NTXy9fCQq84nfu5t3bT/MSk0YwPXPDpBEUrjE/vzgpujAlMT8lPi0WADMy
OyYmKyoyJTIuITYpIT6htrSIMjhQnVsUGxId+vx11Iv3ye+ikiOi8+PiqhIT
yxMSy1MzK1Pza5ILiyNTc6NisiOj0t68ywiNiXsZERsWEwkBm5iYmJ6ckZaY
npCYFp+WnlhemNtWV9nTUtndVISqLUJVFLUVZJZnApC/Sw9/kxX2tiA8tDw2
ui49qTknriEjOvTOg4ATfmdO+J09EXDmZODZU/6R715hWwtQ1emIivTuD2kf
ccDrNU+MEbnMBRZ9kUmn9OMJqN5ebG8HAQlYuLuvF0lEIQmYLhyql4DH9veh
CTign7FTo+SFKeB8PzHmZhemJigAvwsfF2Y+TX/89Glo5BOcOdj/6ROZSZ1k
0xZZdCqXAY5FPn0WzuhhA/9LE7KYAhaHD0caURkMmHYF6yFZ8yLuPIc5z6HD
AXYwb5xHF8CWwEUpjwlpl8OVsPgymPfLUvAYcg6Pz2XxRHC06CieQOrpGOlt
HUI2DSCaoSpGNZN6m4cQHWQUYgjRPdjbQUI1kNE1fcg6dHcDrqca31tEQlSR
kDWY7goiop2MasUjKvqQlQPImv4e8B2656fGBMcjDMQCGPLG4zGkHKqCtSBj
c8Szc7M5pbTkstmMsvHkopn0yvmM0sXEjNn4pLHy8v/nL//0f/35d//9377+
+z9++4+/+9Vf/u5X/+W3h3/6m41//vXG3/208ZtvO7/5svfL4cZPn32/HDi+
7to/b3sOV9wHq4CR9dsew96SecOp81kUSyaFy6RyGxVu4FWh3BVYNDyTkmeQ
8wwSgV0M9DNXL2SrRCyFEEYuAwjL4UCWRQWNIWewRLRZMXVGRIPpByzGLJv2
ScyakXAXpQKGRsw0yLk6Od+klFqVErta5lDJbWqJSSM3ahU2g9qmU8MFK4PG
YVA5jBq7Tuc0mDxGA8Cv12L02PROC+Biq9du9XgsXqdpw2necLvWj0syAH73
fMv7Pt/26urW6ure2urBBiBi397myuftDSiet4B73fuyu/9lf+/L/tbX3a3v
Bwc/Hx78BJj34PtPR0efD/e/Hh799PnLL58Pfvr8+aeDzz8d7X8DpPz54Ovh
/pcD4I4Pv4FHQM17m1sbvgHS2OjoPA5FiHkbdv/a3evBNy4EXbx+6er9m7cu
X7zp53f3wb23HwrLF6dHmQsTkwP9TSXF+YkR2XERmXGxGYnxGTFx2VExWZHR
qRHxkaGRUZGR8RFRxSmpBcnpmQmZmdHJmRHRaaHhGZFxhbHxVbGRFYnxBUlp
RXFphVFJBTGJOTGxGVHRKe/Ckt5GpUakpSRkJCYnJySmZ2QUp2Zkp4An0hLS
sxMri7K7miqQHdUdjR966sp7assaS/PbygsKUmIz4sKy4mMyYuIz46LjQl5n
hL1vzoypB3eWZy8vnrvqd+qCv1/QleCrRclJ/a0ViOrczuKUtoLo4e5yMqqJ
iEUwKdPAljIoCx9HB4GG7usFLhjV19uF6e3pQ6P70FgcAkvAYIk4JBHfM0TG
fRojzUyPUWdnGNMzTFh29ZEyPTk9NT42OjwGkDtIHh8iT38isSiTnP+cpQ4e
mcfBOLBmEtZJilhwtKUUxpzSgEiGgyOZbDgykk1l02lcIFnhqFAmHw7ToUp4
dLGQIeAAh0sX8jkicPBgvrEE2GRYLzk1gO8iImrHMU1jyDYyuo2AbOnvbRnF
gvOGQUwzAdFE7GkaQrUO9QKGbcD31gB3AG5Q/bDaqhaDrsQjqwndjSRkUz+i
mtRbCyzwIAZgGTE7MyETMaQ8ioRLgcM+BHwO+EngGFC+eGFxqrjpY2zZfFbV
aGxG/9v4qZTihYRCamrheG7x//2Xv/9ff/mX//ff//g///yP//1Pf//vf/zt
n//4y5//uPuvv9/6u98c/P7nL3/7/fD339f++vvqr7/6vu65v++t/LS78mXL
/WXN/sVrPXRbtuzqNYdi2aZbsZhWrAavRe82SD06jlvLsipFBokY+GKbhGOV
8CwSgU7Ehal9QppCBG504L8XTieUwyTnBTltRgEnnS3wwf8qlENwWBJzfoJH
neXR5gRwdCmM3NHJ2HoFy6hg2dTAO0vNGplNq3Tq5XatFHbiaxV2tQLg12ox
WEwKt1nlAodF57SY3TbTkt3ocZiO95Jcq27vute5umxbWXZuej07axvrGxu7
a6ufN9YOwLG+erS99W1r79vW0dHmwc/7n4EM/rK/8XV/86e9vZ8OP/90ePib
o2+/HHz/uv/t+9evX7/sfz/a+370+efPn78f7R5+Xv92tPP1aH8fOuKjr/tA
XH852N/5vL08CXhj+NMImZQeEffm/vO7128Hn79848L1+9duXb10Izjw/rsn
kb1N3RwaRcahTPb1laYVFCRllaellaUm5qcm5qamlyRkVsWl50UnRcKplOHR
EVEpCdFpSXFZSal5KXlZyblpUXG54TElsXFFsVElsbE5YfGteaUzaHTam9eJ
r1+mR4QmhUUmx6SVlNQnJWQkJyQlJSelpqZlpWWnJSYkpYBbQHxxYVpLTW5H
c0FTbX5dWV5mQkJCZGRtWWZpXkpaclRGGlDZMWEh70JevEgKeVefHFWVHBby
6MnF00H+J84AG/Dg1q2GvCRyU1FPSXp7cVJrUTSmLmUE04RHIxbm56QCEX2R
PjM52Y/DElG9fUgkurcHi+jFo3vwaCQOjcKjeog4xOBA38ex4ZmPY5TJcfr0
NGNmljU9SZ2eWJic+DQ8MDJEGB4mjg6RAH4nxvpZ1EkWZZZDn+EwF+gMFoPJ
gm19sE6SDlDMZ1EFgIjBwWUJuWw+lw0MsogJw2NZMFsD5ocLBUw+H0Yii3jz
4JOpFMDmXziujscCcJaJ6ZTZ8X5EK6m3ZhBdTcZUD6Eah5DNg8i2fkQXCd3a
jwLP1JFRtcPoyhFEzWhX0yCiqQ9Rg+9uwra2AmuMRwL8NgFfTEQ1ElGtgz1A
S9cSkbX9uGYcqoM2Ny3hAv1Mk/C5Mo5IzOUAYc+Fa+BAP8zO4hAjVfWzRZVD
EfGoxyFjCXkLGVWU9Bpgh/+///Gn//1//vv//m//9X/9H3/5n//1z3/50z/8
13/+2z//0y9//sef/vX3v/rjb376h1/v//5n3+++r/3268FfH37+ZXfvaHfj
aNf7fQNoadv2qnnHa9lxmzfdxlWH1mNVe8y6JT2wwzyHgWPWwsUoo4ZnVDN1
cph69/+T9pbRcV5ptvD65pvbd+ZOZ7o7He7EdhIzyGJmZoZiZmZmsVSSiplB
zCzZlmTmOOg4cToOg0NOh5NOfM/r/ta6f+73o2fKZ9UqvVKVZKn22Xuf85xn
j3vswPkCSg17LCEXlG4WdJij9pGIfQg6oWkdclv6PGaj19TvNvU4hvusxkHH
8JBloGukrwtMwqZByATZRnrctp6Asz/qHR4PWKdj7qmYZzYWnI1HZoFHHoPK
sSYno+OjY4sTowuTseW5qRXwU83G1xenNhcX1hbmVhbnN1YWNldnN1amT2ws
ntpYPXli+eTJlXMnN8+d2Dy/vXlhC/Dv+YunL109c+n6uXNXz529cvbs5XOn
b1y+APB77dz565cuvXj54guXLgPNfPUyQO6FF66CxxdfunTpxtVLl66Cr9x+
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
wbh6+vTVs+cundm6dHbzwrlT58+dOXN66+z22s6JpbFIoG+gVyXnU2H1ddk5
RUmJKfv3P7dr9+OPPPbow8+kJWXRafiWhkpsa2NeSkZuSpbT1DPcp5Vx2WIK
mdRQ01GS31RYVJ2Xn5eaknT4YNLhA0mHD2UkJeVn5hVllQIeLYc0dmZdYWpH
eXbWc3tq0jNa8zMoRTnS1nopDiFGo1gtTU2ZGeSWFhisJS0tKTMnJz23JK+g
pKAgLysn7VhW5p7MkocOpP7h+PHfJx3+t/37/rD/wHNJibuPJTz2/HN79j53
8PCR42kp5QWZmOoqcjuS0gGnNxUJ2ko4TWUtxTmP/OmR3/3uoUf+8HjO0UP4
5lxCQy6lroBWld2Qtr+58KiA2KjTSag06vDQYLdBpVWpJHyZua+LzyZw2NCy
M5/JFHM4XCZJJaT3aaUGvbivSzXQY+jv0vV3age79f09nV06LQCvQSowyMS9
CoBipkHO6dTIjcP6EROQ0AMOKL8AUIDJbraMjDisJqvdBi07u+1gmF1QD3an
D8rytTmgxrAmSEtDISk2/z/ifR9Y3SCwyc4Bp6fX6TB0KwQaFkVDJymYQAbj
1SyMgvnA4XLRSh5KykML2HAp0MNsCtDDMhZCzCIo8AxNG13XQu5sInKKYNXp
uVwmQsAA7hgr5REkTIySBVOxEWouTsLGyKANYtpQty7gc7ucTo/T5bXb/U47
kPQ+OxQq5LK5/Q5H2NFnZ9L7Cpu6c+s0pTXKyjJySnpNcsZ9cPvtt/vg3y8/
3//l+/s//u23b77+6csvvv/sox8/fff7jz794r33Pr1z65M3X/rgjVffevWV
165fBUL65tWL184CFX3q4ulT13a2L29u7oC3/RrgMuAr507NT5yYH12djaxN
xRbH4rPR4AJ0pDc4GYmMRzyjIedowBH32WLgpwI/qg3KWIHOSlvMHuuA2wxo
t9833Ocd6bQN9zqGhl2DRodxyG7sM/Ubhru7gA8y9XaberUjfbqBTq2xU2ns
Vvb36ge6uswGvalTb9R39Wk7u9W6fn1nr1YLrht7eocHei3GAa91OOo1T4Tc
U2OxxdmZ9cXp9XmgqOdXV5ZWlxaAol5bXjqxsrK1BtV17AB3fAKMte3Nte2t
zfUT6ydPrF84eery1tbZk6tnwKy1vXF6e+Pc9vbFrc3LW6fOb+2cP7l9eefU
pe2TwEGf3trY2V49vbW6c2pjc2Nhc23aaXP09w/1g6lWwkE1VlYUpBRkHUk5
svfQgf1/2bXrTw//5fC+hJL8fB4V26ViF2VkZyTkaGVSFY8joTN4JCqsoi75
wPGDzyce3Zf02KO7Hnr0yYf+8Oc//P7hJx79S2piTmF2YUVhWmV+Ul1ualVO
CqK5pjAlqeDo4daC4+yaXC2qoZ9P7WeRO/FtmPJMZGN1eWV5YmJCdhb4V5iT
nZeRmf7skeefT087WlT/TErO7w/t/d2hg7/bn/hESuquxGOP7du/++C+o4mH
E9OTC/Oz8c0VrI46CqKdiUdxEZWc9iJmUzmurmTvU3/51//n3x5/+JHilKOY
2kxiTSa1KgtfkVGZub8qez+9tUDIJFHIdLlSLZbIlUotg0YhYzq4LDyPR+Zz
mQIOW8SnSfhkg5I7pJcadcpBgwYCb2/vQJ9+oFfRZ5Do5QKNhKuSCdVSiII7
FUI1uKIWGY1dNsuw0zToNg06HhxesFuGrBao6Y3H2gdw6ndYPdZhj2MEWEuf
zQko2GkfctsHPE4I3T6vKwy9G80PlrlsUaif87DV3K2SMSUcvJKLk7KxENC4
JIh/GWg1m6Bm4xQ8tBRoaTZGwoZL2AQpm6JkE1QEkrqJoqwhKRuQmhY4txxW
m5YjYKDBl4lZTSI2XM7CK5lIBQspAe6Y3SbnY9Q8ypBOHrJb/S4blBANxAB4
7DRHnLag0+m2O71QjFrPkIQnyqmTp1aJ8ypo5WU1aUmFGYfu/99vv/3226+/
/frz/b//Asbff/7+lx/v/fLdvR/uffbN5598/+k733x859M7b356+7UPbr36
3s1X3n3l1TdvvPTWlau3r5x99cqZGxdOXz+zc2375KWttTOby2fWV08vzO0s
z28sza9A27Kja1NTS6OTC6OTs+Pj4ZAHqOjxUGjUFxj3uya8tqjbFXM5Im6L
2wn+Lw6/DfzCoSMYPtOgfdhsG7K4TEb3SLdzpM9i7LEZDVYj4OUhW7/Z3j9g
H+i1DfQP9/RbBgcsgz3mgf6RgcHBgYGB3oH+7r6hHgD8Tltfr8diGYtHl+dm
1udmVxZmllfmlxcWlucXVheX1uaW1+aWACOvLs6tLy9vrKysry2trC2urS6t
ry2cXF06vQrExtrWxsb2iRPbGyfPrJ08t7Z6dg3MYFtnTmyeXl/eXl/c3lw5
tbG4uT6zdWIZPGt9Yz4cC+m7+4eGh3u69HIOCddcUleWVpB9JDv1YGLCkb17
9z3++DN//sPju558XsblGbu1+RnFzZUIu9GilYoVPC6iqSHjyPHDzyXm5tek
phQ8+sjzjzzz3FPP7/3TE08+9OgzBxJyktPS8jMTi3MzyvKyCjITm+tq2xvg
2cdSiFXFiqbaITLRJRa6RdwhOpFaX11dUpmVX3w8ITEzMz0rOzUnOz0xKWHX
gf3PHU999njq/qTkpxMSHz6S+lhC2rMpKYcSEo4lpCQmJ+fmZDRUFjBRtQJC
q5zcysDBGWSCCN0mhtWxW2tIDWWpe5//93/5tyf++KeS9GPIykxiZTqhNAFV
dbA4Y3d1+j5acy6PjKLgCTw+VyqSSkUyKoHcWFZFJ+O5XLqAzRRzGSIOSa3g
AD3co1X26zoHuwyDXXrA1kO9+sEerUEjVoiZKhlLIRWoJFK9XAzAq1ZKDBq+
yajzWIx+s9FjHrKbzdAWkq3fYx302wY8jn6X3RiBYi5HvDZTEEpLsfsdZrdj
yO3sA4QLJLTzQZ6g32YL/yNt0DVs7tfJ+RQhtAaFlHLapJwOmQAjZaPF0LkD
vIpDATCUspAQYFkEKaddxkPJaVQ5gqxpIGsbSWo4XEUpM5CrBKVNDUmFNHw7
dASY2SjgdIjYgH8xGi5OzsUIGUglkOVcvF4pcDutLqfJC8WEQUAOugAQvH6H
E+rkA5ymc2jEIGZW13Nyq1klNZTm1ubSotaizP8f/P7fQX3//q/37/98/8ev
f/v2i5++/eT7e+9/e/ejzz9674v33/78nbc/vP3m+zdfufPKC2++cuHWS+dv
vnDxxuWdq+e3Lp8/e3Hn1Lnt5bPbmzubJzbX5jZWpk8tzOwsza7Pjc3FAzOj
4dmJ0Zmx+Hw8sjwagaouw6GZSCAa8cVinvGwN+73xIKOaMAdhTI9/RGPNewc
iTiH/U4jmKx8NhsUE2xzRGz2sA1YGKii1WuzArb1P8g3BE7H67QHXMBrm31Q
gqF71O+fHo2szM6szc8vLU4uzU8szM0uzsxuzMwtT02vzEyuzU8tzk6tzs6A
r1lanF/5R8Oc5cmlhckTi7Mnl5ZXFhehRhyLqyfAWJjbXJxdWZlfWZ7aXJjY
nJ/eWJzeXBjdhLae5zbmZ5amYsMjA8CxG4d6u3QaGZPE6KhBV+bXZB0tTD+U
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
zC+szsuvLsmuLMstKysqKy1tKKnrKC5tKsqpK86uKy2AVdeQm5v4KJiCgtJS
YHoaTEqCi2gkFQUpxzbIUI28lkp8dXZp0uHHf//IH//j0eSEo5UFmfUFua35
eY05WUXJySWHEjCFGciagsb6WjwWT6Dw4QRBYwe2qLgUh4ELuFQul6JS8HUA
vDpBp17So1cOdBn69AC5WjC6NFDsgkLIkQmYOqkEPNaKuVqFTKuU9aikPSrF
cF+3fbjbYemx2gbN1iGguNxWo9PS63IMuawDUJ4vuOIYgWqMHXZgLf2OYZ/L
FnK6fXar0zrsdVqA8XTZBnRKnpxHkQI/zsYLOdB5BAWTKmfS1EyCig0+xCjY
WCUPK4aOHpDEHBaXwmG1kuSVBE0DXoNCGOi4Tgqll0jX49FaVq2SWy1oaa46
lodqKhNBbTcYOjZDxaIBzSxnEuRMkpJNlEPbwVgph2Du1z6wvf6A0+M1D/UB
h89mcqh4KROtAl8D7DMHxyC1kTDVDEKVmNYsobeLaa3/LHof3P18/5effv35
hx//9s13X9z7+vOPv7x754tP/vrpu29+duf2R7dvvffaK+++evWtV87dunH2
5vWLL128AFULnz97aWcbOOJzJxeAij65tra+MHVqZX5uYnR+Ora2GF+YHVuY
m5ydHJ+fnFmYnJyZiMyMReejkelweCISnYyNTkdCE0HbWNgyGnGMh3xTHu+s
3znmd0W8rqjXHfKH/H5/0OuN+BwRvyXid0f8npDHCWA+5gmMeqOT/ugEwK/b
H/eH44HAPCDZqch0LDIRiE4EYuPB0ETINxHyxELueND3IAA0MgXmDQBPnzMa
DEZCAb9/OBQ0R4EYgAKYPFBYuRPMD56A1+nx2B1OC/AvQLN5oVRoM9QtHNoU
g1beZCKhWqXX6bo7u3p4fJ5aJiS2trSXljQUpFfnpJVnpuYmHzt6eN+uZ547
uDe5RyMf6lGVlVSQkFivaUBIZWCbEZimBlRDZUdJKYBVfX5WTX5GVV5eRW52
eVZ6SVZ2YUZOYVYRIMzK/IL6/NLWwgpyGwpe3156PEuORHXR8A65eMlrX3YN
uySAgnHw3Cx4dQsNRVRSCJz2JmJzLaaxpqO2FFlf0VFX1VBV2V5Vhy6vxFYW
4OqKMS3V+NZWFhIhIsDlFISOjgLvUj4OL6dQtPg2JaZeBKtmNxZhK7PKExOe
/PfH//gfjyUeO1pemNNQWNRamF9XmJmdlJafkNiUm1SXV1BT0tzWgW/DUFpR
lMra5vSMbAQCIeRxZRIIvAaNQKcRd2tVA3pDv6GzV68eMGg6dRq5VCgVcsVC
nkIo1Ylkeqm4UyrRyaRapRjaadJIh3v0DlO/1dxrNfe7oGqNIeCePICF7QDF
fR5LH7DDXocRKpBwOoNOh9NpdnvsAY/NDWWJDrg9Qw5zj1rEFtFwagFFziVJ
2TioPyS0z0tT8OgaLkHNAbxJUjPxWqCoeXgBHU/Fk1obSegKtLweocPWdgsq
OhmILhyzB0ntROAHWKRODloFay0/llZTWcBnoOUsqhLwOHgdBlZOx0nYOAkL
AqaEhxKxMP1dKp8TvGsGga8X04hiKlrJAN8Lr2YR1CycjIWRgCmFjeOzkGIG
SkFFKGhNMuY/i19w+/v9+9/f/+2Hv//ywy/ff//Lve++++Kzr+++8/kHb33+
wdufvPfmu3997b03Xr5z89qtVy+//uLF166ff+XK+RcvnL965syV09uXT61e
2pw7u7G4tbF6YmV+Y2F2enR0ZWZqdWFyfmZ2cXp2BbjOyZnF8XHAv7Pj0Qcq
1A+E6FgkPBEKTob9sah9PGqbjLgmA66JoH005Ij7vTGPLxYIRoL+CKSuIUTH
fT5wPerzjEGPvXEIj4GYzzsaCI75/ROh2Pz0/PzMHBSz4vPGXJ642xn1jES8
QwEo19Ud83gjnmDEFwh67H6XGTgR8MDnGoECiN3DwGIH7KaAzeSzmT1Qhc8I
GDYzmOqH7MODLqMRCm8d7gNGyjLU29+lF/LFOm2PSqnR6NQ0FkMpExDaAbqK
2oqKqnNyyzMz8lMTk44f2b3r2f3PHujVShwDOmR9BwNB8A53SpgUclsbproC
VlPTVl6FKCltKy6qL8puKsptyslvzSqqycyvzMqtLyyrLshtL8mhNNSRGxsZ
KAyiqrEpK1dJQAzxqFYJb8lr2QzbrBKqRUgStVc1FeZy8bQuDlNORnExTdT2
ClJLHaW5idBYhW6qhNVUIGqqMPWFqOrC1tJSoJw5aJiU0CohtijpKAEaToFj
JAScBtMmRTVx2yvJtbnoooyalNRHHvrzHx56JPHI8ZKs/OrsvLayotbq4pL0
9Ozjh0uzEwpzsorzGpvr8C0dxPJWZFFFbWZKMaKVIBOC+U2qUsnVGplOK+kx
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
DkEB6J6FlrA6ZExgh0lKOkHDQshYrWJWm4wBk9Pa/6v4Bbdf7v/92/s//+23
7+79eO/zH7/4+LtP3gEU/NHb79x96/YHb7x45/UXb79y9e2Xz925ceHm5Qsv
Xth65dLOjfNnrp/dvLK9eHl7fmdjZmVpcnV55tTq4tby4snlhdWlueWludX5
ueUpKMJvaWZsdjI0PRmfmRyfHY/PjI7PxqfmYmNT8UgccHEU6noHxkLMOx/0
z0LLXJGxaHQUWhb2RwFaw7FYKA5AHQ/5JsKeyYh7IuichlJa/OPx8ImF+ZOz
07Px2Fg4FPK6vA673QzV1flcJg8QXVaT3252AtnsMAOj5DWbPTa7026zW4ft
1kEb1B58BDzB7vhHkyWrwzxitZpsFrPdYraah2zDRtvQkGNkxDZiHO4fJOCZ
dKaIxhYw+IJ2NKm0qI7U3NiWCzVIb8grrMouKczJz0oHBJX45KN/QTW1BE29
RrWwS8ThoLFsNFpFIyvwOAkWwcc2sxENAhRShECK2ptFHQ08WAsXgWLCUBwE
jNNWxwIetrUDU9mEzy+SwWu1JHgXFT/CpVh5tGWbacPvcIo4Ni5xiIXpoiKM
HBy9sqI2JRdT30ZrRYgQODkOJ4B3CGAoEQIrQKKFGJQCj9BQiGoKWU3DCvAo
AYGgIBMUeJQc1S6FVfFaK2m11cSKytaCnPqspPLEY7sffuIvjzx5dN+BxENH
Uw4eSdm7L3XfvkO7nz2ya0/O8cNH9u1/7tmE5MzSxKzStOyizIycqtJSlZin
UYtUSn6nWtqtknerFQaNUqfTGLQqpUQg5rLlLI6MxxIJWGIeTcSlKUTQ5q9K
wtdJhZ1yKbAlWpWk2yB1jfTZR4bAnyxgNQehxat+QK9Qw1gr1C3Wb7WGnQ4f
lN9t9LlN9uFuuYgkYGH4dIKUQ5FDMpXEJ2GAQpay4FKAID7wmAgFC68AjEnF
ydAURTtW0dSuxrZL6PVUTLpGmiUVFQo5uUbJAat077AoUcs6rmKnixAZKkyZ
WUYGv/Z+LlFLRhCyyyqSs+mYKhmzCWhyQKZgyKEsQiyPRQSiXclEyxlwBQOm
ZsEVTISCixAzO7hMOB9adiaAK3I6HMwqcugxzsDCaDg4oJ9lQF2z/2v6+R83
4IK/uf/jvV+/+fLHv939/ssPf/j0w28//uDzd+989vab77710puvX3/rtetv
vnzl1o2Lr1299Orlc2BcP3vm6pmN69url4GKPrG8tbRwcmltZ/3k1toygPDa
4tzqMlTwcGJmcmMmtjoXXZqPz06Pzk+PLU/El8ZGAYQnR+PT41D+0WQsMD0a
Gg9DuzxTseB4xD0Z9o5FgoCmRyOBaCgYiUVGI9Cq8lgIkK9rPOwcCzsnwtBu
8sxE/OTq0tL89MxYfDIUCHnsQbfd43R7HQ7gnsCk/aDqY9BpN0EbUnanz2zz
WKxucNFuhOreLRabzeaCnmJ2Wc0QZVuHHQDOUEthq8c24jD12YAgN9scUHjW
sFCiJLP4eDaTyOO2YwnFRVXEhiZYYUFrSVZDfm5dTllZbmFeVnZyQvIzj+9p
rq5zG3uMWqlByNJyaBR4GxuDBtpVimuTEtplJKSEgFWQcEpsswzfJMAiRFgs
H4YUI7GCDjixvgZbU4UqLKNXViqwbXoqrodBADi1Cunjfbp5W49PynVwWSYO
uZeG6ibBtNiW9pyMhswcdE0zrR0twZKURJyMjJGRyTIqVUWlaClEFZ0uojKY
BDyXRAD6TUskKrEICaqZ01JObywj15Yhi3Kbs1KrM5LzUpOfeuzx3Y8/mbD3
2aP79x4/eCj9wJHkfQcO79l17PmnM48fOrDn+V1PHU7PKk/PrUnPrMjMymuq
r9erpAa1vFet7FICMAp1ck6nVtRlkGvkPDmfLuHzxBy+kM0Q8pkSIUvAZYv4
AmBFFDK+Ug4tPncrRV1K/oBB4h7ph/rEWk1hqx2g1Wnpd9kH/A4otswPxDMQ
zDZHwDoScg8Ze1QSNhkCLwsjZOMhkczCSlkYERMj52KUXISaCwMqWs5EKgEp
c/EKDEnXSNXCcQZGtU6awWUW4xHlcmkxh5cvYFUNS7LssoP9wmNS+hE2/Tib
mqwVFI7IcCYWw0hn6bFYUnZV7r4UOrxWQm8CjlXMRAmAGgfky8RKwLeGVrYJ
CgZWx8bpmYCL8dChfjawtxhoaZqDFTKxYiASWBgFkNl0vBrKpSJJWHgRB8tn
Yv4b+AU+GKquvP/dt/f/dveXex/9cPfj7z/54Kv337/73p3377z47u3rb7/+
0q2XX3ztxo2bL15/5eqFly+dffHS2evntq6dOXlpa/3y9sb28srm0tL2+vLJ
tfkTa8sby0vLi9PLUI1lbGMuuDYbXpmbmJ2CSjuWx4NLgIunIuOToUmoLiI0
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
VUUNdcX1lTmlpVkFOakZuSkpXQK2o09u1HE7hQCnaDUZp6cRePBmanMLB4Mz
iIQ6LpuPQ/ORWEZ9B7m6jVjZTK1voTbW4yuLMAVZ5PJCMbZdQYAbGOCJ6F56
Rw+lfYBHssmFRh6zh44foGMHGdhuUkcntWWQBx/h45B5yc0Je+klKVJYjQrf
0UVHDXDwRh5lgE3rpZP7GIxuCl1PIctwODEOyUHUcloqqHXlxIpCdGlmU256
VdrxyrTjuYePPv3w47uefObZ3U8feP6po3ufTtz/fMr+A4ee2pW6b39ywqEn
n37q0IHE5OSSxOSStORCZHN7j0rZr9b0KpRaGcCvFCCxS8XrlvMVXIaEy+Bz
GQIuU8ihCdlkPpvM4zIlbI6SK5ALuEoBWyvhaqQsrYqjU0oG1CrXSJfbMugz
mfzm4ZBtJGAZ8VmMHuj8ndnvtLoH+tVcQOhkOR9qggGoTczESJgIJQumZqI0
LMKDHRyckklQcLAyDkrBh9Akg9wxUYjvkGNaKejmlg4MlcEiE5AEAgLPQCEY
bShaPYVRTuHU0OVEloLNlPD4Ig6fBVdh6zXVcAOqo4tdTc0vKdmXASsvElDa
BXSUnEEQ0ttlnDYZG6tkEyQQMNEAmGI2TsEhK7lEORUloSJEzHYpBGeShIaW
Qt3g8Xw2XAydpGiVcNqVHJSGSVMwyP9N9N7/7bv7f//y/k+f/fD93W8A/371
4b1P3/vs/bc/f/etu3duvffmq7dfe+n2a9feAC74pes3r1969crZGxfPXTu/
ffXCxrmTwNfGT51aOLk5e3Jt5dypta21xVNLSyeWNjaWNjYXFtbnF5fmJpfm
IytzcWhHaSK6NBObnZiYAOQ7EZkbD88BIT0emo4H5+OhBw2lA1NQdkN4OjY+
FR2bDkWmwyFggcfCgfFwcDwaiUfD0VA4GogszExvn1xdX5oDFhhw+ljIH/J6
/G5/0OX1uixejy3oAR/6gj5fwBcAWA4BJe10RFz2MNT+1wNEtQdIZS/AuBeM
gNsb9XgBeMMuTwCw9oOSD8C/4KWcTrPPYXMPDUm4YhyWhSbw23G00sq2nLSK
lsrK5sLCltKa5pKq9uLKxrzSmuzi3NSczONZIizB2SU164QGIVVOxcmJODkO
2UnEGkgkCYEkwBGYcDipuYPcCKPUt/E7MEIknAVvJNZVIguy0HmZagxCR8bq
6cReJslAbjeQW7opiB46oZOMU+GRSjxMj2vpInTo8R0qfG0vvdnCw3aT4e1p
x9rSEgD2+W0NCmy7gYrV0fE6GkFDxWqA7SJhNQSsDIUXwGHM5jJmfTGppgiW
n9mel1WTlViSdqgsKyk3+fhTf/7z/meePrhr1+Hn9h7btzvh0K7Ew/sPPvNs
2sFjR547/Oyu/UlQ84/cI8fz2luxaoXEoJH16bTdCrVSIlWr1EqlVCHlyoQc
AZvBpdE4LBqbw+Rx6Bwmhgc1cqTIuWwZT6AQctUSrl4m7lQKNQq2Ri7s1sjM
Q3ooicxk8VktQas1ZDEB/ALbG3RbjF0aFZsio2OhPRoOWsJCQ+WLbCIgXxUH
oWGhlCyCDMIvWsHEqpgECQMp4yJlbJQMamOFU1HQUiSag0a2NiIwRD6VSmcx
EWQeHM/HYRhYDA1JERHhDDScikJQEDQWTshrklOKRNVlanyVVlTEqqvN3V3Q
UFTCJtYK6QCbOCkNqgxRcbFyFk7EQSkFgIIxQhZeySIpOTgRGyMCKpqBEDAQ
XAZSzMBAXabZVDH4DTBQPAZcxIar2HA5Ay2i/fP1z//n9tuDWqxvf/v1i/u/
/u23n+799PXHP375yXd3P/7qg3fvvX/n7ttv3Ll9463bN9584/rNly/dunH1
5tWrN6+cf/ny6RuXz149t3Nue2NhempzfWXr1NKZzZWLm8unVxd31pdOrS0C
U7y5sLw5v7SyMDk/F1qdjSzPjM5Cm8Kx2fHRuYmp2bHIAhjj4fmJ8Ox4ZGY8
NDUengK6OjY2GxmdjU1MxUcBC4/HghPx2Gw4OhkIjMfCo9FwLARGZGlx9sz2
+tb68vzc1ORkbDTsi/kAe4aCbm/YZYm6nGGvP+B0RdzugMcd8DkBor3QIQgf
uOJ3u71uj9dnD/rsYb/H7/cClEcC3lG/O+rxhzy+kAdQudvndrg8Zjtgcy/U
ul/IZiPgFDSWC8fSGlqR6amFtWWVjUX59aVFDaVFzWWFzcVFdZkFBSkZOQlp
+IbmARnXqOToRVQplSAjomW4Fh0JpSYRVRSKgkhUEYgSPFmEwkkxWAkGx4d1
kOsr8JUlsKw0UXP1CIvcxyR1cemAuxXYNiUSrsFiVRi8HIUUw+sF7fWC2mpx
eQW3olLWWmzAVvQQ2wZoaEZdecnBQ/CcdEpVCb+1hQ9v5yPb5OgOJaFVSoKJ
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
5NgcGrMP2h9rMGsEWh5bRRUo2iR6ssbQ6RJxmDWtjTsq+UysS8vsNYj8JmhJ
12nQgF/Za9b6TWqfBVrS6oUOGEodZnADCg9w+BaFx6r2gbfpVG6dstekdJrV
ZqPabVEHoB2YikCP7n+F379C5K59sbb22dov76z97Z21b9/99es3f/z0/k+f
3/vzuze/ee/eV2/e+vKV61+/dv2Dh6uvvzD/+vPzr95cfHBj5f712RcuFx8+
U1xOD82nJm6tFq8vp68s5y4uRC/Phy9MTqxOja9MjS8Xo8v52LnixEJ+eCE7
PJMenskMl1NDpdRwOnY6Hz9VjJ3IxU6lwqeykaFM6FQSWOKJY5mJo9nRw9mx
Q/HRI8mxU6nxY6nRw5nRQ8nRI/Hhk7HR48Hxg6HxQ+GxQ8mxI5nRI0OH+i8t
ZW5fmbw0l708Wzg3MzVXyJeTqXQ8nIiOJGPj6fhYOjYydvbMmZMnR08cP3P8
2NDJo+BVKDiRCocysYlUfCIeHUumI6lkAjq9mIgV4oksoDURSSaDSWiLZiIH
bbQOZmNQjk4CaQ6DXAxCNOA7FI+GTg8PaTUmm9bqNJr5DDqvg8JqI7JJGAax
lYhrbkFgaK0kt1a1x6Lrt2h65AIdm2HgcYx8kaFbaBRJNTyxmsnTsoARF8hZ
dGknUU7q4GMJ9KYmHgohasHwCWgurpmGwdEQWB6yhYWCCs9y8c10ONRdhVAD
w1bD4Tth8B31IKIiKyqRW2raa2DdGDgTiexsIFBRLWQEnIFE8bBEfks7E0+i
4Vu78XgGBt+Gw3URsDQ0goxEdWFwncgGBqoW2IY2ZGNjze4tT27a/tTW6s1P
NVY8hasCvhpFQzbJeQyjSmVQKf0uQ3/AuafPt7/XBQR3X59zT69nwO/fG3C5
rVqzXmnRyU2qbp2co5MI9GKuXsrSiwUGmVSnlJjUCrNa69AroZUUi9Xv6Olz
Wgd9zj0B30DAt6/ffXCPN+Cw9OhEXijhSjwGkBB5bjMfCLHLxPNbJECUXUap
y7y+zgsdNZK7TSqXRQvhbASiLF+fxZL0W6QDULtAQC4wt2IoZpoEAN5+Tbe3
p7XHBrPr4A4ttpO0raO16dA+174ecUDNFPE5UqNOYdDoDWKVnibSUqR6slCH
VxianXI6uxbXsKuGTcbaVWwPdABB0meW+4xyaH8XtOwr8xoVLqMWmjSzgDtU
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
uz773Pns+fnEbCFajIfKyfgUVCQ2kUtHc5lwFsTYcCKXTKWT0Ty0iTqeTEST
ILem4gDVfCpTSmUL4CKZKKUS+USomEqWMiBHZyF4k+lCJgcugGPOZYA6J1IJ
8NF4EiTiWBhE4BhUMDMUnQjFxicSwWB8fDQKHhGjI/GJ8Ikjh/b4XW6jxW/u
Cditdo3UoRBaZFy1iKYSMDUsmo7RoaK1qVidKkangkyRk6miDiKvvVna2SZr
I/NxOC6miYFDd2DwrQgCGYOlYTGdCHwHioCsgyPrUPgGLAXV3gFvwdUDfuF1
1TXwmmpcXRWpCcZoJhDhMOClUTvrWxrhQGFbmpqYKDj4mVQ0ugPVREXBybDG
NgScBH4+AUVBwygoAC+Oi0Tw0fC22g3Y3b8lVP2eWP84uXETpWETtXFTF2wT
uvLxqqd+//hv/nPDH36/5Q9/3PHYk1uf2rhr+/bG6uqGyipUfS2zvY3X0Snq
IPE7CRI6TkrDSulEJZ2iYnYqBSygWSoxRSPpMkkFDiUIgKqA1dTrsHp6TP3u
nn0++9MB54Dd7NRKHVqJ1wgSLr/fxIf2aZgAtmK/je+yQbsy1svjKPutKmiq
yqGCNNeqBJ45YFMEHOr9/a5ev8Ns1tRWgWdMHa2L0qOTa3hiJonKp1GsEsGg
UnnCyTnhQQ1akPy2nQMaep9exO9odxsY+3yigwMmj5mhFzZoxAglH9GnbfXx
MBo0rpdPPaRhGNGduE3VuPpqMafVqmZ4DCDAsgIm6brPBwZACNL3gAXcPA8I
sc+oAt/0GJkes8Blgs7/Oqxqu1llNwpcVg74K78e5HQFCMi2f10/5+f12Pv/
5vfztV/fg/j9y+tr372x9u0bv3z10o9fvPDjJ3e+f//2F2/f+ezRrY9evvzx
w+X3Xlx85/7yW3fm3rg99dpzUw9ulm5eTGeDp29emrp9qXxvderO6syzq6Xr
i5lrC/EL87Hz04nVqcjKVHihOLpQGFssBFfy4wuZ4dnMaCl1dioxNJ84M50Y
LseGi7EzhdjpfGQoGz5ZjhydCh2dDJ0uThzJjR0EqGbGjmfGn04F9yZGDkeH
j0bHj4RG98dBLh49WogcHzuxJzJ0+K2Hl16/d/7+jbmbF3OXFrILk4lSOjid
jkyn0uVsrpSDStdOZlOlfKZcyK6XYY+VUtECtKEa4hn8KaTSk9lCOV0oJjIF
gHAmNplO5tO5Yho621jK5aBSP9lUMZMppEoZIL+pLOSeEyAgJ+LRaATACyQ4
FEyGxpPhYAKAPBGMjI9C7ecmRpMTo/HIWCI2enif164WOOQ8m5RrkPDUXI6G
2WVgE7XMdg2brmGS1Z0UZSeDRyF1txH4xA5+C5nX3ApVXUahmbhWKr4FwMtA
YljQRDSupR6Hq8fi63BkeDsV0dbehMXXN+GamrBNDc2NdWREE7elhYZpwVTC
ETsacFUwYj2C2IRhowkiDLYbCDoW1YVGdMBr6EgYFYUAWbgLj6Kj4GxYPRdZ
341FkJE1nYgdnfCtXaiNTMxmDqqCA3uCBnu8pf4J7M4NiE1P7Xziv2s2/Gfj
xj9sfuJPO7dWwCrrGnfWwXZXkrFoRiuJQ2rubifwKDghFQsQljEIEipRzWNK
+WyViGMUCywy8foUlsZv1g7Yjb0Oc7/Tvsfj3BfwDvRYAgaQIpV+qKG2zGfi
u808aD+VWeCzilxWicvO9/fwB63KQaiAs8Rlk7iBRtvkAbsqYAMxWU1CEBvr
EDwBpwWJwsPhLGqzXkI3SCXNjUgWpc0kkvXJtHvMtL22ul4DrAW2i9AAU/Bo
FjFrj43dZ+/ym0mD1qb9LpRG1MCnwTyqFreQoG8neLrb9ytpZjwJs3ErHr5V
KcBYVYBfvsfEdpuA2qqdJgWw+gETQJITMHD9ULk8idvECph5vdA2EmiG3GFR
2U1Sr0U1YNXsMYr6Dfxes9wNHQcW/Rvm+Z8rv39ZXzz6eG3tI4jfX95Z+wHw
+/Kv3z/4x1cPfvzqwfef3/3zh3c+fffOJ2/d/vSVq58+PP/hi+ffvrf66M7y
K7enHt4oP3x28sZyPDN+9P6V8gsXsndWizdXJq8s5a/MA34TV5Zil2ejF6bH
VycBuaPzgNz8+Fx2Yio9DkY5OT6bCC7Gx2fiw5OxoWL0VC56vADgDZ0qTRzP
jZ/IB09lxw9nRvfnx49mRo8B8xwN7ouPHwamOhk8BK6jY09HRw7lwydGj+xN
B0c/eP2ZN188/8rtpbtXpq7M5xbL0elsqJCcmMqvd3IpZKby6elCYroUmSrG
yoV4uQgIjZcyQFWzIOhm0/FSNlPOFSaz+WmA6rrslnKpfDaZBReFEkiz5Vx2
CrwhDUa+kM5lMkCBQ8lkLAOEOBpLRmMJaF04lIiMxsMjMagrRAhqGRkcjUKd
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
XPkkofIp1I4/wrY8Vb3hvzb+8Tfbtmyu2lVRuWNLZeVWDLyxE42k43E0HJqF
wwIL3U1pEhBhUjLgt1XFbVXy6GouUy3iG2Ryh1btNmt8do3fqe51mPZ67Pv7
3QNes8sggypUQBuZ1gNvz/qFTeKxi6CuCj3d6xXalQG7ps+uDdig+nX9ZrXP
KAV/69ALtFyOik4XkLv63Y7Tx/YP+J02vVzO5dCpVLlCxO2m+w26PSaJohu7
Y+OTWDhaLeRreGyvhNqvaHGL8R4hwc1FBgQov7ipX43eYya7jBS7gey0MEGw
PaTVd9e2wLZUkpuxGjkwCdCRRuDnnQa+EypVJ+zvkXmsUAH5gBHqL+y2iu1m
nscshnaRGYQeq8AGdXWB+i45odJYMqdF5DdyXP+6/vM/zyx8vS7B363n33fX
fnl77ae31vX30do3r699/tIvH730tw/v/vndGx+9cfGTRxc+e+XqRy+ff+/l
2ffuLb13e/W9WytvPTf/xq3yQvLkUmHi7s3yzcvp5y7kb14o3ljJPbdSuLqc
vLIcubgQvzwTe2Y6fGVyfHV6bLkcXC2MgbGYHZ/NhOfz4cXMxHxqeCZ9ppw4
OxkfLkWHirEzucjJQvRkLnyqGDqeHz+QCh5MTRzMgK/jh5NjxzKjB9MjB+Nn
jyVGjseHj8zFx0YPHjw/W/zpu9e+/eTeh28+9+aDCzevlq6czy9Mp2fLqeWZ
3PJcAfC7tDC7uDB7fm7q4nx5cXZybmZq/p+V9KbzC1OFmWJuoVxanCwuTQOK
swvFzEIRcF2cKWanJ8uz01MzU4Df/PRkCYypcqFYKkAYAwXOFoH85pJJqENE
MpJMRFMgC8dBEA5lotFsJJYMh8PAPYeDkAqvVwBIxMaiwyeccplDLrMI+SZW
t5nP07LZelq3liFUMZmyzjYmmtBah26uQpDhLVR8KweJYcFgtIZGRgOCVY/j
NxI59XgGDEtvwnQ14piNOHodil6P6GxAdNWhybtR5FoUtQnOx2G60XAKvBZT
BbS7ilxb1VlfRamrYyIxbBSuDdlEQqM70SgmEsbDNDExjXSAMLaRi23go6uB
c5biK0SYTXzUVjbqKTryT1T4Bjp8E4jAlNo/ttY8Rqje2lr5FGH3442b/lCz
4T83/f53FU9tqdy1q27XrppdO9CNVTRkLQ1eT8chGHg0pxUvasOLiVgJiSin
d8h4RLWQruUzdWKGQQlYU7uN+oDdHHBoB32mPX7Xvj7voM/itih8JoXbKHea
xW5owuefxSQBniKPlR/o4QV6JL2AX6fKY1d6ofYK+gGH0W8GsEh6DEJWG1HB
Ygno5F6XZo/b4lRJ+y3KvQ7jwX7fkT2DWrHMq9X16SU6IaWmYju2oUkrEcu4
HKeoo0+K8YhQLiGqV4I7rG4/amzv15NsmjazjjTo4w0GRPt8irE+n7JVWr0J
QcQglDI6sM0eqIAzz2fgOrVcqLCkBeRZic8q6zVK3VBdaJHNAPgVuswSqJaO
Sey1Cb0W8E6pW6/wmhWeHonPIrIb/7/nr35cz7zf/z97JiGKgfi+sfbjG2t/
eXfthzfX/vzq2pcP1z5/8adPX/jrR7e+ee/Gx29f/eitS+vrvxfefbDw/v3l
d2+de+vm0ms3Zt68nZuM7L00PX7vavrW5dTzl3K3z+efW8rcWM5cWU5eXIpc
XYxfmUtcnZq4VAYWOnauGF4tjSyVT80VzkxnJmayE4v5s1Ppk8XU8HTq7Gz0
xFT8dDF+qhA+Woocy8dP5qPHCtB2rKOJsX250OHU2KFE8ER0/FB6DFjok8nR
Y8nhw7Ox4aG9+59Zmf/lh3d++Oz+l+/efOfllfvPla+dzy9O5xZn8uemC6vz
5eWF0tLS5OLK4ur8wuX52QuL80sLYMwtz07Oz2RmpwoLk8WV6TKAF5rpmirO
TZbmp4ork/nlch68XJiZXpieBl+XZqbmJguA36lyeapcLBdy2Vw+k83lkrlc
KpOOR7LxWCaezCYS6fhEIjgOwi+Iv5FoDChvKhyOR6OhcCgyNjoVjx/xgoex
0CIVW/kSI1+i4/J0HJaaw9ZwOUoGXdxGpSPx7TBkBwpHb27lk0iC1lZxa4cQ
0ypCkOSoLim6U0qgcHFkDo4sIZElbV3sZgq9uZ2DJ/MINCaujY0j0bGkLhSG
gaznEuoY6BoGso7aWNdeW0uFIzpRuHY01O6wHdHUCR3Yb2Dj4Z34BjKyiY5E
dOMaRYQaKX63GFUhRlYI0JuYyI3Upk0s2GZGw2ZK3RZi7bbm6u3YXU+hdz0G
2/Jb2OO/2fXb/9zx5Ia6bTvqt++q37YNV7ebhKjrQNZSkdU8AordjOEQEPzW
ZjGZLOoiyjlkrYiuFbXpJBSdUmDTKVxGo89q89p1g17DoMe939+73+vw27R+
8P/cIvbYVNDRIbvcb1P096gDPapem6zPLurvkfZZlH12hd+hdFqlDgCLXQGI
dpg0/h7DwV7L6cO9Simnx9S9XsJO1tuj7rObBr2uA4N7fHarV6Pwa5QKAath
d0MHDG3kdhp5JK+Y4OE19IkbB9TIPWbifj31kJEesND0BppZTzncyz/Yxzs6
qBnudRvaxA1bm4h4hFzSYTEKXVa136z1QzshAZ5yj1npBq4YmH+z2G6SWq0y
ILJus7zHKHSYBEB5A5A6C1068Aa926p0ru/3+Ff9j/4Ze/+6vvL7xfq01Udr
P72z9td31/724doPr619c//XL1/89bPnf/z09rcf3v36vdtfvH3907cufvDK
6ocPrr5/78J7d1feuX3ulZvzL94svHwrUwwfurYYu38tf/dy8e6V0u1z+edX
sjeXktcW45fn49AurNn4hZnY6lR0uTBxrhhZLgQXikOz5ZGpwthkbqiUPjaT
OTmXPDOdPFuKnczHThQTJ4rh4yXoONKJdPRILnwoH3o6HTyYHj+eCZ5IhY7H
g4egFaXxo/Hg0fTo8an4yMl9T9+6urr200d///ylb9+/9eFrFx/emr55cXIV
uOUZEIRnVldmALzLy5PnVubOLy2unls8B8by0vLywsrS/PJceQUqBlJcBh57
tjQ3nZ+bBhl5eml6anUW/BDguvMrs4VzC7PL8xDvczOlSUBvuThVmiwXS//0
0LlsOpMGEpzIRtPZaAriF2hxdCIeDacjkUwklopEk+FoOhSJTYzHxkPZULwQ
DbmUsh6p3CQA/PL1Qramm6pi0bVsnpLJk9NZQnIbrQXXCZ34IwhaO4XETkU7
U93O01NEKjJP3sGSt3dJySxJF0tBpUm7WCwyi05mMNvoDCKF2txBQrY0Iwh0
bJuK1GbhUFSsZm47jIlB0FFIMrKOgmrqQiPbYVUdTfVtCBQZg2bicGQkph2F
7kI3Cgj1cnyVFLNLjNktRG8RYjeykNvoDZtY9Rs59RtZtZvbK59qqd6E270R
s/0x2FO/a3j8N9t+/x9bn3qiZsvWyi1bd23ZiqrZTUTUtaLrutA1bFwjFddI
a0EwiQQupVVMb5Yw2hTcLpmoUyOh66Q8s1rpMOq9FkNvj37QadzntO91Q12Q
fFBrTgUksj1qr03hBPHWLvPbgZeW9fdo+m2KQZtyANqtoQnYte4eWcAB4rBw
0KH0281+t/HAoHF/n9mmlbttqgN7bKcO+PcFXADbvYOu/v3+HofZIVP71DqT
hk9rbbJw230SiokC83Dw+2StBzS4PUbCQRf1sI13ALBm6u6xse09vEN9ikMD
on6PICDlO1q74Zvr0fBahRRnNLAdVq3PpHcCz28Ve02ygFk1YIO6qPRBC8Fy
n03jsihdRqXDLHNZeFCpHwMXqt9uUq5nBIXTIHWaRE6D4F/l33+s2+Zv1o8d
fbL2y/tra++v/ePttb+8sfbdw7Wv7vz6xb1/fHHnr5/c+uGDO39+5+ZXb9/4
/NHVj1658NFLl96/v/LmXTCWXr4x9dKN4sNncsXxw7eWki9fL96+lL9xIXX7
fPb51ewzK6kri6lLC/ELC5ELC7GVmfjKVGKlHLxQHlsB/OZG5wrDs7nTM/mT
xczxufSZpcQQVIsjBVTpVDk+VIieLYbPFsJnMuFT6fDhXPDp9AQA+UxmbDg1
diY1fjozfio5fiQePJ4cPT6ZHD21f++Lz11Z+/nTf3z18K+f3Hv/tWfvP7/y
/OUVoLOLs4XVc+WLK7OXlmcunZu6dH7m0oXFC+eXVlYWVpaXzy8vXlpYujC/
cH5xahXq1jS1vDC1OF9aniueX5gBUru6MHtxYe7iIiC3vLQ4tbg4PT9TmluY
Lv/fjL13WJNp3y16/j/77LdNc0bHgoCK9N57SUjvvRIgpFNCSCgWVHpRICS0
0ELvvYTeexFs2MY6Ok5zHMdxlHM/zPueva/9vd/5vly3ueIDF/p4uZ611n3/
1u/X2dbW2tIBGLils7mppckIXjX19VW1UMGlscFQ32iora+prq+tqamqBr64
odJQd3A6XFtWUV2mr62oKtcWG+vK8y6kiBkUKYcRTcZFU8IjKUguGi7AoXl4
DBuN4KDhNASMFBJK8wtjBuMoweHU4GBGEJIdTGGE4WkhoWwEmoHA0JEIKgxJ
CEQgg0PD/EPCvENgXv4hPsEB7n4h7u7UwGAJlqigUmOIKEawF9HXNczdNcjd
PdzLIczbLtjNJsDVGuZlj/JyCnN3Dvd0RXk6o9wg58v3O8P1Ps3yPUN3P0l3
OUZyMce6mWGcDmHtvsDYHAu1OeJr/bm3xSeeJ/7hfPxTm6N/O/zZ/zj29VHL
EydsTh61szjp4WAb4mEb6OEY5uWE8bFD+TsiAp3QoS64MFc62o+JD+JQ4CxK
OJ+KiWISpRG8eHG0UhyhkUcBfjyfoEhTJWhUinipAGgUjYwBSWIJJ15MVcVS
lQpikoyqgdIKvBRZRKosMlkanRIbqZIzUuWcNFlkulKSfUEVLxPEQrXQzEQp
Sx3PjRawA1wCiEGh4kgOi0oi4Qh0Ai2eJ1YLomRceBzDU4FxkmHcVHS4mkk4
zyGkR5EvSimpCoxKDL8cy7wgpSXFklWJFE0sJkkcJmZ6SWHBsV542JkAdwcX
HhupkJDjRTSVkAnNYhATk4TspBgB1D9WwlQDLyzlJUuiEsWCRGB+gX4Wk5Ri
KuBlcEdQdgncnYgLhbBiqHGi/8z//tlb8mDU7z8rn59D4hmY348393+7uf/T
LoTf7wF41399sfzm6crrRxvfP5j99t7ws5vjj6/PPb0+/mBt4P7q8L3l4dsL
fUA/35hsbS/NXBs2bo42Lo02L5kaVoYbl4brZ4YMk/1V433VM701U51V4+0G
U3vlYKt2uKW0rxHawuptLO5pLOpuvNrecLUdKse61lVb1F5T1GkoAO8NhuLG
ilxoIwua3ptdX5ZZq8+pL7/arAPIzTbqCgDt1pVcrtFeBihurS7KPae+szG5
/+HhH6+33z7ffra3uLU2tDw9YOprG+wzjg60jA32TAz2TI12zZq6pkf7pkaH
hwf7R4eGxgdHJwZHTQMDw72dI329o/3Do72DI33dEJx720cGuwYGOocGeoaH
BgYH+gYAUw/2DPW0D3W3dbe2drW0Ah5uBSYYALgRvOrq66sPiNjYUlfXZKyv
M9Y01hoaoOoO8F5jNBxAuLyiBmrFU2HQlVXpyxsq9KoojoROFtKJUVQ0lwDn
EbARGKQAA4/EogVIDBeB5KGwXDicA4Ox4Ch6cAgrCMFHUCPQFA4cxUSgGGgU
MTAY4xkKdw4McPYI8fSEuXsSA0PQQYHoAE98kDcPHSoiwOUUlAiHYwWF0QK9
wzwdA90d4Z4OwZ42AS62Aa5Woa4WcFfrYHc7uLdjuKs12dcxAu7O8LOn+9pQ
PM8Q3cwJrkdJbscJrmZop8+R9n8Lsv3C2/YrH5vDPme+8LL43OPkZ/aH/3bq
0N9PHTtiY3HCzvK4leUxRwfrYE9H8EBAeroQfF0Q/i7hQQ74EGtKiCMd5cMk
IZh4BIAwn4wRUHCxArZKFKkWRUKzzOLFacr4lCR1sjpWKWdDE7dlrGQpVPOs
lrA0coAjaryUBNCaLONpFPykWI5awdPECjSxfLWMkRIfGc3j+bu6cogYKGQU
y42XMVKVAkcLm//5f/0D4xMoi+SfOnLC6YQFG4uQsFhxTIaY5SflushoTjKm
ZzwfKSVg43A0DSc6VSRUKahKedjlRFKuipUiwyfEhEm4blFE58gQd4F7sNAD
zXQPDnHxEnEYCSJmfAwjERLMAJ4EjYimFtETINtOj5dgkyTgEXTQJEfETpQC
IcGVRdOgTpgyljyGEB8DlHNUrBAQdJRS+p/1b/+zZuM1FNWHlPOrg2NfgN/7
+x9v77+7BRVf/XRr/8X279+u//Js6ecnCz88mHn1YObFnfGnu5MPt6ceA/xu
jnyzBvxv752FnjtLvdvjDS0l5zfGGjZNjeujjWvjjctD9XND9ZPDlRMDZTPA
CHc2zHXWjbdVmNrKhtuqBlqqeht0PQ3FPQ3anoayvjp9b722rV7bXAPwe62z
prDDkN9Sld9UVdRUUdBakdtWkWOsuFJbdqWuPLtWn1tflltXllVfll2nzWoo
zTRqrzTosjqqSvLOpT+4ubb/8dnHt/fevtx59WD5ztbI6lTXxEDjSE+jqb9n
dKBvwtQ/OT4wM9Y/OzIwazKNmYbGR4YmRybGRkzjg0MTAMtDo2MD4+NDY+Cb
x4d6xge6JwZ7xwb7TENDppER0zD4wvDo0MDYQP9IT/dgZ1dPa0dXcyvUcL65
ubkRqOi6pob6lobGFqMR+GGA30ZjTVtjbVNdtbGuDnBxI1DUVVW1VcAF6wxl
pdXllQDCzbU1+empEjpazMBz8QgeAcPHYiOQWC4ay8PiIpBIARIdgSIJsFgO
IlyAwEfAwiPgqCgclYehRGDAO5YRGsoIRBF9w7EB/nAvD7SPB9XfhRrgQ/YP
IAf6MOGBfEy4mICKIyKkGExUOIId6IX3dkV5OMNcnULdHIOcbMLcXEJcHcJc
HeDu9uFudnBnOx7MXYhyJnqfIfjaEN3PEt1OEdzNSR5mBDdggY+E230eYvV5
gM1RfzsLz1OH3E8ecj/xqcOXf7X+4m+2Rw5ZnThufea05WlzO3s7P1d3qGOA
hwvKyw3l44L0dSQEOxODnWkIbwYqgIuBccnhPFq4iIOJFRCUIk6CJFodp9Ao
xSmJ0nNJygvquBQF1Pw8EchXOXC1XI0EEC43ScGIkxGTJDQofCTnaeQs6OQI
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
qLBYga+UGxwdFSaW4aIjscooarKQDv5oBYcmDsfEeqFUvuR4H5oyhJEE55wn
iDK5irzoBDWS73HMzsnKBh/kI+EgVWKKWkpXQYulkZEBSJOBqhdHKmNYgIKV
Eho0JknK1ogZKWKyWkSMj2HHSYFH5kIbXBIKALJGzEuRRvwH8B70hoWU808H
yvnpgfN9+c+y53cP998+2P8ViOe1/e839l9svXu8/ObR0ptvVt7eX/hpb/bF
3szT3ZFvNvofbAze2xi6uzJwGzhfsJa6pzr1rfqMm1OdW+PtC+ONC6aWpeHW
xWEjwO9Eb8N8T/18b/1kb+1IV8VgR+lIa+lQa9lgs360UT9Qf627vri7Xtvb
WNRVm99ZDcRzcUd1SYfhaltlbgtUP5ljrMwyVuY2VOYCk1urv1JXermuJK+m
uNCoLazTFdbo8qt1wBQXNFVeAwD+4dVDiH//ePLx17tvXqw+vj25Ozc0O9gH
2HRqfHB+bHR+YnRmcmRmamRhxjQ3NTI7NTo7DdA7tzCztDI3Nz09Njs7Njc9
MjM7PTM5OTM+Pj89vTw9d3117c7O3tNvvvvhxzdv37x99+bdmx9/ffHo2frC
4sz42MhwT39Hc1djU0tdLTQbwljf3Ghsb2nqaGkHyO5p6+pu6WpvaocqtRrr
oWLpOiiw1FhdZawsr6+srKusri2vqtLpanSlF+ISoojkaApBQMRG4PERBHwk
AcMjhEfgwgXYUA42jEcg8jAMTjiFh6RGYmk8BB6QLw+J58DQrFA42S+E4BNK
8AP2NoQRGMoIQ3LRSBEJKaUipTRiDBEjwsGFOGQkDs5D+lAC3VDAmbo5hLs5
wtycAm0cwmxt0C72MGcHnL+rAOstpvpJSN5sn7MsL3O2xwmKyyG8y9/JrsdJ
TtY4p1NIx6MBZz/ztz3kZ3/U++wJV8vP7E78xfboX2yP/NXm6FHLE5ZAPduc
PO111g4gN8jpbLCLPcLLGe3ngPZywHk5kEK9KLAADjaEDtQFGc8n4fkMoigS
GmydKI9IkUemyEWpcYqDwUkatUIOtTcHQlROV0Od6xhqqI0zF+hqKCwv4SkV
AhX4/x/L1ihYqcAOxwAWjsQH+/s7OIbBgqkMooezZ4C3WzQfyUYGoV18SCFB
UXR0SpKUS6VhQ9GRFNo5Pj85ihQnDFVEw4VRcEE0IkaAjWeFK4lhCRhMXDhZ
6c0458Y/FxCZEh6dSpWnx6gL4tK0KVcK45Lj0CyH47ZnT9uE+boKGCFKyPMy
1WIgiZlJErJKTlZB9SScREhaUOVQEIOngiaqQLH9NPAIEnETYyKhwSsxJCh4
KGQkizmafzO/7P0Bfv/sk/PnsdE3UGAfrA9399/e3X9zf//nm/s/rn94tfzh
5cb7J+u/Plp5/XDhx72572/Nvrw19Xx39Nn28CNIP3c/WO79ZrFvd6bjxmLH
WGtJX5321uzwmqljcaJ51dS0PtI4P1K3MFI/21+/0F8931c+1lU51lU92lk2
2l5maik3tZaOtpYMNl4baCzuqSvqqCvoNpZ01ejbq0u6qos7DYXNhqzGqpzm
qlyjPtNYnt9QUVCrzWgoy2gsB7Y3v66kAOjnOl1+PVgl2S1VJU0VuvKC3F9+
fgbu7uOH5/vvHrx9sfHtncXdpYkZU++UaWBuanhxcnhlanRxamRxdmp+Zn5+
bnppdmppbmZ+Zm5xZn5pYWZ5cXJ5dmJlaXppYXJxanx+cnJpYfn65u7De89+
/eWP/6hmfnn9en15eWJ4qK+nr6utt6Opq8XYDDwv+NXR2tIH3HF7R397Z09L
R2cLdEbc1twCVXwYoSRyY01No6HaCPW0LK+prKyG8v56XdG1WB4niowSUJAR
eKQAEC4ZG0kmRJNpUXgcH4Pk4YlcDI2LZXCQVAGGwMPi2UhMBDycC0Nx4Qga
LAwdBMOEIdkIPDcUE4nCSIikOCZLRqdKGQQJFSEjIGJQyCgcOgIHY8L98f4e
MFcXmKsX3MUzyNouxME61NUh1NkF5+spJPpJGd5CvBvL9yzb+zTTywzr+hXW
9TOiy2G8gxna4TjS3gxhdSTc5gtfm888z3zhafmJ88m/Ohz9i9PRv1mf+NrM
zMzq9GmrE5bOp+19Xd38nG1gbvZhbvahXg7hvk7IABdskDcVEUBD+tKQwXwy
WkDCxXCoIgFbFs2Li+FrYgF4RSnxkmRV3DlNYmqCQhPDTxZB/lclZyfHclJk
zBQF0KWA6RgpsZFJCg40MkzOToSyDJxkaQQgYh4TEezrFeDuEsEiEDEIJ0dr
FhMu5BDjo2OELB6QMQlSEQ2H5jFoAgY5lR+RHEVJgAqrwoQ8mJCCkSFJ8f7Y
BG+C0peWGEJNgfEuYaUZHEWOPOmK6mLu+fTCtPSryek5sth4PM3Z0s76zFkf
N1ugzoFOTpWy1DJqvIiYICEDJayW8tPkbLWEGy+OThBGqYQCDdTRi6mUMpMl
TA2QFtECdTQ3XkhLhGKSXLmInij7j/73zz51vx1Q8PcHEH71z5rJPx5CNVev
9z6+uffhx+u//7j828vlt0+Wfnk8/8vj2Z/uzX13a+blzckXuxPfbpuebA3d
3ejdW+ndm+++OQf0c3e/Udtbo7s+Nbg21rM01r4y0ro+0rA6bFweqpkfrJod
qDL1Vo72GCZ6akfbgYQuN7WXAxYeaS4ZbS4ebCrpa9B21hf01pX01FR21Gjb
DVdbDfmNFdmNFeA9p6k8u6kst0Gf06jLaNZn1uszoV7QpRn1ZTk1uuza0oy6
4sttlYW12qKqawVvf3myv//dx49P9n/be/f91su7SztLE+OjvVOQKh5Znh1Z
mx9fmZ9enJlZmp1ZXppZWZpbW1pYm19aX1oGsN1YnttaWthcWwAXV2YW1pdW
d7dvPr7/8rffPv6bfcCP0MW3v/06NzfTOzDc0dHd3dra0djQUl/f1tzU097e
39XT29XT39Pd09nW3dbW2drR0drc3tTUXl/fXF9ZW1dRXW2orqqqrob6SleU
Feu1xWVlxYXZ6UIqUUwhxJDQEWREJBUVQyYKSbRoHDkCg+UBX0wg8EnkCDyR
gwlnIWEMJJqNwHDCsYCCaWEoTGA4PhBNh2E4KLQQS45nseVsjhRaNBmLKGMQ
RDi0hICKwAXT4YEEXy+kp0uYuyfM0SPM0THI+ZS/o2WAvR3KyzOaHBLH8pdT
fWje5myvE3TP4ziXY0jnL1Eun4c7folw/irc7jDSCvjfT/xOfepnddjd/Ijj
14ccjvzD/uhnZ46bHTt29KzlidNmh+3PmPu7OQe5WKNczyLdbII9rIO9HdD+
7oQADzrCnw1MAVgEOIBwJJMSHcGJE0amiEVqmVQljz6vkp5Xic8nyzTA/0YL
UkWRKig8yEyR89IOJiloZIxzCibAcqKUAXVHlwHu5gAVnSSlJ8WySdgwTEgo
H4Pm4bE0Is7fy5lBCdGoJBfPpyXHxkeT6JeSYq9cSDx3USXic9QcviaSAdR1
PI2QiMEnwKiqELbGj5MSGJmKjklliq6I1FfikrOTkjOTzl1MSruSnFp4/qI2
/eI1pSoOz3U0t7Y7ZePtbEOjeMuFuCQo1Qh1e46LoSVIqRog76Gm8bxEoTBF
Kk0SRysPbiQBKuTmaqKZyUK+OiZCKWIDdxwrhU6gkv7P+WUf/yWeX/+r1eTL
/Y8/7ENU9Xj/3TdQZv+n7f3XNz98f+OPl+tvny28fjz/0+O5n7+Zf31v4fvb
cy93Z55tTjzbGnu03X9nrfvWSs/NpY6bsx23l7q7aouHGyt3p/s2x3rXprrm
x1qXTO1rw20rA40bk21r093TPc3TfUZTT/VIl2GkwzDSXbM41rm7MDA9ZOxs
0HY3FPfVQxEkQMSdNVcbK3ObDHlNFQXtlQWtldktFRmtZZlN+pwGXXaDLsdY
Bhg5uw5qLZvTpM1qKLlcVXyxpRoqhDaUFv3+7ruDFvTPPv7x6N2rGy/uLt5Y
Gpkd65+eGFmaHtucGV+Zm1xdWVlbWllbnF9anllaml5fnt1eWtpZXdxenb2+
trq7vnljc31rbW1jZf3Gxu7je8/f/vJvwPvPf9MP0JeeP3s21D801NPX09rU
3tzQAPDb1Dzc1TfWPzwyMDTQ39/b293Z2dHZ0dHZ1tbV1gRtR9cb6utqaqAN
6fpqQ52+vFJXVqbXaQGEa/T6nPPnYygAsBghHR9FJgiJgH8JQgIJUDAPA3gZ
HYHHcrA4Ng7NDIezEHh6GJYFABtKoPjB6cFoRiiZjACmEimiUOQsdjyPFc9h
xjOZMgpBTEMIiTAhOkQI1DgilBAQgPXygLm5hjo7w13sQwB4HS1Dne2wPm7R
JH8p1VNEdqf7nmZ4nCR5HMe7HKe6W1LdjuHsv0I6fg7tP1seCj5zKMT6iO/p
Y46WJ5yOf+14+NDpL78w//qolYW5taW5lfnX7nbmga42wS42aDc7jKcj0t0F
7uWKCHDDh7jRkd50NIyJxfEISC4hjE/GiAF+RRIA3oMSStEFpeRCYlR6sig5
XqQWRwBXqIRwygL4TZUBa8lNkUSkyiDZDNCRIuNr5DylnKuJZaikFJWEkyCM
yExLPpcQL6DTaHhCmLsfBYE+p4rPz8m4kpEZyY3ISk4sTD+XliCLl3ATI5iJ
OKIKTlOFctUhbDWck4KJukiRp0ep0uPUGWkXLqeeO6/SZGku5GguZ5+7mHfx
kvZydmlmTnHq5RS6xPmYk/0pZy8XezLRRxyFV4qZahFdA0014iUCkRAHdbhN
EAoSxMIEmSghJhooaiAkoHR/DD8FiO0YILnZiWJ+rJihkNCSJVyNkPO/Iff9
QcHVDwfI/engw3cQeD++go5939/f//UepJ9f7378fnv/1fX9lyvvvl18/Xjl
p0fL3z+cf3l37tntyWc3xh5vjTzYHrq/0ftgrWtvue32YtetuZ7bi91thjxT
R8X2fNvGRNvKSPPSeOvsWNv8cNuD7bkfn99eXhwb6Wnpbaow9RlMnRWmDsOc
qf3FNytT3dAkMoPuWlNZ4aBR311b0llX1FxT0lBd1FyX32TIAj+2rSq3vTK7
DWLhgsayq2AB2NbrAHiz63RXGkozmqBEf1Z77bXKq9kN5fqP7384cAdAVzz7
/cdb3z5Y3FoZmR7rnZ0cWZma2Jqb3pifX1tcXV9a2gDMuwi+urizurC9vHhj
fenG1sqN7W2w7tzYvrVzfWdr696tO69/fPOfgff/e/3227u52QXT4HBvR2tr
c31DfW17S/Nw9+Bk/+Dk0IBpcKi/v6+vt7u3u62vs72rtaW9ua61qa6pvrG+
1lhfW1tTXVNVaYC60ZZpy0q15UXa6rLyi8lJXBRKQiGJKAQRmSAl48F7DJkU
hcELMMAOo/g4Mg9LB1qagyRz4DgGDMEIDacEhdJhCCaKQkGS+CSCiEmVcJhx
PK6cSFZQyDIaUYoHFhgZiYYJkHA2LAzjB8DrEO4KPK9liJ2lv721j5NtiDNw
wVaRGE8J0zua4kHzP0nzOE72tiC5W5Jczciuxwj2X2IcDiHtDwed/tLP+rDf
2aPeFofdLA55HjvsdPgr88+/OPbZ4TNmJ89amJ01M3c+Y+XjeCrA+eRBFYdT
sJszwtMe4++M9/dmIPyIKG8yFsbGwAWEsGgyWsxiKoSCWHFkolyYBLWQlZ1P
ir2kkV9QidTQ9BM+NDpByk2SczRQwTP7vISVIiZrFLRUBRcaviCjp8Xz1UBC
Q2KVn5Eaf+VCcpwoOl7KJ2JQxz89HeQZogRSVqWIj1XIJYJEeVSSLFoNfKiU
mSRkyVFENYyTjBAkkyTnI5VXFGl56ozs1AtXNMlZ6pSsFHV2SlLh+fSiS1ml
WTmluTml2dmVedd05/MvcOKczGxPmx/1cDxJxgSKuDRgadXQ6DQWFFKGOrfT
VDGsZBFfKRHEyiLk0NEwUwmNGmQDq66KpmqiKRohVRnDjhPRlGJyspCZHEM7
OCr6s0nOLwfk++u/dp5f/i/9vA/E8+393w4qJ1/f+PjD7T++2/nwYum350u/
Pt36+fHKqwfTr+6Ovdgbfnpj4NHOwL3N/ocb/Q/XeveWO+4s9t6bG9ib7WrT
X5nurtyaa12daFwda1yZaJsfbVkc737+aH2k31iQm1NWqtMX5HU36sZ7yvta
dYCgV2c789LPZadfLs69os+91FJZ0F5b2Fpb3Fpd0l59rdWQ1VSZ0VpT3FJx
rbUCsHBuwwGEmyqu1pXlNOizmvUZQE7Xl+bV6QqqtXl9Rn1FYVZTlX7/w5/W
/tn+H49//+nWdw8WdpdNM6bh+fHhtdnxzYXp1fmZ1YU5wLlri5Oby/NbK7M3
Npd21lfubK3v7a4/vLXz8MbNezdv3gXvN25+9/jJx/cf/kv8fvjwYW1tdWSw
f6Cns7O1sclY19HSPDowND1omh42mYZHBqG6j/7B3q7B9vaeto6utta2+ubm
+oPYUm21saa6zlBVU15WrdNW6op1RcXl+vKcy+D/JiUGGgtIEdEIEjJSRMXI
mBQA4WgyPgKPEuBwXAyRjaXysFRmOJ4WjqGGYylgITBUFI6EQrKwKAGeGE2h
CKnUKDRJgCdwsShOOEaAxfMQCA4ShgvwC3FzBM7U19462MEuwM4hyNnF39Eq
yNkK7ekgQPvKWMExdB9GkCXL5wjR8xjJ3YLofBTvZoZ0+hpldwRjfyz4zD8C
z/7D3+aQx6kvPCyOuH39pdORT09++o8jX3xlduwrK/PDZ8xP2J8+4+t8KtDd
3M/VLsDLLcTTIdzdBuvrjPfzJIV408I9mUgfDsqfjQ+NYBBiuOQ4IaAhkUom
TY6VpikVF1Xx6SrFxSSRSsRNhthWAICplDFUsdQ0OeuchJ4qJ6XIKGmxfDUk
pBmpcn6qIkITC1iPoZZz4mKEKqkkVanwcvY7ecgajwiXRBAS5QK1Qpii4GsU
fFVshBLCLz+Bw1aS+ef5cRmypEuJqZnJ6Vmai5nqc/lpKYXJqdrkS6VXcoqy
MrWZ2aXZWWX5Wdr8nNJrObXFV0vTc9N4Sk9LB8uTx5zsLPAo3yg2PgmgVcJW
S+lKaDaZIEXMOCdipIr+HNVNk4gwcVAtBzFJxEiRAAnNjJfQDnauIlQiQqIw
NCmKnCSiHcDz5wPM/nZAwR/+Vbnx/YF4fr7/4fH+x7v7H27s/35r/5ddKPP7
au/Di1sfn2++e7zy9tHm60dbL+9Mfn978uWd2Ue7I9/sDD3YHny43v1wofv+
4sCNhf4b8/07k50NJZnzIy0bs50bU81bEw3rJuPKaNO8qXV3fbCptvDKudSr
GVd0GZdqr2X0NWkHWsuG2qumh9rKigrSz13MuXwh94pGm3uuXg9kc0lrdVF7
dX6HIae9qqDDoG0tL2g+sMCNZdlN0CyzXOjYqDTLCMgXShTmVupyKkoyBlrK
yvOzOhtqD272AL/v77//Yffl3szu4tDc+PDS1Mja7MjmwvjG/MT2/Mza0vTa
ysTW2vTm6tz1jeXdrZW9nfUHN7Yf39l7fPvuw9t7D+7cfnL/7puXLz/+8V/j
F7z2btyYHDUN9/X3trc1Gxt6O9vHRvtnJ8anxiZNprHRoYGJgf6R3u6e9rbe
jo6O5o42Y2tLvbGpHuC3rs5QbSiDAv41ulKDrkRXDDWTLyvMk/PoYg4pik4S
0KgxdGI0FRlJhkdRiREUqoBE5qDxEQRgh5EsJJYEQ5PCECwkkYQg4+AEHBxJ
wOBoOBIHTuAiscxwFAmGxCNQNASGHIIgBoWSAsKIwWEob+8QVydfZxt3Oysf
a9sge6dgR/sQoHXdHcLcnSNx/gncQBHFjRVgRXY/QvD4kuF+kul8jOp0Auts
jnQ+E25vEWz7aZD1X4JOfeZv8Zn3yc+dvv7U+vDfv/78/z7y5f88dewTa8vj
p06Z21md9nK283Kx83dzCvJ0CvOxxfg4IT1cEL7u+GAvZrgfFx3AB4sCj2CR
IjlEqZgZJwZUG50SG3M+Xn5RGXdJnZCeJE8T889L+SlAHst4KhE1SUZLlrNS
gReWMtNiuckKbiK4omCci+OnyiJSYnkqGSNZxtBIIjSSaGCfSWSaMiE+TRMv
YJKT46MP8gv8FIUgDaBYwk2V8hK5tAyZPFOVmpF86bL6Uk5yel7y+Yvxyenq
5Gvpl3SXs4ozrpZkl2gzSgx5+qqCYn1eQW1psVFXrL2UpaRLXMztLcwt7M9a
Y8OD2AxYkpAIqeKDI+BECVUpJkAKOYYN9ZmUEOMVZKWcEX8wbCVFAh2ZKSDn
zgN/W5WQDYUKxRy5mHGA3x8PaPfPqO+fzPtnt7oD8P6xt/9+e//33f1fbuy/
vrX/w/X973bfP99992zz92frbx+tvrm/8uPe7Mvb489uTj6+MftkZ+Lh9uD9
9a57i723Fwa3Zwe25/pWphrrS68sm3o2pntXJptXJmtXJ+sWTfVzo80zY03D
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
vf9u+8Wd+c2ZgRnT0NKMaW3GtD43trQ0vLY0trk8fX1l8cb66vWtjc2tlevb
q7d3tr/Zu/nNreuP924+fXD7+f29Z3cf/fbTu/8mfn96+Wp9YWNqcHa4c7Cr
GYiQ/sXp8YXZ2eWZuZmpqfHxSYDf0cGB4f6+7s6ujpa29qamloaKhrqKOqiY
0lBvKK+rqDLo9eX6Ul2JXlt8zVBWmCKPFLE4PAqVhwmLwPrzcYF8fAAH6cOA
BVFDwhmwcEKoPzbQjwYLocHCKcEoYgiWFIolhCIwoXB4YGBoYGh4IArmG4II
8A3z8Q7x8QvzDQpy8w1ydvOydXKzdfKys/Gzt/SxsQh2sg+1PRNiaxXqYB/s
bB/kaAdztCN720uJ/lJiANffhuJhiXM7SgT4dT1BdDEjOB8PtTsWbP0lzPaT
0LOfBJz+3Mv8K2+LL5yP/s3uy0/OfvGPM4f/cebYEbtTZnbmJ6wtz7jZn/Fz
N/d2OQXsNtLFCe3pGOplD/dyJgeDv7w/ExXMxYXxifAIBkrAxsZGc1QSAQCd
KjY6FWpBGXMuWXFek6iRSzQiXpo0KkUWrZFAM0o0cmaynJysoJ2T89Jj+edk
3AQhUxXLBPI4NS4KAFYdy4tTsJUAvPGC1NgIaGsrFoCXBRVxQe/cFBkw1JAL
TpFFXhBG6y9dKs64UnLpkpTMiGYwI6MjJZLEKyn5pXn6opzcyuJrNUUV+syS
yvxrNaXXjOUlLQZdQ1mx/mLGZYEm0CbI/OiZU2Yn/Pzs8KRgUQQpEeBURFHF
MJJEgkQRTSUlq0U8TST7nJCZJmIrxfRYqPk8O07KVYrZ6hi+KiZSKeYqRdCO
NPDOymjaQT+6F/88Lfon7T79F3K/hQqe3z+Bdp4Bfn++DcD74dXmu5eb756v
/vFk5d3D3Z/vbr66N/Ptnunbm6bv9ma+uT5yf23g4frI3eWBG4udO8tdO4vt
u3PNsx1lrWWFa8D8jrVO9tWOdNdM9hoXO+sGDKXNuoLOmms9tYVthsK2Wm1z
VWFj5dXGyqK2Km1L2dUG/dWmivyakit1pfnG0vzO6qz22uzGyjwAzHpdZoM+
q608v1mf36SHBvsCaAOp3Fx6tVEHbG+WsTSrAZp0llFXll1Tkr8wO1GQkbU+
O7u//+7jh4Noxtt7b5/vPr41tz7bNz3auzQ9uj47tTw/sTA3trowsb0yA5Tz
zvrijY3VW5tr1zdWb+xcv3dn5+Gdtcd3tp7d23tyZ+/RrTs/f/fTf0M+HxwB
P3myMDtvGjT1t/d3tHWZBoYWpwF056amAA9PQOmm4aH+3v6+nr6ezm6oHKu5
tb2pvslYU11bUwV1tyuvKgdLX1mmLyvRGkq0Rr02VSYSs9k8MjECh47EwCLx
YRG4AD4uBNAxAx5CDvIiBLjB/dxgAf7Y4FBkQAg8IAzuHYT2DkR5BcK8/cK8
vMK8PEJcXeEergEubj5uXv7unoHOvkGOHoGOTj6Ojl4ONl52pwIcT/k7nfF2
OONnbw0oGAYktKNjsL0V0tFCRgiSkYI4QXYMH2uqxwmay9dkVzOs03GEwzGE
/VGY3Sf+tv/D99T/9LM85H7yiKfFZy7H/2771SfWh/5ue+JLS7OvT1ucsLKw
OHvytDcUQbLycj0V6uaAcrHHuNqHejrCfO2wAS7UEH8WLIiNDODig6KoMCET
q4jixot5SkCX8dFpSmmqOvaSJvaSOk6jECWJgbEVJEuik0XRSjGE3xRAozJ2
mlzAIiL83J1DfHywQb5SPkqjYGgUvES5IB5qMMuFqrMU7KRYvlouSInlHESG
uRoZ83w8LVXBUMeCr3LTJMKSKzklWbmlGRkX4+OlwgiROFIZm1iUodVn68vz
dVUl2vLiorKrxVVXS4zaEqNOV6erqivWll68mClQhp/1tzp87KyFuYujExYN
k/AJKhFJKaJpYrgpEqD82eekpHMSSnIMFOdXSjgqKStRAgiaD00HFrPjRSyV
mK4RUVOjeeej+MlCZoKQdJAwevKvnNHzA/DehcaDQgVXD6C00fsH0KiU3/b2
392GZoa+uffh53sfvt/ef7r2x+ON1w+WXjyYfLY3/vLm5NMdaNv56frgN+tD
d5YHry/1by52bs8131loHm3K7665tjnXszzeMN1fburST3XVzHbWjHVWtVUX
d1UVtVXmd9Reba29Vl9Z2GLIay673KjPq9Veq9dea9bl12sh/LZUFndXF3ZU
5bZUFTRVZNdpLzcAFtZmNpZmt+pzm/U5UMGGLruhNKeuNBssqApLn2HQZlaX
5taVaxdmRouysnZWlwH/fgC+fv/Rh19u/fxk+/mdlbXp4bmxoeXpkbXZqY25
hY3ZufWF2c3Fhe2Vle2N5Z315VsbG3d2tm9vbd/dvn735taDGztPbu7d3dnZ
295+8eDFx/+GggYQvnNzb35qarJ/oK+9v7O529QzMDsxPj09NjE5NjE2Zhoe
G+03DfYO93T1dLa3t7d2tTZ3tDRAkYaautqa6ipDZXVVRSU0/qxUX64tq9SW
1upLU2RSCZsrpJIiMWg+MpyPgQkwIRGYYD4+hI4LJMI96aFeBH8vmJ8v0jcA
4xOA8vXF+nkiPTzQbj4IT+8wb0+El/tBew3HMDcHfzfPQDdPmItniLOLn4O1
r4Odn6Ozn6NrgL2tj+NpN8ejfs4WMKczcHurYHubAKfTvo7HInDeMrI/J8ie
5n2G7HkU5/wFweUI3ukI2uEIyv5ImN1ngdafBlkD5j3kavaZh+WnTmaf2h79
3OboV9bHTp4+bnHK8uSZE+ZOlqfATwtzsUK4nQ3zsAv1dEJ4OME93TD+bkh/
O2KoBxsWyELCOFhkJDFcRCPIonlyMV8dJ01NUFxQxl9QqdI1iZmpseq4KChn
JwYQoEBjy+SRyYA3FVy1lKWOi7a3dz3ylZm9tY2fmx2PHKCMoaihLCEvJTYi
RQFNUUkBOlku0MiBEY5IBlcUglR5BLT5HBelUkDO+qI4uuTS5ZLM3KvpVwov
pV9OScu9fEWXV1iWW1Kep626qq28WlxZpC0vKKstqawtKjMWV9cClZSrzb+Q
cYmvQpz2O/vlYQfL065O7rjw8CgmOkGEjZNQEiSRSSJRijgyFUorQH1loZkp
Yk6iJCJJGJEUzVOJeHExDHkMSQl8fTQtOQYAmQ0uqmM4BwmFR9AJL8TC30JW
9/19KGoEDC9A69sb++9u7r+7C21EQwB/s//h3cd3P3/87fnHH+69/3bz5ydz
390bf3V38vHNiYe7Q4+3+56sDz1cHb23Onp9vntjvnV3vm1vvmWk7upwQ/n1
xb7V8ca5Pv1QW+FEf+VEd/lQu66nXttSUVRXUdRUfrW1Kr+hIqejprCzJq+9
KqulMrfDUNJakV9XekGXl1aSmV5dkN1eXdxWfZA8Ksto0gMUX6rTXWjQZzQA
vOvzGsoKjEA567IMpVnV+gzIBeuu1WpLastKZ8Y6c9I1168vQeGjD9Bdv3+9
8eOjlcc7S+vjI8ujQyuTw2uzY4Cg1+dmNxZntpcWtpaX11YW1pcXr6+u3dza
uLOxdn9z497O1p3dzXvXt26srm4tLj3a/eb96/96C+uP399fX9maHh4b7uzt
7ejtauka6hkCnDs9Pjg1PjI2ahoaGBno6R/o7u3t7Olo7wTgbYaChrX1tUZj
TR3wv9UGQyU0tFBXDQWRDCXFJYbSa+fkIjmPLWZSooiYaDw2CoMUoEP5GB8B
1o+ODSCG+/KQARHIIA4CxgkL4YbC6WGhNFgAKTCUGhhODgikBgXSAvxxvl4o
H2+Ej0eIp3O4l2uYs12I/alAx7OB9nahdg5B9k6+js4+Dvbe9pZBzqeD7S3h
DlZhTg7+LuDKCVKIjYLuzQuyZHkeonp+jnL9HO98lOJkiXO0xNifCrc7GmT9
ZeCpwyGnv/Q/9aWHxSHnE/+wPfYX80N/P3vspJmZmcWp42ctjtpYHvdxNIe5
nAl3sQV/eriLC8LNDu5pi/R2QQa5gbtgwQN5GFg0uEciXEhDy6NY8eLIJJk0
RSG9GC+/oIq/mBKbnqJQx4kgzpVRkmX4ZDEljktJjOQlCDlJMnoUj3z2tK3t
qTOe7lbenpYMnLecRwZohbaXY6mpCk5abAQ0AljKOAfUtQI6bEpRcM4BLywT
aBRRqXGiczJhpkRScTFdezn3Wkb21YwrRVlFxdmluuyrlfnFNYUlNde0FQWA
ebV1JYaqAq3hWnm9tqE8v7IoszjnfFaaIMH/jM/Xh74+a3na2c6RggwQUEKV
0dDJUayEdZBW4MVLqfFSYpKYBpCbKI1SQpkFVkIMM0nET5bwgLRQSQUJ0fT4
GFqsGNhhekoMFTrhhWj30T9nKwCcvnu8/8cTKG30Z8HV29v7H54dFHj8n4Ty
/reXPz9b/fn+7A93pp7dmri/M/p4c/jp5vjdpaH7yyM3F3quzzfuzNTtLRgH
a/NGWvQb0w1r4w0zfbWDrYbJwYaJ/orpwaqR9tLuxpLWmuKmsvzmsmyjNs1Q
fKEo/2LOOc3lhLhUuULOF8ZHgaefIJ7LylTGt9debarMhr6zNNNYlt1Qnl2j
y6zRZtVCm8y59fqrtbrcam12dWm2sSKnXp9n1JU06PW1Ffrh/paMC5p7exvg
QfQRPKb+ePTx51u/PFl+sDmxMtq3NNq/MjWyMj24Du1ijS3PTWwuzFxfmtkA
a2Vha2lhZ2X5xtrKnfXFvc3Vnc31nY3l9cW55ZmZOxu7P734/ztC+lM8v/7p
56nhkcHu9p6Otpbm1pam1t5uQLdDMyOjEyMTI8MTo/2jpl6A3+7Ozt7W1s72
plaAXmigA9Qrq6a6srK6GhoFXqErLy8uKy8pB1Kt8mpOsiRCwWfFMCkxFHwU
DhuJQkUSUREkeCQ6NAIJhza1UKEsRAA7PJgTBmcHI1kwJB2OZoWhmbBwakgw
PciPEuBJ8g8m+QZjPbxQHg5oLyu4uznc2SLY2TbQ0T7Y0T7Q0SbIySnExdvX
ztHP1g5wcZCdVYizo7+jrbe9RZCTpRDrGRlozvb8nOZ5CO1xFO9iTnc4TXCw
wNidhFt/FWT7VdCZrwItPvWx+NzT/Av3Y391OQblj2zNj5mZn7S0PHn2lJmt
ubm7tZWvi62vs2OokxPKxQXl6oRyO4v2PIsNdKSE+zORYRx0OA8bxiHCOVSC
JJKdIBKoFJKkWHFaguxCUtzF1NiLqQnJCbEqsUAlYyYo6BwGCubnEeblEuTt
Fezj6+/p5WJnZ29lYWNtbm9zEgf3YWDDJVxiXAwhUU7SQBqbp5ZxkmUAs6xk
CS1ZztZIuWlQEebB3leCME0RfVkmqszKLM/P12Xn6TMLtVnFxVlXy3LzAWwN
eaXVBVp9TqEuJ89wtbAiO68yX19TVK3L05dmFV87f+l8lMj/jMcnf/nqjPkp
e1sbTJhfNB0Xx6cnxbAUYmasnJ0g5QB6VckoqXKWUsyXQ6ORgHgGLpifJOYl
S+ipB+nmZBFTFc1OiuIBFk4WM/Y/Pj3wvI+g9RHQ7iNot+oP8H5QMPn61v5v
Dw+Ohv8TWnn75PXjmVf3pl/szT+6MfN4Y/TJ+sSdlfHbi+O7c6PbC23bc/XX
5xpbyvLGOgybkw3LwzXj3RWthuKuuqpugFltXnlBZlHGuUtq+fkkiUrGU0ZT
5JF0oYAdw4kQ0lgJwugkibQk63xt8YX6kvQmXUZrZVa9Pt1YeqVBd6CWyyDZ
XFeWV1uaC/6xasuKq7Q51fpMgz6nVp9bp8tqLCuo0xfVV5QNdDZlXkx5dP/6
/v73HwH//v744/c3Xt+bubc2MjfaPzXatzg1sDrdvzo5uDIzvAC88PzUOnDB
i7Nbi3Oby2DN7qws7q7Mb68sbS6vXv9/6XrPqDavtG371/POJHbc6KpISKKr
dwmEhBAg1EUvQlQBovfee+9dgKhC9GqKwdhgg3t37DiJ052eTGZSJpnY363M
++tdz8faaMmyjBHo3Odx3nvv67pz8/bJ8a3Do6c3b3/64pPff/v/Zej/7n9+
/ujBxQVT7dl54+zsrNEwObU8v7CzuXV5a393c39rc2dvdWdvaXt7aWltYW55
dmHRYDT+VZ1jQq8fHRkeHuobGhwYHOwdGOoZGOjT9fV019aMNteXJaszY8K1
YSGJwQpNsCxa6RcT4Bej8IuT+caKvWMl3mqRV6TIN9JHEOYlCPcSRfuIYnzE
sYCWfb1Vvl5hXtwgHsffU+DP9VUwWAomVcAk8GnOgA/ySHg2mcihkth4LJ9I
8aGwfalMHxLdi0j1IhMEFLIHHutOxrqRHWVsbBDTxQcH4+IRfJKTkGofQEX4
kyASPFhkuoQF5Tlbchwt2A7mFMQpkt3f8bB38BAzMgrphHR0QmOcUBg82oHp
avpqfAbeh4wT0fASBl7OIojZrko+McKPGebLUov54RKv8EC/6Iig1LioTMCw
MjTF2VmFGVmlOZkl+YD/5hZnpeYmmUpHaiLlUjGX4wYkeqIbBYgATAHDg0Nn
00hYrAsKg0bgsQ48Oj5KLtCoJDnJIQXpYaalpcwo09F+U7GdsPL0qPL0mOJ0
NcDVxYALAyydEV+fpR1va9B3dw639I409fY3d3Y3tA02tw+09vbV94y0dPQ1
N/U2Nw23tww2tehaByZ6dPrO/qH6rp6yxvr4HJmrL/QcAmvvisUTxD5esUFB
6bGAjaqzkmNyMqKyUiNyTeWtQnNTg7NSQrJM/U/VhcnReckx2cnh+UnBRaZ1
pbgCbXxuYkxBUlxRYlRBYsyb1x/9VVvjA1N5jT/fe/P7fw/5PjdV2ADE+/ML
U6sF076s/+WNCXz++fv3//rs+PuPrr96fu2TJ1df3tv+8P6l53f2H9/Yu3+0
+fDq4uPjubvXDAuDrdfWp44vjl0y9G5Ody1PmtoYzesaFocbJnvrR7oaejsq
+rorB1vyJ7qLx7ordF1Vut6awa6y/vbS/rbSgdbivtaS3pYqfZdpk9XkYN3s
UOvCUKdxoGF+uG5mEDDiZkDIEwAzDzRPmkpt1I0Pd89P67aWdWvzQyvz47tr
i+uGsebq0i8/fxfQ75+/v3r9y8f//ubR1x9cfffOztH21tHW1vXLF0+ubt88
3Dk+3Dk52r8LjOt7965duXPtys0bh7dPLj+4efXuyeHdG0cPb508PDk5OTw6
vnr53vHJ03uPvv74h/+bgl//d7H3v877f833++++31lZX5ubXTXO/dWqe8ag
H182zq8sr25vbGxtrG6urmyvrm0sLq0vzi0bDXMzs4bpqelJ/YR+ZHR0ZEI/
ZJgcntGPTIwNj+q6e3qai3NzshPjO6sLiwAAi1alhkfHhwRpQhVxQbIYpTRG
4hMj5cfIvWLE3Gihe6QvJ9KXq/LzjfARRQt8E0RijVgSJfIzXZQWiSJ9JOF8
UQDPW8lmKVgsPoPtSaUC8uSRKFwKnUskehPJAgqDT2V5UxleVLIHGW+yYwrL
nUhk4118KAQhxdmXiiPbI83PnDU7ZWFnDSJjrD0JEDEJ5ONqyXOxYWOsOE4Q
dwcbGuoCwe40DnYBC7HBIhCOcBQWhcai7Ij2GNMsQXL1orl4UlyENCch3VnB
YcjYVLE7NdSHGu5NjBYzVHKuOkQUHSpOiwvP1KrzMuJL0tPLM3PL8rMqitOq
CtNKclPStZFxYfJwuVTA9aAQCXQCztON6s11Y9EYJCKZjAcQGuPqgHZyRFGw
9jIvRricmxYjKUwJLMwKzskIKMgKM1WtTIssSVeb9nFlmJaZytMSytJiS1Nj
mjPTZ7o6h7s6+pqAzNsz1NLVWdPcX9883NQ7UNs30tY92NI+3jag7xjqbent
a+8Z7uzRt3cP1rd1lLfWaYqlWF+QGcIe7YhzdlT6MKIDvVPV/vmJUfnJsf+t
eVuQElVoutoclKENzktWFWojTdicEpWZHJ6ZEJqXHAa86oyk2NyUv2A7PjRL
E266WvX6Q9MqEnDnPx+ZaPn3d9/867FJvP/64K9SsZ/8tUH6f9fv65+/+fWT
u9+9f/zts73PH+68f+/iew82H99cf3xj68HJ6v3rq/eurdw/ml/UtR7vLD48
XL5/Ze7WpZnr2xMH60NbC10bs10AAI/1Ng50V3W3lfTUFPRVF3VXFjZUZBYW
J5UWpVWVZNcUZ9YU51SXFjRWFw101Ez2NRkH2ueGe+ZMpxXqZoabp00FN1pm
hlv1AzWjprIbtRM9DUCaXpzsXTUOLc70z04PrixOzU0MtNdV/PAN8Eq/ff3L
529+ev7b13dffXDtya29azsbRzurR/vrhwdbJ1f2bh4e3Lh69c6Vy/ev7tw9
3Lt97fKNawcnRwc3r127dXL95rWDO8dX7ly/dnz1yuHlvb+OGV57ePvZZx/+
9Mf/tpT03bc/Xtq4tGQEkHhubhKw1Ilx/fD02Bgg5OWF5c2Vpc21xa2VlY2l
pdXF+eUFw6JxZs4wOT01Oq4fm5gYnZka62xvqyitLMouL80rbakozoiOTAoL
zwUmZwC0NOE58VFpUTGa8LDEYGWCUhIbIIn2B1CTHynxjJJ4Rflx1b58lcgr
3FcYIfBRCfmRMj+VVAyMUJGvSgJYs3co38+fz1O60xUMdzGT5UnBe1GJ3hSK
F4noQ8JLKBQehepGZ/LpbjwKnU8nCUhYLyKFD7gwyfmva9EYLtnZi070ImJR
FpZv/8+pt95628rsPAkN9nCx8HC2cLcHuzna0tFQpp0l1daMALZwtrGEXrBB
gjF4e1cCGknCIN2ILjwyjkcm8cguQqaDHwsvY1D9mXQpl+3vQ1X5kdUShkrB
Vfv7RgWL0mKAN3NsdqomPz2lNCunIje/vDinsiS9NCcpJ1UTGxHkL5NSiDQu
hy30dvPzYXu4M2gUMhmYZIjOOCcXvJOTsyPKwR7JYWIj5O7xIUAODalIB/g5
LDfNVG8WEFEeQLNpptai5abNWuqCTHVJiqq7MHeyr3e4G3BeQMLtQ/Wt/bUt
Ay1dIy0DYy1DI629w81d+tbBoea+fkC2HW0DjW1DdV09NS0dNQ3VcRlSitDK
DOZg50C0x4k93eJCpGmRwfnxAEKH52kjClKiAYbPByxYG15kalVsmkby0iOz
k1WmdoqmZeKInMSI3MSA/GRlrjYsVxOSmxhiYmYg6v75oeki1W9A4H365pdH
b3559uZf77354cWb7z9+89Onr3//4b9q/X8+/vz93z9//uLH9x988/zG5492
P3u0+8GDS8/vbT85WXt2svHw+tKjk8UHN+buXtEvDDfeurJx52jt9sH88c70
pYXR1cmByaFmINsPddQOtJf3tha11mY3lOc2FRS0FuY0lqZXFGmryjKqCtPr
ijMaS3MaSnOba/LbGwt6Gsu6G6r6mmt0bdX9jeV9zVUD7ZUD7RW67prR3kp9
f9VIT91oT934YONYX8NYX6N+qGm4r2lC1zM+1NndUv2PrwDMePUamJq+f/CP
j69/+uTq0+P9q5urV7ZWrl7aPLq8dX1v8+Rg58bh3q3DvZuAnC9fvH20d/vw
4PjK5euHV44PD29cPbp+eHh0+fLhzt7VzYMr2weHe/vXD49vHT949viTL1/9
66ef/vj1tz9//e31d9/9+ujxC0Cdi9Om0rHz0wbD+JSpc+iIbmJ8xDgztTRn
XFpZWF5eXptfWTCuGGeX5o1zRsCgp8enJkbmZuaGBwejIsIoeKY9goG39wgU
KjURwYnBgelhIYUmuFJnx0cADJaiDk+KCNMESBPk4jhAvDKvOD+vWJHQdNlK
6BXlI1b7AoFXFs73Uft5h4nFoVKpSiKLlgTGiMQxAEVzeYHu7oEctoTl7kOn
AdnWh0bxAkyWTBTRSUIq1ZNO4zCBW4Y3hS6hUSVUvDcgXiJeRCQI8Fg3AtKd
bOdBcAIe8aYS7EA2p98+c+r0mbNnzmJgVh6uEL4z1M0RTkFBqChrItwKD7HA
WlnDz1pjoGgsGoOzt8Xawdk4LIfq5E7GCMmupvqWdFc/Gk7OIsrcKYFe7GCh
W5jYPVLqEaX0jAnxTY8NydXG5icnlGQmF2cnleVmlBbkV5RmluVrMhPVqqBA
mdCXw2H5ClgCAZ3LZbMZTBKJSCET8FhXFycnR4ydPdoWjYIzSc7Bfm7R/r7a
iKAiU12psKKUMNOSUyagZSD5xlSkqSuzVPnp/rlZoYUpUYMNVXN63UTf8Gh7
12Bb2zBAzo1t/e29Q22Dg80Durae4db2gZaewY7BwZbOwcbG/ubW/rrO9qrW
lrLaqpj0QIb4nbOWICjc1R7HZ/MiA0KSIwOzNT4FSRJTLY4kIOTG5Jq2Z0QB
oTg3JSo7A0jBodnJYXkpYfmA56bEmXoppoQXJgXmawNyTLXc4/5aGAKY+dM3
/3r55rcPXv/27utfnrz5JzDee/PTB2++evHm2/f+/OH5HyYV/wOwWxNL//nH
mz9+ff3P73999f6P79/6+t3rr56dfPruwctH2y/v7L1/Z/e9G2svjpcfHy8+
vr747uH0vd3B+aHGu1c27h4s3b08d7I9e7RhPNqYP9w2HmxN7azodhf7do2d
C/rG6cHm8e6WwfbyvpbinrrC7pqCrprs1vL09sr85vLMuqrUmrL0urLMuoqs
hrLsjoritoqilsqC5ors5urM7obioaaqgZbKobbKoeby0faGwc6mge7q4b66
4e4mo65ntLuhv7Xml68Buvjgz3+++8vXd7/++Ob7T48eXN/d31i6tLF6dWfr
2u7G0e7KtcsXjw+2Ty7vXNvbvnZ5+8bB9s39nZPLl67t7x4f7F3fP7i+d/Xo
0t7uxsXd9a3d9bXdjfWDi7tHW5eO967euPbg5sm7t2+9f+3oye7OyerKztLi
ysoc4LzjRv3U9OjMxMiUfhjItHrD1NTirGF+wTA/ZzTOzBtnVuYMS0sLpgFY
89iorqSgxJvv7eTgiMcQqS5shVAYG6yMVQZpQ8PSoiPyTfvoorKjw9Ii/JOD
FQkhIQmhQYCEY5TiOKlMIxLHivyiRD7RUu9osVDtKwzz8Q3i+4bzgRTsEykW
R/mJ40SiWJE0SigK4bsH8jwkHHdPJsObwfBj0v3oNB863ZNCFTJZfjTTI94s
ihvZ2ZPqLKSShQSiL9GJj3fiuxI8XHEcEopDseXiHdxxeE8Sno9zRFpD/va3
d06feuf8eTM4yNoVCcWjYAQ0iI62JsAsnEHmWBsr8NkztlCwC9rOBWPngELS
iAR3Kp5HdfIlEUQ0uoiKk1KxYgZBwaUq+Cx/ASvKlx3l5xEp94wKBohXng1M
XymJZempxdmppfmAcvOrCgoqc5PTYiMCpQEKhVwo9PDk0JgMKpXKwGMBy7Un
uhKcMQQMCuOAQWDs4E4oJNnFXuhGUis9NaGClFhRblqY6cBCekx+emxJZkJp
enRJWkRxqspUQTpLXZqZMlRXvzVlWBidHu3qHe5oHWht6QYCb0dbX2v/YMvQ
cGdfX3N7b0PPcPvIYFN/b237UFtXW2VDa0VLS2F1lSYzwE309rkLFhCQAwrL
p3uFKgJiVZIMjbAICOAJqr/OKcfnJAenaQPTk2LyUzTZKdE5f/VPyQOMOCW6
KDm2WBubm6DK1AQUagMLkyNykiNNbRQASP79v8fzn73+5503Pz9888OT118/
evP90z+/NVWY/M/Xj37/5tHrH56//unF639+8vq7D/7zzbNfP3vy43s3fnh2
+dtnB589vfLy0aUP7118eWfj/bsX37u+/vL6ytPryw+O1h5fXb91aXamv/ne
/tr9PeP9/Zkbu8aTrfmjrdkrm5P7a+Pby6N7C6P7cwPb011b4/3rE4NGffus
rmVuqM3Y1zzdV6XvLh9rqxlpLe9tBlJwWVdjcUdDYVdjyUB9RU9dWUdDcWdj
fndTTl9D4VBzXU9TVV9T6VBrha61dqSzcaSzdryrQd/VMDfSOtBeM9bV/u+v
n7/+4b1/f/fsp8/ufPXBybOHl29eXdpdn9vdWLmyvXZ1Z810EPjyxcO9TZOW
tzePLm1e39s43Lu4v7t5uLd7tL97uLtzdfvS/s7OJhBd19Z311YuLq/uLG/u
ra7ubGxubWzvX7x0sLm3u7qxu35xc2VzZXFuwThmnByZGhudHJmcMo3xGf30
7MTU/OQMEHXnjfOLC6sLxtWx4cmG+taMjLzIyHiRWEYhMSgEN6IrG+8EUKt7
oA8vSsKLlwm1YcrkmMCshLB8jTorJjwzMig9LDAhJCDW1Bc4JM7fPz5QGSuV
R/lJY/z8Yv340RJBtNg3SiiIEPoF8QThnn4R3n4qXy+1r6fa2yvUk+/PZSs9
uX4eHt4sqh+b6sPC+7CJgAX70igSBltMowvpJB8WmU/HedJwPBKVT6YJKThP
ohMH58Ql4AB49iQ6CIlYAQHPJ+CEJBwZg3rn1Jm/v3XuzCmLM6fMzp6zOHfe
HAy2coSZ4yDmWLi5I/i8xdkzUAjMEWPvgkY5Y5A4nAubQvKmkQGE9mSyvalU
XzLem0GUejIVAgYQgdV+DLXUWy33i1H4pET6ZyfH5iQnFKallGamVuZmVhcU
VBcVl+dlJISrZEKlr8jHi8tiMSh4EgGHxxNxOCKRgMcRHNCuaATaHgVHwCBw
ENgZY8dl0f2lnKgwbqxKnJ4amZ9ualmYb1JuXHFqTLGp/F1UQWpccWZiZUay
saXj2uLy5vTCdN/kWFufrrW7B5Bwe1tf+0BPbftgY8dwS1dfdetAQ1dXXXNP
Q3N/Q3tndWNrRWN7WUONNi+QJTY3B1mB4RgEgUthhMl40aGCDI2iKCkyPyGi
OCW0KFmdoQ1NT/HPBbJwssbUUTQxIt90niI8A9B4YkRZQnRhgio3QVGULCxK
lWcmhb355d5ftPzUVJX95xevf3wCjDffP3r97Y3/fH38x1d3/vPq/utXd/79
1d1fv3z4x6tHv7+6//NnxwB5fvvhydfPj794cunrp7tfPNz+9P7uy3sXX9xZ
fX5r5fnx0vPDhcdX1h4ebt46WtvdHDMMNd+5amob+mB/8s7+9PHOhKns5Ob4
5bWx/bWJ/ZXJvfmxSwbd7szA2kTPwmjXgq5zabhjfrB5pr9mprd6uqtusqce
oGJdZ+Vwe5Wuo1bXVqlrKR9tKx/pKB9sKR1uLdN1VA62V/WbRrWuq3mos36k
u1bfVTvVUTfRXTutb+5srdL3Dfz6zfP/fPf4l68effPR9U+e7z26u37zsnF/
1bi3vgy48NXtzUtbq/u7K/s7K5e3lw4vrR7trl3Z3bi0s7W9s3r50sYh8ITt
zd3t7e2LW+ur68BYW11ZXlpeW1jbXFhZWphfW16+uLS6ubC0MTe3Nru4Mmtc
NI5PAWFBP6Af6ZsY1QG5dmZ0fFo3Oj2mMxrGF+dnATOuLq+KjUr2FUVQ3YVk
Jg9L4ZJobAaNQ8XxnDB0JyeyB5vvwxEECQXxAQDsyVLVkjyNPDcuJCMaYDD/
xGC5NkweHyDX+IdHS0OjpYHxyuBoiSJWpIwTS9QST7VIGCeRRAklKi9JuEAc
JvAO9eWHevFjfPiRPE4Qhx3gyZHz2BIO7a/yyxQBiyBkMUUsupzNkLPdRWx3
IZvpxyT50kieZDKXgvekYDl4Rx7JkW/KvzgBzkmEc/XFO3vhUZ5EV4aLq/kF
i//525kzb104/fY7Z86cefvUacCLLS6YgywsERBrFOgM6MLbSDgMjQQQ2s4V
haK4Yr1pNB8aw4NE4JHxfCrNi0LyZREkHGqgJz1cyFCJOFFygUopVPvLklTK
3OTYvBRtUXpqSZa2NDupJC+9vDi/pDAnNCTMW+DjxWH4sFlUIhFLwFLIWBbR
lYrF04k4Fwd7ZxTaEQHD2ELgEJgdDMEikOQCVmSgd3yYTBuvzElT5Zl2XcaW
pKlLTZsnTZV2SrM1RemaijTtav/g/a2d/YXNmSHDaEv/FGC79R1d9a1dDa3t
dU2Drd1DzR1DtS26JiAdt/WZtmk199Y2dlU2dJbX1iZlhTL9zCwQVhAkyhbJ
JNhHSDxigiTJ8QpTttXG5GvDixMjC5MTMpPCC1IiTOf0E0ILtaFZyYrUZGWG
qcxORGFKdGlyZHFiSJ5Wnp8SkJsQ/ubnR6ao+8/3XgNG/K93//j+6e/fm84m
/PntjT+/vPHHF7f+88W9Pz59/POn93/8+Nb3H5/88PLwu5f7X7+//+nz/c9f
HH36cO/Vg92vH+5+cW/3o3tbz25tPDxZe3S8+PT6wqMrqw+PVh4ez19eGljQ
td+9vnHz8szt/Yk7e1M3Lk1e3Rq5fnH08trI7vLIpdWJS4v6S4bhzdme5cnO
RVNhyY65kW7jYOvsUP10X+1Uf71+sGasv3asp0bXWTHWWT3aVqFrrxjvKJ9s
LdG3lQ+1AbKt7G0tHO4oG+6sH2xvG+tuHe2u0XVV6nvq9V3Nc6MdXW3lel3f
P7969q+vHn736d3P3z9878nFRzcWT7amd5dn9lcXD9aWDzY39i+u7W9vXLm4
fmVr6WB36WB7bX9nY2d7befiyt7F1f2Nzc317YsbOzumhmarwFhZW11YWVla
XFw1zi/NLqzMLa0aF1cNc0uGyVnDhHFqbGFqxDg5NDM2NDM6YtCPT4+MTg0O
GMYGDVPD3b3t6RnZcpnKk6Og0f3wdKEznedAYTjiOWQqD0egumCZ9g5EFyei
J0Mg5IiUXr7RUlFiqDRZJc+OludEB6SG+SdGKOJC5RpAwgEBcYpAtTIwWh4S
K1dGywA29o8WKaJl/CiJV5xcEi2TR4nkYb6+4d6AFwPDR+0tUHt6hnI9lDyP
QI67wp0ud6MFsJkSJlPM4njTWRIWy5/BEdN5Qpa7mE3zpZN4FLIXg8CluroT
XfgErA+J6EXGexKcPPFYLsFVQMAICA4sZ2eL86D/+dv5t/527u2/n3n77VNv
nzn99mng8+zpdy6cPW9ufuEc1NoK8F+kLQKDQDpj7InOLh4kvDsRz6cQfAhY
bwrRh4Hn07F+bqQAd0q4D00ldYtWcKP9PaODvZMiJemJ4XkpSUXpWUW5WWV5
KaWmI4QFFcUFASFKdy7dg4Fj4wkUFxwB64LHOlKJOIKTC97eHsjaOAzU1Q6C
tUfZI+zsYbZuOKyMS49UeseECpOj5YWp0YWZCXmpsUVpsQXpUblpIcWZYWWm
haTEisyUtdGhRweHV1avTg8bh1v69c29I/Wd/fUdvU1tXY2tutb+kZa+/saB
kdZBXcPAUE23rqGjp7q+u6q+vby6VpupZvtZW8HPgW3sUDA6DhHk46YJ849X
y9KSwrNSYrKSAG+NKdLGm7ZaJfqbKm8kq7K0qpTUgKzk4ILUWAA5spOiipLC
CpMisrTROUkxBQmRpuvM//jwzT+B8cF/vn/47+8f/QpI+LtHr7+88Z9Xxz9/
du33z+789umTf3z8+KeP7n7/wcl3L46+fv/gqw+ufvLs4JN3D149PPjy3tXP
7195ee/gwzsHz08uPrmx/hgIv9cXH1xbfHBkeHx9Zm9hYF0/8vhw684+oF/D
jZ2pG1v6463R482R6+u6g5WBveWhg6XRXWP3pqFzfbpnaaJ7Xt+5MNy2ONRp
GG6YGKyaGKod660Z76yf6GnWddcBqhzurNa11+o7aiY6ATuuGmoHYm9Ff2vJ
UHvxaEftaHervqdptKdmdKBqtLd2uKNxdqSzq7l4YrTtxy8fff3Z3a8+ufXq
veMP7u88OJo/2JjaWJnaXJ7eXlvY2Vy+tLmyt7EK2PGeKRQvXlpf2t2Y2143
bm8sba2ubP3luZvLq3vLKxeXFjaWF1YWAd9dXFpYBDB5ybi0Mru8ND07PzG9
aJien52aN0zNTY0vTE4ujI3PDk8A5DyuG5odG+lqa0nSaCWiIL53gMA7xN1N
waSLyDQ/J4q3A4HpiKc5E9wccSwHFwoGhcc6kDzpnlKu6dlRCr/YMGlcsDgt
MjgzMiRNpdBGKBLCpfFB0iSAnJUBaqU8yt/UESk2KEgt84/0840R8zQinziJ
KFoujpRJI2WKKLFfhI9vhEgaJOBHePMjvT2CeewQDjPYkyLnEhRsooJJlbI4
vnSOiMWUu7vJ2R6+TDaQhQVUuieV5Umjc8kEHiAxPMEHwGlgUIneNDyfTOQT
cV4kR6arA8gc/Lf/c+Fv/+f83/925vSps6dPv/PWW28D49TpU8DnO6cvnHnH
/Pw5a0sLa4iNFcIW6uiMphKxTAKWC5gviSygOPky8D5UkoRFDuC6BfGZgWJi
hJgZL/ROVCoTI0NSEsJz0zR5WRlFWZmlOemV+Tl1Rbl1ZTlKpYhBp3u5s3hM
KouIc2cxOF4cApno4oy3Rzs4o5F4e6QLCupsB8Eg4CgwlOLk4ufJigriRwV4
pUQEFqdqCtLji9ISylNNJyBy01QFGeoiwIszY2tzE/YNfS9vX7t3+cbS5Iq+
Tz/aMzrSMTTcOjjQ0tHX0DZS1zFW3znUYFoaHm8Y1NV0D1a3d5U3dZXXtFZU
ViRmxrqJweZWF2ws7dBwnDNY4sNUBQuTIoG0G50KRF1tzF8nFOKyTcAcYepf
po3KSo1KS1GbnDc5JidJk5UYW5AcCfh1hjYsLSEsMyEMQOU33z9/88PT1989
ffPtoz++e/LLV0///dW9317d/Nfnt3/99M6vn9z56ePb//jo3s8v7/7TdFT/
6JvnV169OP74+dFnzwH/vfrZvasf391/fnvn2c3dd4/Xnx4tPj1afnq89OD6
PKCOh0eGNUP76sTw04PVB/vTt/Zmru1M3dyeubk1eXVz+Mra4NGq7vLSyKUl
3cX53t153bahb3Wqa3my3XRUQd8yq6ufGK4eG2yY6m81dDePdzbrugALLhvt
rgbweKijaqCtYrC9ZritarSteqi9or+9eLijdKCzerC7VtdTpQcsu6t+rLvR
MNLc3VAyN6n77tN7X39w/av3jz95dPT8+va9/YXdpclV4+zmwtz28tz2GpCF
V3dXF7dXjRcBOa+uXFpe2lqZ2Vw1rK8urC8vbywtrS0Z1peMACFvmgrdzK8s
zAJj3QjY7tLcrHEJAOaZ6cWp6WWDYdVgmP9vx1D97Mzo9OzYpHECoGZdYW6x
2FfpyRF68iRcT6mbOyALAZkixJK97Ake9i5MjAsZi+M4OrIxDmS0HR5jR3Bj
cEU8vwBfcZBYFBkgjg2TxUYEJ0eFpaoVyWHyxEBpglKcGCSJ8xdHy/xjA4Pj
AgOjFUqVRKqWiWLEoihfX5XYR6WURshFark0FhCyVBQhlatMl7b4Md68CAEn
hO8W6sVWetBFLJLMjSp1Z4rZblIPd6EH28eNDdz3ptE96IB43bhkGhtP4hFI
AgLBi4wT0CkCOtObRvKiEgQMvDvJmYbHQq1t/8//nPv7W+/8/S3Af8+/fdr8
rbfOnD59+sw775js+O/nz542O3Pm3Nmz58wuXDC3MgPZQp1cCBQClYkjc3F0
XxLBh+IqYRBkbhR/nlsgjx4kpEWIWMBriVOExodEZMRH56XG5WdqijOTy3MT
K/NT64py6ouzYsKC2FSGhMcTcd09aFQWk8ViswlEIolAQaMc0RgXZwdXFxQa
a4d0QMJsQSBnO4yQR1cFeEUGi5PVgUUpsQUp8SXpyaVpGkCzhVnqgvSIgvTg
kkxVS572ZEn/8u61Zzdvbcxvjg2PjnQPjLQNjzYPjrf09tV2DNR1DNS09ld3
DtcDEu7vrmjsq2zoKatrLy7rKCmvTcxK5CpgVrBz1lYwU/NytLeAExHgmxjm
l60JSYsPy0+MyU+IL9JqcxLjMrVRaYmq/PS/6k8mxgBQnZcYlRUfkpYUka0J
y0v0z0lWZCSGAEp/88ODNz88evPd/dc/PH7zw/M/v3n62xf3fvn81s9fPvjp
8wfff3T7x49v/vTy5JcPb/3rkzs/fnT7p49Ofnj/6PP3Tj55cfLJ04MvHh1+
dn//5Z2dD+7sAPD85GT12fHqu9fWHl9ff3i0dP+qSb9LY3U7hqHHV1buXJq7
tTN7sj11a3fmZG386vLIwero1bXxywtTO8bx7fn+nbmhHcPg+kT3xlTP0nj7
wmjr/HDjrK55crDFMNBoNDXjrp/oqp7qrtJ3lk/0AnG4bgRg6a5KXUfFWEfV
eCfgtlW6nsrhrsqJgYbR7rqx3iZ9b9toT8f0SHt7TeH8pO7rj2988fzg1ZOr
H9+5+uzapduXlrcWxldmptbmp3eWp3cXZ7cW5rdNTUJntpYN2yvzG0tzm0tL
6wuAVBfWF5ZW5xcvLi5szhnXDLPrcwsLC8uAZpfn5pbnlpaMiwtzc0vGOVPL
UKNhzjhtNC3jmvqUGQxzk9NzPV2dxcWlKpWWx1OwOX4sdwGNLnCleDpSWRiK
mwNZgMHx7HButq40e1eikxMDjWEh7FlIFNXegUwmccXcQH9BQKCPPFyqiA5W
xIUHJYaHJYQqk8LC4oMCY+U+sUrfWH9RtCIgWqGKDQiO8fePVMrD/f0ilVK1
WBIhF6oU4jCxMFIuVsuEaoU4JiA4UiKPN22Zlkb4SYK9hSGefv5cLyD5Cpnu
Yg5XwuEo3d2UHhyRu5sfAM9MBp/G9KHQBFQyj0LzAvRLIfIoJE8ag0+neTII
ngyitxuVxyAxCDiINfjvb50+dfrc3982+9tb598y6dccsN2zZ8+anb9w/h2z
d05bnDpjfvqcxTlzi7NmF8ytwWBbe6SdkzPKGWvvwnAluuPxXBLOh0UVe7KU
XswQMS/E1ytSLImVApgRlKVJyk3RFmYAETilJCetpCilrDitoTgzLTZS4MYU
uNPcOTQqnUAl4wl4PAFHIDg4u6BQLoAFO7k4O6NdHZDODvbWlhAk1FbAJoUr
eEGBHE2sJDclKjdVk5tmKvlekhFVnBVRZNoOHV2YEdtSlPpoe+n9m4fPbh1v
L20YxibHu/rG2gBm7hpv6eyra++obu5paumoaOwoae6p7mgvbQKSL0DOjSVl
LeWljZnZWr7SHmz3juU5c1sEyBkr4LFiFN6pYZL8uFAg6mYlheZqoguTNAVJ
0dkJwVmABSeHFGiDc5OiMrUxOQmqnPiAPG1gsTa4MFGer/XPTAxJTVK9+erx
6++e/Pn14z++efLvL5/88emjPz659/NHJ//68OTH90+++uD46/cPv3n38rfP
jr54dvjV06Pvnx59++L403evv3x45eWdi5/cXPvwxsp7N9efHm8+Obr45Gjt
4eHyvaPle4dL9w7n7x/O3bs6u6Tr3J+bunNl+cbewp3dmXs7E7d2Ro63dEfr
Y/sruqO1scOlob35np259i1Dx+bMwPp035qJorsW9G0r460rI+0LI+2L+laD
znQe0DjUNDXQOD3QMNPfPD3QMtlfY+ivBG7HTdueG/V9NeN9NZN9dRM9DeM9
9aO9DeO9rfreTv1wb2tt2crs0Dcm/V799P7ei+Pth1fWr21Pby6MLhhGV4zD
6wsjm/OT24szF5emtxcNFxen1hYmVxdNOt2YWwBuV+fml+dnN+bnN43z67Oz
SzOTxlnD7KxxYdY4B0h0dmZx3mg0zs4ajIZp48z05KJxbN4wMq4famlvTUrN
kcpCeQIl011KoQrIZAGR5OVK9HAg0DGmwUDj2WisB9rFDeFCsHXAoezxdk5E
pAPR1g6PRAHpjenBlsn40iA/ebDQX+0fHAeINywkPkieGByaFBIW7+8f6y9T
B/hFBklV/ooopQzw3wiZn0opCFeIopUylcJHrfCLEUtjlf5RAYoouShGLo+R
mC5zqaXe4X6eEX7CUL4o0EMg5wBqZUg47mKemx+HIuOxJBy2L5MuoJsWkoQ0
ghfFlUtx9qK68IE4TGN4UuieFKIXg+zLoso4VCmb5EUngS0tz7x9/p3TVm+f
Bp0+ZXnqrXOnTpmdPm0O6Pf8+fPmFywtzcHmljZmVlYgCAwMQoJBtnA4Ag6H
opBIMBQGsUViMI6mfRbODhQayZPNFPLYSiE3WukdLxelhwXmaGNzU4GgmlCY
nlqSnVeSX1BSmFVRlJaTGhskEni7sdzdqFQalkjEU8kknDMW5+JKcHbEYpyw
9sCXRLg6Il1cHC3BCDAMwWeTw2UeEYEemihRXrI6Kzk6MzW2OCOxOC26LCuq
LCOxLC29KDWxvTDz8cWFj24dvLx343Dj0vzI/ETP2GjrQE9F40BDS39ta3dV
c1dNfWdZbU9FQ3tFXVtVe2NlS3N1Y2N5ZUVpQWFaitZL7gKCm1ueA0PgCIyD
h5tTpD8jIdQ7MzogKyEwK8k/NyEyJyEqK0WVlRyekxqZmhCQrQ3NTdFkJcQX
AGlXE1qSqCpIiMpLiMwzma8iMynks0c3v3r59LMPHnz8/u1PXtz99N37nz6+
9cnjax8+uvbhg6MP7h++f+/ys7u7T+9deXznypNb+4+vbT+8vnv/+qWnt648
Ot5+cHX+3pWZGweGO1cX71zeuLm7fH1z7sraxNXVgd353p3Fge25gYWhlg19
1+WF0Utz/QfzXXuGrp2Zzq2Z1o3pjiV925yufm641qirnR2pmxlumBxonhps
GetvmhhsGu+vHuspn+iuGOkAgm0hcDvSWjTSUTzYUjzUWDLaWjPQAjBz1VBT
UW9TSVdTWWdjaVdjWX9DwWBT6UBzdX9DcV9TYU9jQX99eX9L3XBH3aXFwUfX
F55e23h+sv30ZOvu/uLh6sTGrG5uemBlZmBrbnzFoF8zjmzMj63PT68tAKas
35ib2jAa1o2za/OGpZmJRcPE0vTEimFuccoI6HduRr8wPb00YzDOTM3OTMxP
6Y3T+llTJ6P5xVnj2MBQSV55dLTWTxHiI1JwuUIW249I5uOJHjgCxxnr4eDq
4YJlOTvTcS5UJ1cqYDuOzkxbRxIYg0dgnG0dMBB7Zxu4K8yOhLan0OmeQh9f
hcQvRORnQt+AMCDhxipFiYH+iUpVUlBYTADgsAJ1kDgyQBJpqjzpH6uUREh8
wyUylVwW5S+JUngnKAHlBkYGKSP9hXFKaZwiMEquCJMJwuU+pn0dAt8wgbec
y5V6sKQeTDGHIfFgKbgcqRvbm0HzYVB8aUQfMoFDcGVTse50gjsAEHS6kEKQ
0JlKN24Aj63wYMj4HDaTCiRbi3NW5udtz74DB2R7+tQ5IPCeOWN9/pyVmZm1
uRXY2hpmbW1tATK3sgYDcgVDwDCoFQoJQcAQthB7BNQODofBbJEwBAJh2mrh
7GLnTHXGckgEEd9LIZJq1MG5qQDfJpXnppbkpRXlZlUVZJflZxZmp2nVEUqe
l8jDg0WmEbFErLM9EoPAODq6OtrbY1D2aCQajXHGODk5utiAYdaWViySY5CM
FSLnxAQL8zWR+cnxaalxOama/NTw0rSIstT4ktSEshRNe6724Ybx+dHeh3eP
r13cmh+ame4f17V2DlY399a1dNa29NR19Ne29VTUDTU0dVfXtFYCEm5tr2lo
La+sLirK02YkevsTbKytzr9ta23jYI9kMuxVgWxNGE8bqcxNjMxOiMhOVGUk
hWSaSl2pMrRRGYkReaZyWOGZCRF5SVGFSeG5yeHpmqjMxKh0jSxD45uV7G9a
+f39C1NXMmD8/PHrf378+08v/v3Diz9+fPnzd89++/693//x/Jdvnv786r3f
vnn6y5cP//nq6Y9fPPnu1bvff/rku08efP3J7S8/PPn8xfXP3r/22YvrL9/d
f//+9ssHO+/dXnhy0/jsxvy71xafHy29OFp4fLB8b9dwf3/69qXpO1sz9zen
j9fGDlZ1u2tDlxZ1e/MjfzUs69k2mBB6c6Z31dC9Odu1Mdm6OtG8NtG0oq9Z
Ga9d1rfMjTQsjjYs6RoXdI3G4b9O8Q83zeiapnWA/Osn+xtnTGWfmyf7mmf6
G4yDTTMD9YbhOsNg48ZM3wd31x9fn7+5MXltaWR3ydSlZdfYtz7Rt6jvX5nR
rRvGlw3jq7PjG4aJNcPU6szUxdmpNcPo8vTY+iyg2bFFw9j89OjS5OTi5Oz8
hGFhZtowZerbawAgGZD27NSqYXIReGhE39zQnp6arwrV+osAUA0VeksEXC8P
dy8ag0cksagktiuejsHSnbFswFjRzniUAx7pQIKjqTA0A2pPQKBdbdGuSHsi
HEGFwylIBAVmi3PBMTlcP4mvPFQkjRDJI8VBsfLAGEVArL+/JiAoNkARE+Ab
JfdWB4hVQMj194/wBzQuUyuVwHNUEiWg0xixj0YpVgPSBoTvr9AoFXEKRbRU
HilVAE8IE0oDvb2lAk9fNkfO8ZByOWKOm4LLlAPmy/bgM938WG6+dBKfRuTR
6Rwqw5PO5lPpPkyakEXxYzADuZ5BPLcwHifUz5fDZENs4OfOm5uZgc6eB50+
f9bMyvr8eRsLM5i5ma2lFTDgNtZIGxDYEgSGQE2GawOxAYNAcBAcDkbZwZ0B
3YKBP4PhMAgaAkLZgNAIBBoJQ8NhrhCYKwiCscc4kLFkDtNLKhLFxoZWFGXW
FgH6zclPz86NT9IEKv1YLD6dQ3TAY1BIOAaCREDsoDAHBBwN6NfJwcneAYVw
tTCHWpmdp+DRCm96pMwL+AHmxAUVpERnAxSdHJWfElSYGmDajpUeU5Ea35qb
fHdj9tHli+/fuXq8u7kyPjc7ODne0z3e0jHS2tvT3Nnb0NFf39VX09ZbV9tW
Wd5ZU91d1dBdWdNVVlJfUFSRnJsqCmQgUBfOnQHmJiABs+j4IBk/KthHGwXQ
MgDJ6vQEYESadkumqNMSwwEjztOG5CUEpycGZSQH5iVHpWnC0hPDs5OiUhJD
k7WhKdrQf3x64+dXt3794u53H5y8enr46snhZ4/3Prq/9dGdnRc3d1/c2Hh+
Y/nljc33DjeeH60+O5x9ds34+Hjx3rWF+wAhAwn32tytg4kbezPXLi8cHixf
25+9fWny7v7UyZWZ67v6u5fG718y3NkxHF8cv7I5cXV9bG9pdHd58DIgnDnd
mnF4dbpzdRoQ6cD6ROcsQMgj7TNDpsWjpdH2ycH6qeEGg659ur/BMFQ/OQgQ
cu1EX9NkX9NEX7W+v2y4t3yos3ykq2LMtEhUN9RR099Z1d9VNthROtJeNdzR
ONhaNtpWqu+o0ndUD7RUzei6nt/Z/vDBzkf3tt47XLi1M75uaF/QNy7pO5b1
w0ujo2tTEytTE6sTU5uTk+uT46tT4xtTgKJH52fG5yYn5if1S5N648TA7MSo
cWLCOKafNfVFGDXZ7szM1IR+YKivsa4hNyM3JlIboIhWKiMk4hCZX6REEODL
9eZxPFlsLoXlQaK6Ewk8J4KHPY7h6sJwciahXPC2zlSoIxnhSLVDU+FoAhyB
s4W7opB4DJwJg9NgaJo1BGeHcHFjefnx5AqBJNgPSKzycD+5ShIcJQ+KU4ao
/UPVCmmszC/G3y9cKgiX+KmV0nCpSC0Vx8qB7yYIwOkYufS//c5iFcpEZVCC
f5DGPyBKEhQpClWLlAECbwmfJ+S6y7iecg4vwMPT340nd2eJOO5CNs/HxM9U
AZPOY1O5LBKPTBHTmFIK2Y9C8mVSfOgUOdcthO8W7kFX+XIFDIq1JfyCOfyc
GeicBdQMGOYgaxuIJQhmaQMDQ2AgkJ21DdoKDLa2srYFI0AQNAjiAAU72lgD
BI22hWNANrYgGzgcgkJAnMAgtJk13AYKKBwKgeBgMGcIDAYCxA+G2UDRFhA7
pJ2zryc3P1NTW1ZYmJ6REROTE6cKlwgYOGeCI9YBcFwUYOowCMQGBrqAgFuB
bc1gthYwGNrMHA6ytKTgkQo/mlrppQkRpcQpctIjCtLUBSmqUm1EqVZVnBZR
mhVdmpbYXJR3ND/5YHP5izvHDy9vr08bjTrjWOfwWFvPSFt3f2Orqc9CXVtf
TUtPTU1LTWVLZWVraU17WW1rSUFjSWF9Tn62TMlGI8+anbFH2NnC0AQaQSHn
q0OFsWpJMhB4E6NykuIzkuKzk2ILkoH7ERmJoTnxgaYNG1pTX+9MTXBOgjon
ISxHG5CqkaRpgrM0qtvXV+cm+npa6tsb6lqrGhuLayrzi2qB/64st74sua44
obE4q7Eot6G0qKGsrKO+qKOhEMD63qb64fbG4d4GXV/NQG/ZWH/1SF/DwGDH
UG+nob9terh1dLB6ZrB60nS+D/hjta6rvKuhpKM+u7Eyr7Y0t6IgrTA3OTcr
sTgjrjBFXZisykkGvsO4vJSUnKSEQi1A+0lpmviUxCRtQmKWRpOTEJseH5Gq
iU6Ki9HExMXHATMsMEHFamPi4qLjUuLis+Ljk2JjkuLjUhJNc1SyJjIpMd70
FaLUGbGxmbEJqTFxOcmpbdWVM8Mt24a+26sT97cNN3cNO/M6U8uGgd75wcGF
Yd3KmG5FP7o6ObU8Ob40PrI4OjI3MTozPW6YnDDqxxYnx+bHdbNjujn9yKx+
dGFmfGJkqLOlszinKkadFhQUJ5WoJMKQAEWYVBQgFsq9/RQ8nyBvz0ABAKQ8
HwqLR2Z40ag8IsELi+O7ODOcXMgYRzzaAfBfKkDIKDTBDkWFI8hQJBUCI9kh
8Gg7LBTiCEFgQXBXKNQR78rwYgj9eCKZr2+gr0QpkgfLgyJlwdGy0JgAFSDk
GIkyWu4fpQhWmxaJfNR+XlESYYxMEuPvr1IqImSSKKUyGsi/Uv8YSVA08GSF
UiUNCBMrQ7y9g3z4Uj5bwXEL4fCDONxgD54S+KbZHF+Ol4jtIWRQeFSaF4Mt
YNH4dDyPgvWl4YR0ooBE8qZSvakUKcstgMMO5dOixe5ueEczM3NLC+iF89Dz
ZlBAfeYWJv1a2cBsbBBWloBsEZYWtuZWwIclxAoGAdlbW6OsrOwtbBA2YCQU
sEooxgZka2WDAO7bQTBgsIMlCG5pDbOwsgND7EA2YBtrGygUDAOEDEVAYXYg
K0snB0xYoDI/MyY9ISg1yj8jTqH0dXe2c3BAotB2AJPDoFCorT0YZmdtYXPB
2uYCGAqHwR2tzczJrtYKMU7l7xET4pugCcxJUxemxBYlA0kzpNhUTSu6MjOh
JC2xqSh7Z2zs1vzKR0dHTy/v7RoX5keM+q6R4daOgZa2/qa29trKbpPzNlSX
1jZXNTaXlDeVVLWXVzXk5TXmFdZos4oUag8M7syZc45wNByMdiYQJRIPdah7
fLRQqwnNTFDnmmQblZUQmxUflQsEfG1YXnJwWlJYRkJYboJ/jlaZkRyUkRKY
qZVlxssKNCH5sUHP7l+6cXJQU9eemJCrVmmVCk14eLK/PIJOdafQiVQahUFy
J+MZTBqXTeEzSG5UKs+VzCaTmBwym0Gi03EMFpHNZbnTKDRnEoVMZrpjGQw8
w4NMFtDITDKVQqLSGUwGU0DDu1FdSURXMglPd8DgnJ2IzvZYJ7QjhUBwdXXC
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
wFQwvb1QPNmtHzY3xvs7d9vb3553fn/e/+lJ/9149GJne1RcHe82hjvbjfWV
TqcxGHSq1cbiwuZMppyMlVOZ9UgsH46CIy16o/Pe0JI/UgjElz3RQjBe8Edm
/OFsMJyORGfCoTlfYNofmfaEk4EoxN6Ez5/0B9IeX9rljLqdfrvdbbMHzJao
2RCwGIMGvVfLubR6l0prlmt0SiXgn40F5dJ6pdzAkCo5Y1LILAxtomgbRdpo
wi6jjHLGYDT6fZ5wIpDIRZOzycR8dnomN1+YXVifK5bm1zfmCxtLIOfV2lKx
WlhYW5wvraxsFytbS+ViYXl5cXFtdrEyP1+dnqlMLZVnlxfyswuZ3HwyP5eZ
mk3FpoDR/aGULzDlCaXc0YQ3kA4G4r5Q0hOJOn0hlzvqcQTt5pDFEbJ7jCBe
ESVCaAlOS1CWAPPFQWIArjooQQyjZeSwR2Y44gqVCniLT74aPcRhFgIvqyIp
JUEDXbMYTaAMqFZL0CzN0CzF91NRDO/CKsrM4FqKoWgGxwmSpmiNTK1gQdpq
OQP5S8UoOJQ24PBbybUUxrCMWiHXy/84dgwN1mR0uy0hjzViNwddJrdF57Ua
nQ5zPOJtb5cPO9sn/Rp47s2wcv2jBV/2Nq8O6xeDxu3B/vVh4yG0k/ff/+Ht
V3/2i1/9u3ffff/Td7/52Ve//+bd7z//xS8//vzrF6/ePvnwzaM3r588++De
/ae3H744v39abF4Xdu+Udu9t9S/n9m7mG0VfmkKlZiWhUxsVBvdcKtlZn2lW
0r292XFr6by3MB4Ux52dy87+Vbtx2lkf9xevuxvnrfJxq3ba2QJyvmzXbzr7
153aWXdj2C3nEtMJt38qFIWjn0oGkplUJp2OBoJZb3ywufvwwe3lanWluLld
3pueApjKuqxBg8FutlgAjC1Wp4efrOo3edNqrUmt1Oo4HafVmzizDiIIZ9Tr
LHar12ZzyvmRO6PRYDIY5YDEKoVeAwdPq+VAnyY3eLFMZVbL7RqZWQH1me/i
ADTSQpW2GO0WS+xy/Ly/d+6xJ/3edNAXjwVCfo8TjhYwuU7rkBIyCYiXhyqG
wtU4D92mZDILKCaXA5abSNZJyV3p2Mx5q/vhxdXbq8sPL8+fnI6enLT+/IOz
f/zo9rN+837/6Hp3f7zdON7vNGt71bVyvb67trI1M1uJp4vpZDkcXgkFZsL8
taCy4chiKDwfCs5GIouBaMEDT6MLwXDeE8x5Axmfbyrgm/cHZv3BKXjqj+S9
wbgvGAmG4t5AxOULAvraPBGLO2a2xW32CDQro96lN7g4vUfN8Yii07o0KrtM
oSNpI/wOClatoiwy3CAjjRRqoggzRVkJPilwLOvQaqweiy0ZCMaCsVxyfia7
MpedWZqbXZyfW15YWJ5fLM0U6nPL5dmVtYWV1YWF8nJps7BWWVzcmC1uzBY2
ZqbWcpnVHJDzUj41lUtPTUczhWRqJR5fCEfy/nDc4017o3F7OOlwJjzmqM8Y
91iSbm/U4QtDgDI6bVqrklIhEoUIUU0ijEgKtVTHkDoSV+AkZF4dweoYVs7K
lEq1DvyRoBRyBSeX6/hhXxCXzAw1iqRYlqEpCmq2DKIrADZCKHFKjpJwcGUo
yesddhkntDgJQYmgSZaBNE1raEqtYHhsppVaWqYnGQNKa3GaUsBHytSUgqPl
JiV8HAvGoeL0Go/T6XW7QMh2i85pNtrMxrmp4GiweczPoKieDSoXRzvgthf9
Pf5WJkeNi375hpdz5d5x6+31w+/f/PR33/z612+/+/7zb777+NN3rz959/yT
bx6+eXv72Ufnzz48efGodRcC773qEYTfy7nWnZX2o8bhnWr3bG77eq7RiCzK
EcwqJ+yQjFTWbCS6u5RpVdPdxsJxZ/m0szzq1E86e6e9vYvu/ri5dtgsXHVr
V93KuNU47Tb5Kz+3iuf92mUP6Lpx2GqkQplIMBFOZOLZdCKTCcbyyWgmm8it
L61fHZ188uHTxy/ujAAmH1/fe3R/ZWU1FAi73V7gY5vF7TC7/Fafw+6zuoOg
TD2wiVqjYLRq1qRSwCHT0ZROozHpOD1D6ZQKi8lgUnA6QqGEpMJpYGW1Qq0x
2WxASSilJAmVCsoSOI5MzWIKHJOThNqkc/i8yVh8Oeqf97kzsWg+6IsE3f6A
1wkFwqByqWUOTKKkcQWJaklMh2EchXNugwWAVU4RckrFEHqcAiO2Wayh6+vr
X3772S++/ujbLz77+ReffvX2zfc/e/vbn33x868//91vfv4f//L73/z8i2/f
vf3ozbNus7u6XF9eqOSmlmLRQjS8GgzkQ3/0H38qFJ6NBHIhXzoUnPH6F92R
gie26Azl3d4pt4u/x7Xbm+ZvP+JN+bzTLm/WDWuGEn5fyO0Lu/wRuy9t8iSN
1qDNGjBZXaBfszGo1fm02gDHOY06SBQOtc4ll5lpysoyBvAgGammKQMCC2lA
UD2C6aSokiA5BFfJac4oN9m1tqDdFwvG47FULhmbzYSnpvh0szgHJrtcys4W
c7Or84sLufzy9FIRbDe/uDlbWZ1bXs7mVlK56fRUNj2Vy+ZzycxMchYseDrK
nyeYdPnCDk/EHQw6A0GnI+yyRWyWuNUcs7mCZqdFawBmRaSISEKIxWqRVCuQ
yqVSFYIoJVICFgxCDSVnZEoGijKjYmgFzXurmpJpWCjRrIqPwBS0EwOYL2gO
2IkBMdIGGc1BPMJZpYRhpZRaTCqkrExKcwRp4tsSpZJTahJCFgUhWkZSMhmj
JhmOoLQ0qQS/luAYQeIQqOGzWJmd7/hitZSck/FDIma93mEy2e1Wqw18iNOV
55Ljbum0C8BcO+/Wzvt7J/3m6VHrerB7u18/BUUPIQtv3z48eHV6+7OL51/e
vP7m7tt31x+9HT9/fnjvZe/6g+bV893r96ujxxvHd5d6l4X9q7m9q1zrKrd/
tVi/XW6PZvfOZzbP5/Z2IiUZxphlIGFOJnMkQpHNlfj+ZrbbWD1qbR616kdN
SMGN4/72eWfntL112K6Mm5tXrdpZe2fU3T3t1CEUn7ZLJ/ubp83t02Z5f3v3
cnT8/oOrlx9cvf34ydtPP/3ii7efvX3zzTef/O77d3/1l7/4zQ9f/OK7j//2
b7/5L//8Z5988fzB+2eD/n63vds52N/Z2d9t7O3sbG/tlFOpJPwmepPNpHea
9R63jR/Z1OttYJ9Oh9Oic1nVkDjcVpdPZ7ICRNmtLrPFrLeYHf6A3mRSczqN
zmDW6Y2cXmcwaTkDp7Oo9Ra3NxQJTeUyK5nIlNPiD/pj8UwslYrGAx6XFRI3
JEcrWLCR82rlDk5lV4F5cUxSK89pVUFG7qQNNoXFqrUbOZfXlRi0xvdvHh8f
X40Px9fD47PO0ag7Ou5fXJzeff/u/btXl6P+Sb9zUis3FmdX89MLiWwmOpXz
goH60n5/IhxNBsIRHxClP+4PRDzeeMA/7Q3Mu8OL9kjeEky7/TmXJw+Cdbjj
QJd+b9znzTjdKZdvyuWNe/1Rjzfq82UczqTDEXfbYm5z1GIJ6qwxky2i03mM
xohW6zKpzZzGqNSZlQoTpHtWYaIYPViYmNELWZOQVOOUFiHVYvxHQMVkFKEl
EY0M1WpYjd1si3g9qYBrig/eiXQsMZ2ZncnkFxJTpdTUSi6Tz+TzmaXp9NLS
1PJyfnkuvzCTmllITk8n0rPJdCaRTiez02Dikbl0IB32BcMud9Dm8ttdfqfD
ZXd6bR6f0erRayxqtRynUSnIFhWIUKFELpbQEoSVoCoooZCCpYgUYixJ8oM9
NA0Cg0irB6ACcgaDpRh+xIGVqyhWQTJK+kcnpSg98DZFyQhaSdIgZAVOgdES
JCtDWRVCgypB41oZpZHzngsGq5TxgZeBdSiMpAmOpM00qWVIGXw0iskIgmUp
JUODlWhZVqtkdAolWIYWXEav5awWq83OB7vN1amrw63TTumqVzrrVEeHjfFw
5+Jo72p4cMFf/mLzcgCP92+GrQ+Ox2/6Vx8O738yevHZ0bMP2refH5w+2zp5
XBk9rhw/KPcfbRw9XOldr+xfFfau8we3Z7rnMzvH2fppfvsyuznO1RvJgpom
LbTArdYqWXs0ECqupBqb+e7W0qjJX17yrFc+7m4cd8rnzTWw/lG3DDq9aoFU
qycHa6OD9dMW0PXOWWtz1Fw/3l/ot5sPbl8+f3zz8uGdzz548dHLNy8//Ojl
x69fvX7x8umT108evH7y8ONXz148ufPg4ej5qzsP7p61thuNarm0XNjk7yi7
XCjOltYXIXYZjEDTbqfV5bTaHfx1/hx2m8Vpt9mtjoDN49A4rPoAkCHH2VRq
vUalNWgMEEusDrdJ7+LURo3Wwun1cFRZtZrWqBmVVqEEdwr4o/HpqdmpUD4d
XpxOLWZymZnZqbDXD5BstnsUWg3Fj+wbVCw/zAelntOQMbUmreQWNNoltXlR
58gqTUG53cw6wu7pYf/23kG/2WgOdg8Od3cPG3ut2t5eo5mfzheX5g+2t4vr
9eml9VR+PppM+uJRdzTi94fD/lAwEAL6dXqj7kDUFQzZvH6rN+kJzNo9OVcg
5w6kbL601T9l94N4w3ZH2O/P+8B5vXGXJ+Lzpl3umNMX9nqDfm/E5Qq6nCGf
J+10xc32kNYeN9hiVqPPqPdpOI9WbdWprXJ+VqGOkusJmZZijbBgtEpMqhFK
TTAqeCzFZThG47gCQWRSMYNK5RgO8UGjpYFyNH6DK+EKpQLebDiUjUan4qmF
RG4pmc2mcunMUjY5B4iVTywAb08np+ZSU3OxqZl4LhNLZMLJTDCV9qcTvnTU
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
dnNlca9WGOxVO9WNTmP9qFUfd+rDVn3YbB6190fgv636Ubt62iuNWiuD5sKw
szRorZ30yie96mG7NjqoXgBsH5TPDup2j9Xh8C3my9XV/bXSwfx8eTZXgpac
TS2l49MxMBd7wuWItw7ayUTGrPfEgrHdvVq5vFkubW8sra3Ozq8X11bXNvzR
qMVszEWCGadj2u0Gy4FCAIvVYKoWshcHS++fHrx/czDcm9lZndqcn6rkU5Vc
spJObU1lmqvphbjXyl+UV0NQSijCIoS/l45Vp8vFMplEbnthec4TTbrj05lc
Nh7dmMkUIoGwSuZSEloVeK5sxm3aiTvX3ZqiX5/zu27Oxie9g0GzNej399fW
5ziTkWAJRGm1+MulxXp5eq+yuL4Q26tMdXcW742brfp2PlfKzFWiyemoPxnw
pt3uvMuZ9LmiQXfaYZ/SmxNWR8rhSNndeasr7fFFrM6wyR63ubMWd9jmidtd
aac/bfKCTWdNrrjenTC70gDSJnvY6IrowHBdKYs9xlkCemvQZPfrbR4DP/PZ
Y7T65EaPgoPkG9Bo7CrOojV6dBqXXGMlNVac1BGsgVYYcdIoJbQ4tHBGjZJ6
aJ9SVI9iJgSTSzBgV40YVUsItYSCpzKhWDEhkk1KVBKJTCTGxLwkGbGYlkjk
EJbBoBGJXCSSiyWgZUokJibF8kmhUihiJoTkpIAQCMBeifd4SAZCZm9NKt+b
ICcnJZMC/CdC7JZANCkUgFoREYVMwsrkLQEpRhkppsAJhqblCAiNUWI0H29Z
YH6MoikVCfIkVTJCQZNqhjTRmI7CQdQ6lFQAOUsZLc6qhFJMKpHjKOiXg/0i
cJ2CMFKYEsdkDKOkCTl4MY6zYiktwgjIXxCxRRgjwlViXIWSFMEgBE1B0MDg
Rf77QIGSI5DKJTikcZKiQe8YwZAMpGwliYEfUwxNGk10c2f2fLBz0t68BHIe
bI+GlbNB8bJfveoWb4bl28P9y+7+eLA/7tfOukvDzvKwtXKyWzze2xgelPYb
xZ3aXKOS263lGvX8wdZqa7ve3y0fNgq9ncVWY7HfyPS3os2d1MF2urMd69Vm
O+XV/s5Gr7l+tF873Nsd7O8dH+wcN6vD1sawtTVoVo+awMyVw9bGoFUatteH
nYVRf/mss3bcKfT6S93e6nFn66y1fwq8vb/rCYRP2o3/97//67/+yx/+/q9/
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
KwWvw7c0vVhdWehUV3obsyflhTuNtbPq0vn+/qsnd37z1YM/fH/3H78/+8Ov
T/722+HmnG/iT9GFxPygXmo3i6vLKbvX4vS7srB3uYVofj2WmnZ7QkZnzOzK
GCywBx6bI2yxRW3WhMcZg6JkMHuNVpdeZ9PZowZH1GANW+0Rmy3s5OdDRh3W
kMkcMNgiOkfCYIubHSGDCTg5aXbEjbaUzT5lt0Y5q0vj8OjtXrPZrjM49KaY
Th/VGUI6S0BlcrEqi0LrYQ0+VudWKi1yuQFcmJKZCX5OkYJkdQhpkZAqKSsn
eEd2YKQDJExSeoIxAlEjIGQUogcnIdVCiUws4USoZgKR3xKyAjEYMSaUIkIp
NSGiBGJSIJZNiLSTQpVgkhGJFCKx+idC2XsSZlLETE4iApEYJA/OOzmBvzeB
/QnkXzExIUJuCZAJgRjcXMDXBALeDQoFDXyLqKBKSFBagsv53Aqplu9VU7CE
hkH0UkQlQmViQoUQCoBelO+YAqhWgupJQg1OSvC9SRxLQB2Q4ZSCoPl57CBq
AQpALCNorQSXiSQUeKgUEj0Jzss7KcCwGCfFCIXjShEmAxMnIdgySgJjpWIa
IjxIdlIsEYoxgRARiFEEpREp8ePV4ykoNYDWKAFfGCqKjGW4iMt32tk5722f
dRuX3YOL3s7Z4fZ4uDPqb47g7xCUu3kBRN2HBLp60t/gO5G6pcMuCBb8ceui
AxvuHjb3jlqNs/7OZZc/jZd38/bWeZO/1/a4vXnW3Rp3a8c9MNOVcXPtvL15
2q2cdNaO2mujTmVwsD5sr4476+NmDRLusFPlp3Pw5ylsnLc3jpobvdbmYQ8+
bvWkWTg6WD9qNkYHtdNmBbj0D7/+6f/5v/7D73717pMXz189ePThwzvffPri
599++cOvfvbBiycedyifygMkW61ms1ZfWV5sbG01Nrf26tXS0lpvv13f4B8E
Lb6oJbQYj/d3CvmUx6TTOy0umz40m5mrF2d7G9luKdZpzGzXFlqN9e2N+fLi
XGk2v5H3NmdcB/ORQj6cy8x0Olc7+/3llfLyYqkwu1CejY7W5r+5d+dXP//0
3vs3p2eXF2c3NzeXLz54fNzujNqdd1988O9++eHXH9/99vP3v/zg3jev73/2
weXrB+dvXzz4+qNHv/3qxT/99uu//vrluw9Gbx63Qzb7+tzK8eH+Qau8spIJ
RbyBcCCXyifC+amFYiCUdriTZk/C6U5bHUC5ITPkVkivloTTnjTYwjpLxGQK
G0w+zhS2OrNmO+jXa7UFbK6Y1RmwusMaS8RoSxitUbM1YrH4rRZw3qzBmtSa
ohpzBKRttEd0toDBGTDbAkZj2KwPa7iw2hhVGfxKvVuldMhUXkrvlWtdnMrD
sHZKbiMYHa4wEGqDiFaKGJ2U0kADlsnMGOHGSA9BWCWYFiPAi7USVCNBjQhu
luJagYQfURKiygmpSiBRCiWUCEFFCCEA/xUoBQIZhN9JseyWiBSJGImQEIEp
i2S3hHJ+SEiATgItQwQWse9NEO/9+FgsAeGDHAiBCEwZkQgpAeRlqVkqUeJS
BjK1CKHFGJAwieCUGGdFEgaXKmncJJWaxQhYKouRCvhiEFSlBAtCxlGOxswM
akSlahLX0biSwhkCl0lJ5Y9WKxcB//N90RDVcYmERoB+MUYqISRiDENBqpBk
cQlBYfzoklxEwFZaKY/xNImxfCe8SCXiV5Zi/Oa4CMWlUkIK+RrBeMvG1WKp
UYLohBISwymWYRVybnlh4exo+7y/e9VtXvUal/zdweqjfvl4UD8a7oIpXwx2
LvugSlBx/QoE3t866m0f9UCStVF/mz9fuNsatVqXvfbloHEJK0BB6O5cd/bO
+LP/Kke98niw02+vD/bnT/ZXR50qaH/Md1XVRq3lcXtxBKLubB0fVA6bG8P2
xklne9TaHrerJ53Sj5hdHbaXD9uLg/bysF08OmicNxvgztP+9P/yF7/93//l
77//7t2HTx6+efDw7ftPvnn98NNP33/z8bPR1YXVGlmdq9Qru0a93awxrs0v
bm9UlnOL+eTMwvRCdW19o1Bcnc6HrAa/xbKYjeyW0vl4UK+z6o2OhenFjx4/
eHQxgjTRqsd621PDnYVWbXpzPbOxNFOczxez7stSsD8bqKzP1BuVmfmN6eXy
9PLq6ur6XH6xtLy+u7J2UKhvrtY31jdPjk5PT07v3L79/Onj3tZ2Mbfw4sGD
T14+efXs0Z99/80Pv/zyu599/PGr25eD3vXx6O7o9MXZza8+/PC7Tz/62acf
fvnhg6ODjYVUcmuzuN9cWVvJpmLhRDyeTs0ms4vp2QUHz7pJozvtcIKEY7zD
OiMmW9hkiupBto6YyZ20OKI2R9BiDlscaZ01pANTdgTNzqDe7NVaQypjzGCK
cmafwR4FNjabIxZrxAq+bAxwhrDGEDTqg/C6zuzndHarJaaHF/V+jSHA6cJ6
XVCpctBqj1LnUyhdKqVTIbNRrI2W6fh5vzKjhNWhjJaiTRRuZBg9yRpxyknR
NpTUAEyShBFDdWKJWiLVIrhKRIBSNOB6ExKZRKoQizGJFBcjyvfEykkxJxFr
BSKa76MGkQqYSf4veUsAiZj+yQQxMUlPTJI/maDhlYlJVCiSCAQCEMIk6FcE
vqaSCtQSsVooAn5WIgDqUnBw8EdWLCFxHNwQR3ACbBGTgrFqJhHlJMKKMRqh
VSJMLSH5KRwopuSvYkeYcdIkwTQoruEvbUcp+FPyKTVOaDEwRxSCsJpANYRE
hkn4pIzjwOckuKdICgKU44ySZNQkADDBighGiqvEYgKBqAtpGiUkCDEJMV/A
SgUkIkUQYHFwc5wf5IIIjOA6gZT7kVLAiymwfjlt9Tj9nebKWa962a9fDiqX
vTog9GiwddIun4E2j9qA0wC954Pi5WDzvLN70d3nr0Y1qJ0OauMBeCt4Lhjx
Pn/3BEDxdu261bjqbPHzptq1o37xpF847ZdGnTJ/VkJnq9+sH3ZrF53a2cHa
qLl01ls9b1VPIfm21s+a1UFjrV2dP23B+suj9vI5CLa1MGyvDduVXmu9B6x+
UD3f3RweLC9EEv/2h9/+6z//zS++/Nnrx8+f3Lvz8v71p0+v3jy7ePHi7m63
aTC6C0uV5eUNjdpks3nXFtYPNrc7O4359Ew6msjGp148f/zq1VllbSoT9Fdm
UpXFVDQQsOotRr1lY33t7ilUr1q7PNuYj++VZvYr892dxb2d+drmXG1jeqsQ
u1OLN3MR3tJbtbWtysr2zsrWznqtPrdcur7z4Pr0tLvT2a/v9TrN88vz8ej0
ztWdJw8e7G1slmbXHl3e3D05e/flJ7/+5VeffPLm87ef/OoX39wbnz28vv3D
d9/963/4u+cXx+8+e/7bX377u1/+7MNnN72ttXJxutUpllam04loOJMK5maS
i4VQKut0u3VWm9YWtJhidnvMCPbqjFqsYU4X4PgpjiG90W+2efUWr84WNjoS
nBEIOWSwBTmLV28KgClrjTG9KaK0uNRmj94c1OrdRpvHBIvRpTeFlJB29WGj
IQIra7UWrcGpMkY1hqha59LqnDqdQ6G1ydRuhQoeuBVqp0ppZ2QuRgFGrGNY
DmMMJKNjGRNFGFiZUaWy0LSVpKy0TEvLNSQDLKrEEAWKcChlEdNWAa6d5GdT
MAIpJZRIxOBBUvY9CUCyTiBWTUK8FclAgxN8L5ZyUqq7JVFPCGWCScXEpOyW
gHpPRE5K+SmRk5OQHWmBBBUgiBAEAm1eLOPnWYlIoYAW/zhcJRZDrqRFIiko
BUMJnARDVPHjsAQtxCkBoZRQejGul+BaKQ7pWE1DWsdICX9pOwBmgGHwVgi8
CoyfhENTBEOSMkQqR6RqBtHRUJEkDCIlJSglxRUSTCmQUGK+14tFERWKqhBc
ISYoMUby3iolUFwGpQkIXyiRS0WMVIhLxDhkZDBlKUIKEcAHXIAoRIDTGAiZ
wgmKQRmOP3FVnZ0KnQ/rZ50NUNPVsHYx3AEL7tVXLruNs2HzAhJxp3g+LJ4N
ype97Ws+LFcu+2Uw4rP+7gik2uYp+ri/ddLfhsfX/cbNYPe0XT3tgvOWzgfr
V70SpNdxpzjq1I+a4Lxb162tO0DIrQpA+NlB8Xh/5aS5cXGwebK7UZ4Ptuqp
cX/5pLk2bk4dHUQG7WKvs9PvbnZa80etxfPWTn9/fW16/r/9y+//9u++/+qz
ty8fPH565/LZ3cPX71+8vHf+/NFVvdHgtPaVlUImn1Ur1ZAJ1xcKjUppf7O8
kJuZy8+dnV4NDwdX582ri1a1VKzMZTdywYDDYuD0SlqVT0zt1baXZ+dK+alK
enq3tNzZX+k1Vg5Kc/v1mUY115hJ3ixkt1Px2s5+Za9ZWKvmlyrz5d3pwtpC
sfrs9QfvP7l9cwXCPT69OhxdHd9cXz269/D9B/djwUx5sXp12IFK+NnLh6+e
P7w4Gb+49/jp9e37x0c/ff303cevvn4NaP36s5dP718/PDq6abfHrd0OsP7u
Xnl4eFTdbkRmloKZQmamGows2L0+tcmoMwcsjpTWElabfWZzyGqNq/RBlTls
tCcs1qgR4Nno1duDFmeM0wc4ftDWo7d4OHNAZ/QZLTGdPQEbchaf0ujVmALA
2CYQvt6pNjoVtqDaFuGMHoPBpwPbNQU1hpBc72M5q0rngEWt94Idy1V2mcrF
KtwKzkOrnDKlV6a0MHIlJTeScgc/v5ef22+WyWwka8cYJ86YWbmJotUELQeG
xAkrSujFlF6IcmKJZlLMClBCgGC3hCTYjVDMCMUKgVA2OUnfmiAnhIxYCA6l
FggVtwSgaFYkZP90gvxTAf6eCJ9AQAhKEcIIMdkt0C8qnZRiYgmGoxSCsxKU
P08BXBKY9kc10QIpBjgqBpYGkicMPw7UEiJcIcIMGGkCdEdwiJwqPhqjWpRU
8xkWoQicAA/lJ2MQLIHKcIREpfCPEKOUBJMThIbCdGI+QTMQcvkBMikFbiqV
Iij//gqpFNBdIcTAW1mC1IhFtIQvWWqBRCGUoBKJSCxCRRKQNg4liK9iiFSI
4iJYH+EnpYgQTEJRKM4oGE6j4ue21Cur50e743blZtC46e9fDw5AJvD3crB/
09+66tdO+1uj4dbpoHzer5x21q76xbPOOtgoeMPVYP+83zru1E/7O/w4VI/v
Lr44XL4YLIwG6+eDzdNO+bi1MW6Xj9ubh+2tcbt21lq/bBX5qc6dymmzcNxZ
PWqVBvuF4+5ma2txd3PqeFA56W2etZdGjczhQXHQ3eq1Nzrd3GE3OWqvjTu7
zVL1f/zXv/+bv/rV27dvXj2+8/zu2ZN7x4/vnz68c/L04dlWseLTBuprm9nc
jIYzOGzW+ZnZjdLGyXHr3u2jz948+Z//7oc3r2/vbRfKxdmzYeuiWbt/WLs9
hN3ffnB28vz22cOrwWhY6zUKnVrxuFk+3l/vrC8dFOYrC9mVmWQpHRlPZzYi
8Xq9Xt7dnllbj82uTJfr0xuVldruvXsP7969uro83mtU2n3w35Oby5MHN5dn
43EqGW/Vy6dQ7lq1j1/fvPzg5snDu1999OrRRe+s1Xjz8N6L23cuuoNPnz88
7nZ87qxJFzSovSFvbnWlvLlZ39vZq9e2E+mFTHYxk57z+LN6e1xrjqo1IY4L
asx+EClkXqMlpTMkgIptYLiWgM7ssTgCnM2tN9l1aiunj3LGiNEY0NiCKpPf
YArrTX5O7+GMPo3FozC4NPqAThfSanwqvZuzgnH7VUavzhAy6HycOqAzxDiL
R6lxKDQhhS6s0gY1Gj+rdlEaF6PxMHoro9RrlHaVyqbWGhiVFVdapHItxuoZ
uY1UWFmlWaV2sgo7xRj5sxsgAlM6CQk2pwOTkko0EC2hwQpAgKBECLBiBvQ4
iWgnJOr3RPI/ETDvCeTCCRIVkKJJbEIonRCKJgXSnwipP5kEvRM/wrYBQVih
GLLzH7uPwPIYEqdFhFyAKhFEJZEoxXz+ZTBUJRRDIgbxyiB3i3F+ZAcjZCih
RQkDKFckRvh5kizfa4QhP3I+qkZRGUFzIokS7JX8sVdKghFgzVJCiRBKlFIK
cRUKtQgwAL6DBDIszs/rIkH1EHI1CP8d5BJELQIv5memaTGMFSOICCP5SSwC
sUAkEooAPEixRCrkczuKgZDFQjEUAAkmEGBChAb9ClECoTS0gqNpeTTiP4ag
2t28AuX2Dq6G7avh/vmgfjFsXHX3LsEDevvj4d74aPu4V7wYglNvnvV3rvu7
N73tO4O96377tHsw7oDkG+C2l53F8+Hi+eHquFce8b1VWxet/Wtw3k552K0P
2hvD5sK4WThvL/ODRK31k/bGcXO111nq9UpHvfXhoDIcNka92mlr7Xa7dNrZ
BtUftupH/GSP5X5z8ahV6W1t/Y//7Z/+/W9/+PSTj56+//DB7TsP71/fvXd2
597x0/cv1+dXXZy/ur4TCEbkSpXL6dgorWzv10an3dHJYXev21jZ3FzdrRT5
e+G9vT75xaPLjy8OX47ar0edF+PjF+PRk6PWvdbavb2VO3ubd/e37jeKL3rb
LwcH3VJxbmZuLh3dyYSWfN7trd2N+s78ajmSW1pc21zZqJXKe59//OmrDx5d
XPT2d0qDfu/8enQ2Hrbru7v1ajLuaW6vd/drBzvll0/PXz26fP34wQePHg52
690q5JHRnbOrexdXN6dH9a01udZMM1qlXG/QuNeWK1ubtd3qVre8Hwunk/nZ
WCZn9UY4S0Rr8ur0Dk5tVxt9nC2kNnn1xqjRkNSaQuCwaqPHaA1xxqTcHNE4
A0ZbQGeKa/lR3bjWmlLbomYL/K9LrrVp9bAhuLlLYXRzBq+ac6mMYNAgcLdO
H+S0AaPBpla7ldooZ/Kq9A5G5VJwIQUXYFVeVuOT6wJ6Q0jLX3xPz8phTadG
awYXZmVmWm0mVEZUbcZUPEIbtE5ObZKzRoy0o5QbYy1iRjeJQSLWQCJGCLUQ
BexUo4hGLJUJEfaWBBb5hIQVStgJseKWkJOKlBIhync4i5GJSUQgIIR/HAIW
Uj+6mFYk5h2NAGdH/3+W3vM5jmzPEpN2tgmgTHrvfZbJ8r7gQQAEQIAESYAW
9CTom7bJbrZ73SSbJHx5GJL93tObndFMjFZa7YSkWW3E7H5RKLQhhUJf9cfo
dzEiLyuyUFlZGWCde86592dQEBTF2DA/RBktSiHnix2iNYIpUUxAFpsCupdw
XooyIK0FgkJJBDSlsISGRwWOl3hBAB/KACoJniRQ/QySjoUxBadgfmBB4Ydo
IULzOO/RrMFxqA4AgYtElKfgskCgOINhAH+RZBSMdsAsEPDRuBihiAjy3SIn
wE3yERKUAB7uj4ZDERTfArNKhIqGeQLjoxgG1H3YDDEC7n4AoE0zYYKCK5AM
xzC8oYh3Li28fnAVlbm4d/vbhzdAUT9/eObbry9+/+D2jw9WX9+//u39668e
XgHkvvz68qNHK08eXvv24eq3Dy5/++AC6OpvHtx4ef/Kt3evvLx38fW9s69R
+TvwxWde3l16+WDl5b3r39y+9PzuxSf3zj9CW05LL++cAgg/Xl14cu/ck/tX
n99B4c3PHp1+/vDk03tnH6+eeXJ3+cl9gPzK89uXn65eePLg0terVx6tXrq/
Ov/g9vHX92//v//nP//93/7t9sbHt0B4P354++ObNz9/+9P3T3794cnI8Kzn
DJ46s+QXEqyoFlOFu7euffPq6eqdO9OT5yuFxaHUqUri9Ojg8ccXTz+cn3ow
M716dPjGaHn16Oj1oaNXRyavj9Zv1fO3Biu3h0YeTwx9M1X+eXH67YUTT6+c
mJsama2krw0XLw2WH92+cvXa1aXFk2Mz43NnTpxePnvh3JXttY1Hd+7dv3b1
9vK5h6t3vnl29+m91Sc3799YPjM1XL128dzKhePXL55Ze/fut59//u7FN69e
vrpz+cbja7ee3H5w7fyNm9dv37+3eu/rOxML85l8RdMSx6bPPLj/4PrVlRtX
rp2YOlWrjY5OHa0PjXqpugmCNhY3PUe3PNXyNTthuRnXKWpmVTDLLlpALrhe
3jKHldiIFgzq8arqV2S3ZHo13a3bXikRK5huTnWLmpVD0torczpKgbTB6tpF
NAn4Ocsuej6QMqjlrApq2cqLXo51c6JT0p2cYacB74ZV1LWMpicE0+OcQDBS
EsplSBhy2jRLklGAywpAvmpWMRKK6qtimmMyNB9EWTfC27ig48DFbCxEaiEU
LewRUTsSRSwMyB2ICmBvQ2EmFCb6w3woxIcGUAxz/wAdGqAHBiiQ0MCk/Rja
LB6I6iECrqYRpIUyjnkF4zWSsXEAWpiOgg+l+ChaMQYUS1GCjeKg1aUwq4Z5
haREFi1nsQwNqlinCC1Ki2G046OwrAsOFyNYZIcpEOEGRmoYIQygbSYRo/gI
b4UpC/QzYmGMA5lNoxVmbQAHxrdIwovAXVECTaOPxkjwvDwBMxUAnCBo0OSE
hEU5rJ+KhtCaWxhXMRwFh+NRJhIeiEa5/j7qyFeA4HAYg9mLiVIkzeIsqmEq
0gw+OJT8/uvr392/+fo+UPC1V19f/vbrCy+fXXz5DA5AW64At764t/ICFPLX
1588vvwUsfPVZw/OPke9xla+e3z11eMLIKq/vXceSW5wyjAJoGJWV17cvwia
+QXw752rL4BV7yx9t3r5+7sXv1k9+Xh18cmDq1/fv/z0zsUXt8EOL768D+Pc
k1sLz++dBvw+Xb347Oa5l0Di98/fv3X2ya3lp7dOPbh5evv75//P//7Pf/6b
v2xsfPztpx/f/fjr29c/v/vx1a8/PPv5uyfV8mwuOXV2+UJQHuT15Ehp+Mal
61eu3bt84dbJ6eXJyonR0qlaZfbo0NjtE3P3ZqfuHB1fHa6sDqbuDOVv1XPX
h4u3xurXS5WVfH2lWLxSyNyoFp5Oz3y4feuXFzevnJmayTjXpirPrh5/dn3h
0aWTt5bn7t268OTx3cerD3968OLHx8/e/vBDZ+3d5i+vP7XefzlY7zU+fHvv
/rlJcNkT18+cuXbqxOrS+Y/vPr588fzrx48ePHj429u373/84daZS2cXL955
cP/uzdXL51ampuZrlSlJySyevXb7/t0bN69cu351dOLY6MjU+Mh4vVyNpYqK
m1e9rOQkTS+tGpZp+45XMp2y5FQFI++4xURQSnjFuDOkO1XRKmkAW6+guRnF
zmle0fKrfnzIsAuakVQMx/RSxiEeHbiOHTOBlO2C6tZkvWY6g7pT0uDj7JJo
1zmnzPsF3iuoTsbwUrpfUG2AcCCZrmLb6NEIZD2tOylNj5tqYCgpXYvLWopX
MgoqM1vS5CLLxkBnkoJNizbFWhHSDxFWiAL9aWCEDzyFYVwYvDDGgZDuizAR
nEGMHBb7+/FwiB6I8l+hLoFUf0QKodVprR8Xj4RJUJ5or5ZWWdanmBhKC2I5
ihUxWjk0s0CCMoYiRgBEOk0BpmicEgnaxRiN41WGFhhWYRiFoiVQthynEiSP
g66mFYwQI2gvCd4o4KxFgB0m0G4yAwcMSAgH5h/kdimJJRSGFFiOI0DoUkD0
JhkxkQInQGkLYH5hxkCbR5hEkCCeKZJkYLrAQvLAEaqvjwyhvmlUBBNwUAhR
mHPIcBR+Hh3opwhKggknSrIojpqiEH55keIYVeMunVp4cOnynZWrN69eXL2+
/PXN8w9XLz68e+HxreWvby89vrPyePUCCMEnd66iteV7l588vP7k0cVvHgJI
b714cO3ZgzMvH1/8DhXxuPot8O89ROVP71999fD26zs3v1u98RqY/e6Vb1fP
vb539Zs7l17eWfpm9fyr1ZVvbgPbngEIA9u+uHv+5YMLr+6vgF9+fOskSv69
vfz87iKc8Gx16fWd5Zd3lp/eXfrTzk//5X/7X//NX/6ytfbutz/8+Icfv/v5
p+c///j87R++++7po2J2rFAcXlheSGaylp6aqg7ePb907sSJY8OTcxPzQ/W5
cvVYtlgsZTPnJ49fmRo7P5y5UivfHKzdqGRv1lI3BvOXK+WVYu1itnQhlz4Z
xMf8xMLg2MOVqw9Wzt9ZOXl+ZuTS/PTty6evnJu7eXbu3uWla2eXrpxb3n63
9t80D968fP3v/uFv/+l/+rv//B///j/8j3/+p3/6m3/8x780f/v58sLk4mhh
deXE1ZPHVi+s/Pj6h6XjsydPL167s7q5+aHX3np+987liytPnz25v3rn+Mxi
yq/VCiOJRHlkZPr2nVvXbl4+ffbMsWPTk5PTg/WxdLZkp3JGPKt7adlLyVZW
t/OggS2j7uhloGBJA0Wdigd53465Vsowq7YHvrhqOBnbSypeIMULklVT3WEj
VjEs1zJ90yzadtF2KpZTs8D82gnZiPE2zBLDupvVYznezAF+BSvPannFKmhW
WgOMuwkzlpHcjOolVcfRnJiCPiJrGiXDKKNbMtO2GcDQ7ZJslhS1AJZZVjOs
FMf5GM7aBA0YUSkyToID5ZQBVg+RCop/RvHkUl+U7YvS4SiOYSBW9XBIi4b4
aFgMDXADITES1vsH9CNhA9R1JEJESBolknCiQNsUFSNoH6cccKY4IxOgpQkg
YgsQHSFUoGOO0gVGj6BMIQ5FHeMMy4lA3GBOGQogCXQsi4zJ4CqHHLGKkQ6B
GRTYT7RDyxGo9iAKqqQpgaQUgkBdG6K0jBM8gysMDU8ljKKiDIcRBlyEwjiw
zNEIOGLQ1RwFMgMFkyBxjuE83A8e4Qb6+SP9cAKFhWgyIhFIe5NhnO6P4KEw
Fo2yNKnhlPovkEeop2iOOcyAwNnF6ak3r569evz4u1ePX33z4NWzR988vPvN
1/eeP7r+9OHVZ3dvPb12+emtq49uXH9w4/rty5duXr16/cqFe1cv3L187dbl
ldtXFu9cOXn/6lkgj/srlx9eufLw2qW71y/cu37u4ZVTz2+ce3ITiHX5xc3z
X68uPVg9/Xj17PPVlRe3L7y6c/rlncVv7q08vYdWt16Bub535em9Ww9vLz67
N//8/tLTuyee3T33chUc8amnt+ee3Z3/93+z/Z/++R/+/OXz2vs3PwFyv3/x
4afnv37/5LdffoBvfzo1XB6aWji3ZCUqspyeGKqtnp1dXZ6fGz52dOTE6OiJ
kfpcKlPNZEu1Uv3k0eqFseLKyNilWulcMXEuH6zkyyuF4cVcaS6RPJmITXp+
zUtM5FMXF+fuXr9658ri9QvHbizP3rp06vL5xWtXT11cGjt5bPDs2bnlc2dO
LZ/79tXL5ub6fq/17//tv/kf/rvf/+Yvvd93t3fba3PjQ4Vk7ML5mcXpoWvL
S9+8eDxeHJw7cWrlNvwirz59dP/ezctLp86eO3tta/3j1OjY+OD0vdu3bty6
OjU7fers6Qs3Vo4vzE8dnRoZO1oqD8cyOT9TceJ13SkYsRyreqwSk62yrldt
s6wZCV7WNcc34wnDcVU3YfhVKzYE1thxKrqW1bys6heBlBWvZiSqtp/y3LKp
VQ07zxtJ2SpYTgFVpXPiopEx7bIPQt0r81bO8LMGKGezbjg1100Dxh0gZTMt
GWkVJLebUM0E8LvpZByt5BhDhgWvBpqZ1ayMoCRVNS3JaUFNilogiYEopBgx
Tok2i+pVOixnYDTwl4UzbpjUUXwFQfdh3JGocgStNkt9OBzwkRCDRYSBEB3B
JSwihiJiX1Q6TAmkQxQfYlWMsQkQzJxLsh7Ng6cGcw1MJ4GyxVgzRGsEonhg
T5WhZJzmqcMqgiyKrBAiGByrFCvQvMiwGk6iQRAyYJmhXMAviby5AK4TB4Jm
ZIZhGfhH82iJG+dpRgJTjGYDUovgSoQQMQKMsApaggD/zAkUeipy6F0sCGdE
r4QcIQSaYXGc6UN2gATMRsMkHuYPxTMbinDhEBGN4ABYoOwwpkUA2phAECLD
0CJLqYIoM3whkdh+/8v+9lp3/X1j80Nj58POxvud9fc7279ubP7U/Phm+7e3
6+9//fD27cc3b9//4ad3P3z/7vV3v756/vPz5z88e/zqyf3nX6++fLL64uGd
V/efvXz05Ondm8/urz67e+3pzUuPbl2/eW3l7rVLq5eWb1w6eXNl+ebK+Zvn
T99cOXdzZenG6bHVc8fvX126e37+1tn5q+fOXLkAM8PynZX5e1eX7lw5df/6
0pNbFx7eXH4IqvXW2f/yH//yv/zPf/691/ntzS8/oQ7m3394/e1Pr168/enH
X7/79ptHz2/ffXD1xs3zKzcnx4+eGC1fmh2/dGb28tJiZ2N94/376aMni6XJ
RLISt9NHs/mrEyNXJsbPlgvLufRSOrkQd06m8pPx7EgsPeGkx5xUPQhmBmtz
U1Nn0Kby1JmT40tnJi6eW7h8bvHy0uzCZHFyuDwzOTc6MXPuxpWHT+48f3Zv
Z+Nt4+Pa23e//vTjq52N31rt9xdOHQsM99qFM/dXz3399bVn39yfmzl5/vzl
FfhVXDnbXfv5+b3zE9WxqZGl548ev3x868H961dWLl2+dGXl+vX55dMnzi8t
nDwxPj5ZrY8XiiNBsaqn81qiLFl53cmrVlJSbd1Ma1aJVdOCkWQ1X3NympVS
rbRopiQ7Y8eKdrxsuCXZKGpexYhXjVid96u8CVRbtq2KZWU0JyvaGcNNOXYO
4Am4tryM7eRcs2xYFdkryjBduBUQ1apTUrwkUD+v53gtJZtpxU2rTlYx/2U1
LAWXAsLVrZxsZkQ1JpoJuCtFTcpawBspQUkpcgztEYN4liyKs2jehkec0Sla
AyJGQCPEMC70Y3qI9vpxtz+s9EfgKfAsjb7YUSZMCiEMOdAwBRCwI5hFAKY4
FWDLCABelCtEUCqBAheBtgwaRVwbUcqhaRenE1HGx0mTZi2aMyMkULOIOmhQ
GsWaOC+THM8KBsaqUUo+jM2AR2BkYFg9ikgTFe5AQh0dqwjmvBqiWIJiUdV3
kNlRoGaVRh4Z7k0hcIUmAG08QxvA1AQl4iQdxUkcYxhQBZQFSj4ShkkJD0VR
1GgkGsEwkB9ONGKgfTF4HsZZmBYwMBRSBA0KyQaaF1iGRRlKkkDp92/e+b2z
sbu1vtdq7LU2O+313VYbRrOx2W00ujvb7Z2t3lajvbXe2frQ3VpvbazvfFxv
ra2137/ZXX/bWHu79uHXzY9vGh/f73z4uPHbh7W3v3588/36Lz+vv/n4y8+/
vPvxhw8/fffmh5c/f/vqD9+/+vn7J69ePXjx4uEP3zx+/eT+q6f3Xzy48/Xq
rft3V2/fvAGQf3zj5t2rt2+trNy6snTryrlbK2dXryzdXF7+v//zP/zjv/vL
QXfzw9ufUJOy19/9/O3L719+8+Orp7+8fvrh+6evH68+vncdKHJ6qHRycOjq
7Pztqxd+/uFp5+Ovvze3rl6+li2U08l02sklldxcafLy5LEz1fJ8JjsbpCd8
azzmDsVidScxaqbrQF0JdzCbKeVy1WJhpJSvlwuVamm8PjZers/UahO1cqFQ
qdWOjQ7OXLwIeLz04tHqzocfXjx+9MPrl5trP21v/AF+mX/d227CXHPn5st7
1zY/vn7984t7j+/dvnPj7p1LPz293Prlwe2Lx8YrudFS+fzMzNOHq9durSwv
LS/Mnjw2Pr8wd2puDvTR3HB9qJgfTRemzcxROZ4WYp4USypmQtGSqpHUrbig
xUktyVgpwcgdLklldBeglJcAyK4vOwnBzgkA0lhBigEeK6IzKBqgunMekLKR
EM2cZFcdr+C5pZhfMry04QemDXjMaXZBj2VFJ6m5OcMtuPFBO1YHxodhgjV2
APsp082abkHT86aVt9y8oiZ0MymbOVmNy2ZcMHOiUYQbY5SUaqQV3WQVg+Et
Fg2V5lWKkwlORIk5yHIqYUKNRoHOVIzWIkBhhIhjIolpGI6MIY7LUUYKAc1R
gD41QjkMnQA9LKDScDKP8p4kkhLBDpOswgo2yE6SVcOsHCLlKKVinMdJaZqK
UaRFH5pWDEf5eocptyIn2gxvkyjySiJYAbgbAwFMaRylMRRIfRHtQxEAdtDh
aigqhUkF51SclaI0EK4QjYqgk0lCiiD/DlA1SMqIYiyG0xiac+R+XAlTbAin
o1GZxSwat1nSjES1/ig7EI5E0MYTFolSkagRjrBHBgZQ1Z8oSWA8CHcCI2ia
CePg9Dma4lHGEoELjEZh5vTo5H7rPQoK6jR6O5u7rUa31f3c2N1rdNrtdqe1
s99ofNrp7DVb+210vN9sdnd2AN691tqnnd/2tze6jWZzZ2ensb2xs7mxs91s
bLV33rfWf2usb7S21xrrH5qbHzc+/rr28d32xm87H3/ZWn+7tvZu8z2Q+08f
3n374e0f1n578+btH35794cPb358/8svv/zh3fc/f//Dj2gX9btXT1++ePLy
6aP/6z/9/b/9bz/3Olsf37999+Pr77999uT5vSfP7377ze2fn1x4cenYk0uz
ty5MHjtaHh8dWpw7cWXpwvnlM7NzC0vHz929dmN+caFeKdezmVw8XUhWy8nh
M0NTF0YGpzLeaMycSrqjca/i+SNe/GgyU0qmcuBCU0ERVchKVEupY0dL01P1
Y0eHZ0YHJwdHyvl6qVAfG5k6Ojq5dHJxeXH5xvlrj29ev4LWn1fv31h9cPv+
7Zu3RitD9Vzh6NDw5OjR5bPnL964uXTx0uLS8t27V8FKfH39wpULy0tLJ88t
z92+eOHypWtzZ5fH5ufHpqaTsXy9MjM9uTQ+vJDLD2dKo/H8lBPMOMlBKZ7i
naSkw8ixSpk3cpweZw2P1WMINWbeihVMJ2m4acUDiRtIVkF3KqaVtgIwzjnD
KZngbe2yaWZVLSuaGcXN8VZS9wLbKbpG0XILDkASYT9l2iknltX9pOlnPb+S
DEZcd9Q2wClXbK9so41j+KBAN/OqnkMVKVFfhqypZTStoutA7kXVyolWkTXz
jJ4Rjayg+pRsM0KcE1McZ3CCwsoOzSkEWEtkCeUoppIRncDVMC6CW2SBl3GD
ishYRBqISBEcpK8axWQc13HCxEmPZQJBTPCSAoIWeJDgJZTTR5LgEUHoDuBc
HyOHRRln+QijUDx8FrxLoQiVZ1F5rijOEARJURS8BSwtgJrjQTNzGC1EgS5R
UpLEU55IGiwJ+hloWkPkziA+pRiV4SSc5cIMjxa+GC4UDYcwDBh5gGAIUgfF
3kdgA4dJCQMRYgA73BrGuFBExVAUNIMT3JEI/1U/NjAQCg+Q4TAewXhQFyGC
/Nf94a/6+jEcbDHMDBwT5TiUrgi/BIEC6w26nWQ5VBNAi9npj29+7PZ2AKu7
7fZus9nZAdrd6na2ut3tvdbWp9bOQbvTa7T2up2DZvP37e39RrPVbO12mr3t
rd2d5n6rsdvZ7LS2dlut3Vaz3dqGx72djc7OWrO53WnBBbe6jfXm9kYThPrW
+05jrdFc72yv7W1/bMHT5vr2ztrW5kbnw1rv/cfW+vrm2trH3z5uvnu38+sP
rTc/br998+Htz//Hf/i7v/vjQW9j++33P/363XffPXv24O6Nb17cf/Ls3pNH
F6+dPnrtxOyp6cHp6crk7NG543NLJ86cWVhYmJ9ZmD55bGJ6aGSoUk2Vi8lq
vlzLVdLZ3Ei9Ppkrj2Xy9cCtps1CzC4mEnk/Xkxmc6lMPp2upzO5mJFK2SPD
hcmZkdm5qeMz49OT9fGhoXwul0kHuUJhtDJy4ujM1NTxuelTC9OnJ+rzs2Pz
JyfAtS6OTk5li7V0NpPNBX4iCybRilezhal0tj4yODpSHqqWRgrF4VJluF6B
K05kEoAs4MqYZPuKamcyI5NHzwxV54LUmJ8ZM1ITqjfh+qNgV3U9IQHhyhkY
vBpTrEC1QalmCC0g9bQeqxomoClh2ChRSDZypp5zrJSBmn5WDLOsWFk4XwI3
6pQ4I2VageVmdQeUPsC2BE7ZQdtGgWgHlp01/YKbzPlOMeaWvVhJs+qqXrT0
gg7XsbOaC2emVa/Agnh2i743brlDjl01tbKhFg2jLGh5Wsswak5UC7KUlNUY
KyZpMcmIAchdSrAwFkloEsQnyhpQcFyj8ThG2lG0ngyu0yUIA772KPgQIAM/
ZHWctjBMiYQVkXVJxsJR3xYd6ClCU0BwiLIPexhRLKrJjLMiwWkUZ+O8SQgq
oButNdEuy3kkzBskR+ISgxauRZYFIhZEQYVJg6J0YE+S0DjeZ+mYSDsy61Ck
zjImRikEK5IoIksWRBenNKBXhuNJluknowBQgqIwisRBgRNalIADkiIlElNA
YGBAmyhnXwqD6SZptBMdJcMIvdEjYaI/ROGYgeFiOBI9cqTvyJEjWBjejZbB
aRAnGMwyCh3RyIgAQp0kD2UDJVG4cfPihT/vf+g2t9qd7V5r46DZ+NJp7nc2
91ob++3tvZ313cbWQWvnS6fxe7v9qbGz19zutXf22o1ue6vXbe61mp872/vN
9d+bjd8Byw04bh8AWXc2Or3tbmf7c3PrS2P7AJi9sdVpApbX9lsbveZGdwe4
e7O9/Vun9bHbbvU21j831nabm63GendnfX9rc2/z40Hjw+72RmNz47//u7/+
86d9oPvtN79tvXv783fPN3588efW+vb6+5/e/fT8+cMzEzNT9aFKOSjnATHJ
pJ9M+KlcJhuzg6RXSMTylu0Ypq2qhiqrmmqYpqOrlqrqsirKqiTBT1VdQY3U
DVXVTNlwBd+QbEM3PNkyWcOQHEuLWbLmqJpiuaxmqaZva3FPTetaQjMcVfdA
NBpqzJF8R3IVzlBEXxFtSRJFGZVP4QRTEj1VTAi0zZMaalGlx1GXWBbVhZYk
XZY0UUb93R1NHywMHx0/XiodTaSHvXQVmNeLD7teHUjNMOIsp/Gcr6sgSuM6
OFArKehpSklIejpITbn+iAsoBptspR0ncEzg1rRsJmw3r9lFxQ5kyxeRcgZ8
VTQjZ9klz6q44F7NOFCq44MsD0BRW25F92p2vOAlUbKS5eVFv8rZFcso2DYY
8KKqV1SzAtJacdKSP2y606pVEfWsphdlPafoWVnP80aWkbKCmDJQf5kkJ2c5
0ZclD2XRMj7GxnAuwKlUiNZCKGfW5FmToAGk4Ih1nHTCuBKllChaUDIYSgNj
GwY/S8o0o/KMSiAsqLRkYrwUoiRwqYfoUHFgK1SW2YCZgRRcjHdCKNeYQ8Wo
UMluDzQ8KSA2pwgvSlo4q5EocwGtd9FgooFq4SXGYDiH4VMk61PAmKDqSTEM
hMiKAwSoYuB8kweLjepiwYfKIZh/KAaFTFGIWzEM1DJgVgZHfJhAQYUJKsrK
CMIEhWIpUdQHGQpFBzDpv44wRwZAfqtYlOnrx498FQ4NhKJRNoSh+EyMYg+1
tEijIWMw0HI0RzMuQ5q1fKG982u3tdFtr+91tvaBdttbB+3Gfq/R6wHQ3u83
Nj63tz81N/YbgNzG7i5oaYTH/dZWr73ea7f3Gr2DBgD/w37z4+fW9ufOzuce
KO3Nve56t/3hc3vjU6MFA1D8qbmzv7P5uQkEvQXHwOyd5nar0dht9j43dgCt
+43f9hvrnxobn7Y3Drbe7++sddc+gj2/fPH61Ss3zp25uHLy2s3T184tnL98
+tT5+YULp65dPHn1zOTZ2dL0ZGW8WqzmgkwyFvcsJ+7HPS9m6Y7rxG3AqyTL
YL5kVH5bkmxFiMuiISmqqBiopr4sM7wsSAovS4yA+snpimeqKZn3TDFuq54l
y5ao6IIkKRqt+7zqG6qv6T5q4KXYiqIJvKBIoq5pMq/CJ4iUzlEyqkcmSbQg
MQBSVgFS4CVNE0RdQoX6RQluyhV4NKWooqYLuqqoqqIknMT06PzRqePF0mAq
VbDjCccPfDcTc7OWl+X1AJwjxxuABVEtWWbZNAJFDURUjSrlehUFwGXnNVDO
etzUfMcp2l7FsBOalUCpu1og6p5oJiijLDuDplfWraJpFhW4iJsw4jBSrl90
/LLuVgxnSPeLVqKguzndywtOQQGL7eQUB6aCqqGWbQNG1nQSoluQvZrqFVW7
KGtFTSkZSmAYGd7MsnqK15KSkpakLCtnBDkjagmWN2UUF53B+AwhJTBBgO8m
yQskaGlUg0LnBVCzFsXYJO1FcCdCGjSnwRzIsAbYZ0E2aFYDBAlSlpRjEU4h
SQ3lBLEazoDtBdpVCdY4DOcww6gIjUozbJSkcO4Qm8BojBIFJUybJKED4QKx
Rih4F4CFj2IkhbEsqVOkwvI+CgUhRIrmMYqIEhxBS1GOj9AskC9BsFiEJBit
nwLzLqC6GWjdW0X5+CDOgZ0JM4obGKAbIyIUTTAsTdM4iXaIoiQfwbi/6gO1
zB7pp/v7SQAp6GqU0XyEgrMBpyEC5DQfIUCZgK+nQjiFIs2iaiRK98NHYBpL
aIqgP3j0YK8HyPr4ubG139zqNTd3OzudbmOvBzp5s9vcPOg2PnUbB+2tT93m
593ep07zS6/xuQ1+ea2FJHL7c3v9T62Pf+whvQ2KGij48077oPmx1/ztoLn5
qdUEBX7QbH1ubvZa6y2ksdcPmuvgsvebnw4au18a7S/b293tj73Whx4w/vYO
aHWYLnZ3tnY33/a23weZiuMFXqKQzg7nUpVssgzcCu7USwymvGI+Vipn69Vi
BWxpFvjCjsU8KxEzXVtLWKZnG77vx00H2FfTREVTACK8GEiyp8uAJpeRZB71
j3MkVaMlgREVStJpSWd5WRY0XbHgDbrImRIviyKraKxiCKhoUlJRsgi8cElR
k0Q0FbC8yHOoVzuwAypYBpqMBq3Fw/myCBdU4JnAswIr0bSC+tEJMssJlqb4
iu4Iqq1auupms5X68GxlZCpdKCSCjOYmzGTS9gHFScvPSHaC0TVa1jEZCK7m
GAVTC1Q9pZgJXrclM6E5WcPJ6HrBMMH85iyvbns1w0joRgqcr6wnVT3G2ykx
VlaMfMwtJHy0C6zaOZTd4OU1Jx+LDTn+oO6X7HjFiRcNJ286Zcup63bVcoqa
Uxa8quxXNKfgWlXfrfKmz5meHM+IXsaLlQ09cIysoaVZyWNB4ZtpRStxSoCs
uhhHEhqEtO6zKlhXV5QTGOeTnMlLOqoWxcioxrJoMKj3n4LqRNEWDxwNMpvX
OM7mWI87zHLiBB+Bi4sTnMuyJssgsBOUzIEGlmSCU3AGTKgeouQwBzAUBQFm
Bo4QbJJV8SgYXxXROihsUmVRtj5PMFKYESM0ykpmQVTT4MQFAHsUVwmEX0Au
qFYZjqMgbBkeCBTHaLQOxlhRHCQ9FQ1TNKmilSsczjRp2sIpN0qCW6ejBB0m
wd7iBCGQ/z8Fi/241N/Ph46Q4RAZCcMtYRiBHRb/CQ0M4OGoEIoyURwPhxky
DMZcD+Easv8oFwNALYFDpwhUIWR4ZKK5uQZk+qm5/rm5/bnd2Wvt7HbB8+7u
tVv7HRDD23vdjf3OWg+Od3uInUFsg0dG5rfb2W3tdbb/BIgG+d1u9NqtvZ3t
P7W7SGO31vebG3ut7W631W53uq1Wu7XZAIWMNHmrB/Z5p/G5sfEFnbbZbWz0
GpuNrfVOa7u3sw1OvNHcaQHLtz7Gk7W4U0q6qaTnx2KxZCrrxGOan5CtjOVk
fDcdxNK5RDIfpFJ+zDQtx9FtgzIVwZc9X7WTluvKhopQKkuSbIiWLJkwwwP1
qqLE67rEu5aYEQSNBXShJuwKJ/CAPVVGzeFU+E6ImixrIitJFK8I8EdlBEcQ
DF0EUEsyq4sg5OB/nISpkqEYtGaC4WFUzQrFJVA0Q5JElIL/IjxM4xiyTDTp
qZytcZYjxmNcLqbmPTdrxwM/Xa3VSqgN13A2P+LHRjW0Y5u2EmnRzyhW2nAC
RjdJXmQUj1EBGikNzKwZ0KrHyoaDGpfnDS1p6FnTBtcADjdm2inbR6ZYM3xd
t20zeRgrlZOcjBbL2ImyGwxpVs4zCzGnYjqoT6gTL9h+3o3XnHjZsHKqhQSz
DQI+VtesMmqh4hateNmNDetunbdROQ7eylBWWkd1ORzJDkQrS0gxQU9omm8b
Bc2I86ZDSS4r26ymk5oVERReAuGjEZzPSmle9jhOFQVf4MGfykDQLG+zoDRE
1DIMnC/DGCyH2jrwckAzYHutKKdFEbpdkbY5xsU5I8oJtABulEd7rEB/rAr8
hQk2xZvoP5SRSN4F58swNKryivL1GIFSRA4oGN4lh1kpTHE4LaPyIDQfpgiU
B4SpKI0IbdrIaNWIEYE9STiNZCKAI0rEcIHERQAmzQpgh1ENDVIPE0C7Cspv
AtSj5TUuQoghjO0DyDPwJeFAWsPTcD8GYyAUCkfCUSwaxvC+gWh/Hyq91x9i
Q2F5YICMRjgsooUH0GYxhmp1gscWaJSuiDKIKVY0df/xvfv7ezt7ra0vreZe
s9drNnYRNpv7u53P3e7v7dbnzsan9uZ+r7nbaXzqbH/qtvfa3U+d9kGrDeDd
7azttzd7O1v77SbAdg+OW1ut1k630+i0NzvN1kGr12sAfns9eAmkNWjmFmJk
wC9gvNfZ3O90dju9ZnOzA+64Aeq6tQu83mz1Wp29nQ1Hychq3pKSPusZnK/A
xM5JAmfIfFbj8gKDKizBbAy8JtISRwEhmsXAHa6mjg6Pw+NoxR+v5sqFdKGc
qhSDwUK2UqwUMtl6JlFIOqmElY4l4m7KczzPNR1fTsfknM8HvhB3jYTvJi0z
6Ti+6/tGIqEgI+ebtqXJnsZ6OpChoutgrRVXU0zNBAVsmhoodlDCuiZZihy3
DAfEN/C2AjeNpR0jH49nk34pSGRjsVTCTif4nCcWkh78LQS5yaHJwepEsToZ
D0Z8qxjzSigbN1bk3QzvFCWrBEZSECxGNATVkY2UrGU5LUerASv7ppexrIwB
rtzI6lYc7DsAR9V8YGfJ8jXAsg6eIrCtLHhYx6+hWKx0zUqCvCm7Xt5NlJzE
kBOv2ImklSzb8RHfr5lmltOTkpc23CLobcuqmUZFdXNGkLVjGc3IiE6geSgj
mFQD3knzVlw0k6IOPJuU9IJpFS0zrxrgu1OimmAApwpoHoeWwM5ojGyRSoyV
UBEAktMYNgbumOdQTUga1LLk02B4AAIsCBUDtR9SwfV4NLAtb7EiigDheYtn
VVA9FGcChAlewBkmREr9BBxINAPOyKVQlzEWowSU3ssrFFyRFw/jqTTgWeBu
BhXI4oFkYa4laHjJJkiUsB8Bw0vqBErAZ2j6sE0wI0cII0xbYZTyL0UAxRgV
jTBoeZnhI6SMkzTMBn0E10cLUZzFMPC+LMpkJBXQ5yGO7KdRthFJcJFo5EgI
qJYYGEDVMnEwuWE6FML60E/DAORwmMciHEHwA7gCLBwNhQmYOkBOR0UC5RuK
4DXA7+miNjY82Gi82WmtNTo73XZ3H1xtq3nQbn9qdz51O59ajS+tbeDWLz0A
8g54ZMDvQavzpdMGwYzw2/2w33nXbawddLq9Zhsxb2e7CSQOXAyIbjQPdhp7
LVDjXaSu2zADNA9XunYQSAGgO9uNxgbAdaf1sdsDAQ9vbzUbwPbNbnOn3exe
v3zz0tVrly5cu3L+5q3LV1cvX7i4vHDp9OKt8+fvnj2HUuovn18+f+nE4szi
/NHTS5MnT468uHfpJQrYvv704YX7987ev3v56YObd66ceXhj+faN03duXbx7
7eztlTM3Ly1fWB5eOlFfmBudPzYxe7Q2NZlemPQXR5250eyx0er8WGV+PHNs
OD1eyU4NZeaGsieqtfmh+uxY5thobGwkPjocjA6l6/XkcM0drWcna7npSm6k
mJ+o1CYqlbFafnQwMTToV4t+oRxPJJxcEK9k4sVUIptMxH0/FXhBYKTjRs7X
szFzuF4fqhyrluYLtbl0ohr4KTeWMv207mUVNyc7BU4tyEqG4R2K8yQ1rRkA
DbQQTUg+IadZu+R4BUPLqkJelRKcbrNmUkD4dXRQ4E4yblc8swIAtO3BZGzM
doYMr2J7VT9Rs0Gce1k1UfXidccp2KCN4+N+Arg4o3sBWqN2CoZTNdw6Wgfz
cnqsBPzuuUnZSUhuXnNrkl5C8ZYAXsMX9UDQ0oIMd1g23AwIe0kHHs/yagoO
BCUQUURHICg+ryd4OYaquaKuBABGmReAmDUatC7nop9zqKMBweqU4ApynONt
mkc11VlWEwSZBgzyLmqexnFgEqMMgzEMTsJbJJ7ROGBt1OUTqFMlGR2jtUPa
xVF9KtRoTAd044igVYJGdjWCKzitUZwhgqon7AFCQUlMFI/RKHgD1bWj+BCl
96NlNBVHRTkMAleiESIKEIwMACkTNI2RfJjWB5AM09FG9mGvNFSzGhUIwgYi
GIEiIVFKY1+I/aofRrQ/HI2ECBwFeEf+qq/vq76+UCQawkjiMKw0FGUPg1jw
aITHo4i+QxjXT4BUQF2VZFF1fO/rJzd299d30OLw5he0bdToNpsAus+d5mcA
L4je1uZuuw3Q3u9tfe5t7bean5ptMMLAyL02yOmPn3e393vt3Q7wKDDvVrvT
aLWbvXbjcwecb2O/0e4CDzeBUUFLt7rN7U+trU5juwmobax1wA63gZTXezuN
g2YbXm222o32TqO9vt3YODYzfXp+/Oz0zJmp+YsLs5cXUVmbpYWFs4sz509P
nVmAxxOXlk+dOjFzfGFu/sz4/KnBU6fnTyyeOHfq1NLc4sLs6amp44vHT5yD
F4+dnJk6OndsZObY1PTE5PTYzMTo4MzY4MTw4FBteLBWOzU/sTBenBupzIwW
5sZyp8cKp0dzi6OD80P5mVpyoTY4Xxmar1dOj9ePjVVGx2vTk5W5idLEaHGw
HowPZiYqqdl6ebo2NFurzNeyU9XCRD03MZQZrgXlYjLnuwCboYRVSrjZVDwT
eDFPBsZ3PTvp2sXAHxsbLZYmc6UJ0M+ZoOim0loyqSYzajKrpwp2oqJaJUqO
MfDt5XxeLigaKFsQq3FGTxFmgY3V7KAim3lJLmhyRlBsUjNZHXRsUrVyll2I
eXXHPQyGjA9ZYHIB707W8ou6V0SJDLGyGa8YQOJOwbEGfW/UA2h7RRelFRft
WM70c+BlbIC5GVdRRDSS64pVkq2qZlYMo2LaFcFIc1YC7W2prijFFRkoOK/a
KcnJiUDEak7VsrwGaiFQ4Q7VgNZ8UvIo0WfkhCjGOM5ECQ6SFxUcSrAFQaFY
DWNilBgHU8yxNqpyCRpb0KKcjIkmctm8R3EAcAGFSHEAfLTyfFjPWWVYl2bT
LBtwFPzS4iTrMKiSBlp9IhmHYQ2cNiPkIRjhU1ijH1PDhMZwKsWgeBIUd8Ga
/1K8Hac8kjXB+UYoJUxaOI6CNGi0SQ2OmMVJCicxkmUiDDeAWsYohzvaEoZq
dChRDBBHgf0FkRyKAtzhAPhX/WqA/dcD5L/ux4FaI2EQ0ERff/RffRX5KkT2
RelQlI6EmVCEi2LCQH8UC1FYFFXDDkXIPrDMSJDTUQw8vCkp/uz0dK/7sdXe
bDW2u0i+NnaBH9F68vYfgXN3fut013qAwPbO763N39GidPOg2dkHjd0F/bzd
6W7A2w92Nz/vgn4Gn7vVbm7tArmCj+409lvdXaBgdOWdZnuriXaK2zAbHFrg
JqD6S7v9pb2z19z41Gz+dbv1aafR2263YQIA+m42hyq1WiFdL1aq+aFSsl5L
VQuJWC6RSsSKyXQxyBRSQS4ZS1luoMUzVsxJpvxkUAhipcApwIjFc048lQxK
mVQ1iA2nY+VEIkgkC/AW1MgMXkilk3C1ZCGVRJ2tT01PnJyaOjFaXTwKozQ7
lF8cGTozWjkxBvxbOD5YPD1SWByqHRsePjpemz1anZ8ojw8WhuqliUpmuJgY
GyqO1QdHa/mJ4fhwtYAa98Crg6l6Fmy8OZoyK4GQSnKpwMylPM/RA99DIxGv
lyv1wbFscTSeKgXJYpAoWbGK7lfcxJCdqKkIXEOqUeIkj5NkFIgo50QtLyuB
rKOcXFIKZCPnJKt6rKZZRVVNqVpMkB3VyALxgY7VnbLs5hS/aHiFeFBSfXDT
GdfLInoFJvWLvgsuHNBaNeJAr0UrNoyiWuyqicKnUwrKPCo5sWHDK2sAW6+s
xwDCSVUrmeagpufgNhS3KDgZUg8kI2Xojq75pgZ6IK/IMV4NSDVNKjlOzXFS
nJFdXnZlUOZWQkAL1IGkxg675docH/BCDAc9TDsc2sdRCThfSXFKnFU8RMpc
kpYCDEU7pzgpR/E+xmgRFvyvgZaFUQqSih12P6QBsFyCoWMC41CsRdEG2ool
OYzUcdwjyBhBmxihUYTFod7cfISWwrjGkKhQVTjKRSm0DgbWGxXxAO7mNLRG
TYoYJpE4jyreoCofoMzBz9IYLYQZPcpqA4QEhhdHO7wiEeUooFGSBWYP4wKG
kzhB92NUP8kfweiv+iMoyRfxL9E3EOrvD33V13+kL/pVmBuIyHhYioTAgAuR
KAdAxjAOwBsNc/0RVMoAx4hIBGzyAMbIsp6OucXvvn+9v99tNYD4urttsL09
EMmfut0vHaDjjd1uE9D6qbfze2fnT82dL+3mPrK6Gwfdrb1ee68LavnjQW/z
817joAO+dQcs8Od2Z7fZ7oEIb2x/abz7U/vNn1rgbZu9BgyQ2S3Q4X+CV1ud
z83933c6B42dT+3m5/ZaZ+d9p7UNbnp/u/GpuT1WGRyuDleyQ+X8cDEHByOl
dCabz/q5QjxfTKSS+Uwmn8ol0qBK08lcMsjl3Xg2HuQCwGyyFKA/KT9RcGPw
WrWQHsqlKqlEqZKsFlP5XCabTmdi6Uw6W0knS7VyZWlh/OLJo4szE4uzowtT
5dHRwszR2qnx0sJYbnY0d3K0uDiWnhnMnRwD4i5Mj8SOj7gztfh0Pb8wUpsf
LU+N5idGSqO10ng1mKhnJ2rFqXr6aD01WkiVfXkop5bTbDpggoSaTbpBws/G
YznPLmRio8O1Ur5YKNSDRDUJOtbPm17N8scsvybbWdXOWW7GMtOKnCQFjVQM
+FaLWlpV4rKcErSCoMBLGcurAYpBvvJ6XFRdSYk5sbrmZGQ9LrspLagqXkW3
Ay+RtRNAuBkwwrqdNbycGS9JVv5wtblge0XPGTbNmmfVku6w6ZfVWAo0PJhf
xxvU3KwJpByDe0upVky18opeFpSibFVUvSIpOdYoScag5eUk0xTllCTkVBZ1
J2TNFGdkBUC6kpbMgNJMybQ0J8YrNs87kuiLEuhnX2CSPAuaFnSsx7IeYlgl
gQtxQvZIWmEYnZaSOJ+i2YTAWbzoskqSEZwoIUcpDaMsjPYitI06O5AWSenE
YcVIFM5BCagmM8ETKL3XZoBYcZNkYzRuMpROsaj9HwhshrQEQiEjYijMDBAA
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
CBemucIMMTWNf3++MFMql8rcNPBsiQa0otOlUmkGbsXSNIYB2AtFnECNSgyB
lDlbRoNHGQy0O4PirHXddK0gqoT//i//dnxwcITOdD72B58mw9393c+no/Hh
cOdw/NdDJK3PqqOHw9PhaAIudfjpcDwYA3X2P6Ly5uFof3x0PD48BjjDl8Dz
Dg6/jk4m/f3+6PPe6MvuuN+ffD4YfTzc3T3e3UeVHqPd/ng0GAyP0XEVqvs6
He6e7g0muzvgGGfbvbn24mzeXMybcy231a6mnSzMGmm4ktYX87iVpUkS1rOk
keW9OO52okYz6wZZL603m0EahnE9boQp2mdGBRtRDhSdJHUvrCeNtNFoRlke
JXE7bcy3O+tLc483r/94+/qjO9ceX1+9D5S6efXuzSv3Ny++2Li6vX793rWL
D9cvbt1Y+nFz5cf11Qfr6/fXr95d621em721vvxw49r2xrVnmyvb64sPNpfu
Xb94d3196+6t66vzl5fnblxZ6LW8Tm7OJkYWma3QWux1egubbn3Fi5ZNp1Vx
Etc7y0hH0xCanhXZTqK5qWx7qhPKlRDIS+A9hQ8Z4AJeZ6W6aGaCFdByjZYb
gj2nWLmgVUWlZpm5acaVSsOttipux/E7Tph7Ue4ms5Wo50ct282qdsv3uoY7
b9SW3GARHgFK1Syg3bZeb9rVbvXMFBvuolbt6lW0KV1zm6CilUpLreYSCGY9
UPXAtFPdyiU1kpSY0zPKzngnl51ZyewJeoc3G5wVMVZDMnPdyjSrCfJAdlzZ
SYB8ZS1XtFwEXa3UCb5WBH+KyptVFrQrB6rVplkQwIDuRGADVJHF6yixStIl
WQd3L4kxJ9mMIFKcjIYQUQqBSNyRpTrHOQSnMpymiKYqVgTepDgDJDTLWyQF
SDcE0eJRsoeMUwZOGmhyCsMAEXMCULlCswBY8L/VMikQJHA2MK9YRLF1Mkkq
NK0JqNKDo3CRxmXgZVgEOAalxZbLQrHMlMoETgLOuBnSwEiTJDTQzzgulzGm
iLE0EDFmThXVwgyNFfALU+R356YvFACmVLkoFqfFmWnm/DQxVaTB4RZQVxJd
wPgLWGkKm8FxiiJYDEPxOwjNlAh2m6AkVXFs1asptfnmtZ1PwKSf93e/DEc7
43EfNRyNxgd9ANnuaLR3NBoeo3akD0ejPjqxRfvMcNmXk/0vh6O90WhyAIQ7
HKP2h8mvJ4P/c7D7ZX88Hg/Hp4PRyWBnOP68d/DpYP/TWTfTeH+0O+z/NgQh
3R+cjnaOBh9PRjvHg0+otXDwab7Znc267SaKvmk32t1GE1VstNpZlnaSViue
b4StLGzlaTeJmwDGJE3jJKnFnVpjzs8bfhTEcRwlmReCfG77cVSP66Cx8zBq
xd08bSfJYtZYzLJ2s9HttjrXF5cf3Ni8d2vjwa0rDzav3V2/dO/G7L3r7Ydr
S082rz1cu3z/+sLTGwv3N+fvrgPVXnq2sfxsc3FrffnBxpVHt68/u3v5xb0r
r+5fe7G1trV95cnjtWcPbz//cWPteu/W5vKPV1cWmq3ZPFtohL0wWEiiqxev
pp3NajxvRT0rWPEC0AidKLhWdS+7tXnPajgVkLttzY40uy4bnqhVBKmCBnQK
iqRrvOHpTgp0Bv63rPhiZVa1UtDViuKDEXbszHW6jtfVajng13UbQdCthHNa
3NXqQMpxaGVRrQ1wVoOeHnZlv6m6sVlJdLOj2y2rmnp+w/d6qj9nxG3BCFQ3
9+poiKHizmr+nFZtWJXMNCPLCQwrFFHPr8dpKWdmvBXCxVKlJQFCzQYpe6QG
eO8qeqJZiWREohZKZosxfUZzWaXBSDV42wRXxXmJQGOJqnDDWAVjRJJXcRDD
Qo3mNFaURMnl5JgyXFpWUC+wCCKkCteUQfoKoHINUrBYGaSyyzMVSjZpsSKJ
VeBunFRJRmM4VDlM0jaaJw5IJDicRq1JZUJDk1N4HSQ0yQhlVsMomyAcAjdx
QqB5geZ4HIgP7PAZv6OELpSMQbPwdGBANLpFPct55gFZgF0Mw2mSIRimAFhD
NSFSmdBLZaOICjMo+L6A6HMX6JmpUnEaO4/498L5mfMYQWMldfoCPT1dmpmh
ikWhgIkgm4kSg5fEmRm8QOBFksLKdLnI4oVyoQgWmUWhBARNsryoWoHdcOTW
v73/498OdyaDL6PhTh81CY6OxuODyRiE8RDtO+0ejPoHw18R1oagpfcAvKPx
5+MJKrY8BF883j0c7J2O+l9Hvx2PUfvD4eTLZLx7MOifgjYeDsEjn+7t7u/B
g8PB4CPaiO4fnOzuA/zHqO56gDao+78e73xYzZfaWTzb9mdbrU6ri1xwvNCK
l7vJylycz6WdVjSbR2CSGxkqhKwncSOLm3HU9utgbNNa6KOzXgBr3ATSTeMw
iaMsS5pRDM8Cvm7ks4DuNO9meRdE9Ob81Uc3bzy+denB2vzDWzce3tp4eKP9
+ObcnfWlR3cv/ri5fO9G7+ndhac/rD6/f/WnB9e371968ejay3trb35cf7N1
9f3T6y+3r718svbi6Q/b2+vPnlx7/fTuiwdrd6937t2Yv319fqHdnss7q53O
UqNzsbd6aemHuLHmZbNG2HbiK6637EerVf+KbK2ozoLldEwr0Z1EslsyKpJ0
RdURlKogV1nRENSaoIaS4spaxMoJp9YUu8WZLVIOJS2WVV/R0ZCFWr1dqWYG
CGlvtuItGP6cGi6Y8aKfzIVBz3daJgAtnFXiWTWe1YKe7DQUvWkYYHgjN6i7
tZYatBW/obkNzW/U4sUoXrKrLRSaZzRMtLzkTphKZsCodV5zKpVQM6Oz+WU1
NBRJq1OKS+g+Z2eSHktyTdJ9AcyvHPKg+XUfIM9IISsErFijUZWyjW5clWIM
9GfkKyRnl3kdTbrnVZqVZSXgxIiVHAXsNgqzqtNSvUCZBG2QaE63yoo2J6HX
QV17sknJsCw4ZQpN16UpoGn1rJwDMF6h+DP3yjg4oJvVCeBTRgNxXqDEAm9i
NBoiTBEo1bnIcRjHUSjmHRyxQpRNAdclShB4AZVA0zI4UJwWSqxWpOUyip8j
cIKmcIHAeXQijBLjWZIUWNIkcHWmxJXKJE7ySDmfx6culM+fn7lwYXq6iCHP
O41Pw11QyyUGg2sIe7ogFabLWIHGgJoJfYa2i5QB/pfCcayMzZRIZPlh2UEx
RLKtVXyjtjK7MNj982T4eTTcHQC49oYHg8n+YHI0ODgZDceoBnJyuNsHX3y8
99sBgG4CNvnTIRLPnw5HHw6HH4/7O9/2dk92946G+wfA0YP+BHzxpA8C++/D
8bf++HRvDCL8cLg7HH7oj/YmkwO4bB98MTLRu0fD0eHwy8Huh4XZZp75c93m
HCrk6DVbF+PsYitZaaeXWvl8nqVxFDayJInCTphmYRD4bhjkftT0/DogOk0q
URDmSTtptIM0yBpxBHfCWhoZ3Wat1Wo0m4DrOG+2Q+DuvHF96eL2zfWXd69t
b65u3bz6072NFz+ubt+5tHV/8/mj628eb7x6uPHs/rXXWxs/b228f7Lx6tH1
t1u3ft5e/+Xxtd9vrf3yaPOXrZuvt+/89PTB+58evNq6gfC7vXZnrbW9sfjD
+kKnWV9uR6udZKWZX1q6NL9wOw6vh+GCFwP/zlaCruLlktsQ/VnWbtl223BS
o1K3zYZmtUVUCBFraqaKdZZ1OCFQlDrawtVaghwrigtqGRVR6A6n+qycM0Ku
mzmANAhaOmo66FW8WQ+otta0oq4dLHi1Zc9po+Ep9dyuNY1abroNNE+h0tQr
bRl8d6VmeqlcaRpes1JDVVhObcmqdlU9M/TMMpuS2eCNSLVzUY8kLTSszLB8
w6zIakXSHbXiK0YgWFXWtjnV4LWKgiYiBbJc07VQNSPZjgTFlUSAm4uxiH9p
zmUEX5QqYEslzuZph0ITtHUBxWLYFG1zgsPxvsBmhtKGOyU0dNspkyawJxrt
R3EMqQtMFUxomRI42eJlkxQ1kpOBeQkQyYwJ1oMBZ81rFGeXqCrB1FCVIwWC
FiVvsBxqvWc5hedQIB4O8KR4jDzrTESlmKi3iCBNjrIEWmVpjsZ5AnlnwK9K
sEqJFEEe4ziHMthxhkU1lmqZVgicI3CBxLUyCqhX0dZxGQeG/f48f36a//7c
zPfnpqansekpbHqmAPhFg2MQ3TOgxmemyQI8CGyLBgeL0+jGFsoYyn4neNDq
ZUKkKYPhKzjDq4JYNSqW6fz7n3452d9B9cnDj6CQJ/3BUb//bbgH4vZouHs8
GnwdD7+OvxwDWlEX0u4J6k7aHQ9+6w//cjD87dvoy9dh/3gwADLd7++NAfvD
kyPQ0MOdo9HOZPfj/gDufJr0P+1PxqO94WjQHw529tEp8MeDwYdv472vk/HB
eLfdjptJmOe9oDGX5Z12Pp+lC61svpctLrQup0k7COpZCOq5ORt3G/U0qodV
kIv1TgTPi4J2Um3Xa504ibLUg99Z2AQNnoLj9RpRtZPn7bTbzjrd1myj2ck6
6eaV5puH198+2Hj3ePPd47W3jy+/erz08vHV149vv3yy+Xbr+luA8Pbm88cA
281327deP7r7Zuvu+6cb7x+t/X7r7i+Pb/+8vfHm6SbA9vWTO8+e/PDm+ePX
25s31hd/vHP95vWl1U663snWuu3FTmtlZbM1/0OtfrXmLdb8Jcdb9hoLdprr
UUcNOhW/AW8fTKhWyW10ettRrUTkPUnwZdEV4B+5GKtyoGt1U091DWHZrrQs
PazIoSh5lBALUq6abfCwNRDGQUeLl914KUgXnCBx6w3P63jVHojhai2tRYnl
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
J0uTLgqDTtHMhaTRSHIQz8lZJ2Av74KPbYMjjgDayPbWowaK14hALF/M09kk
DPO01oyr3TzPw/a8ny/V0y5QNiLuxtrVK69+2n76YPPV9vqbrY3fg4p+cvPl
9uYbAOz27eePrz/fvv4aPt0Cht148ujS80erb7ZvvHq89nZr882Te2+e//j2
+b23W+twDfjl148v/fzT+qsfr25dbW7fad9YSS7NZiu9zvqljaW5jTy/EseL
WdKtxl293vajnh8uu8llq75geXm9PmvbHd1G08G8Wls3AkquEUB2Ijo3QYzD
A8nWNDUGFLO8JGmqbVc0wxV1XbMqjhfJdm5W5xx3DvniWlPzO7KXm37L8+E1
Q9VNhEqio6ahzKq2KyCzK137LELH8RY8fy6I5vxg2XEWq14PDRqudC0vkSuh
VskNrydYAXwvTfVVI5TNRNJyTo5kxTE1T7FyEZYaqy6BMZdcUvQoeM9SIkqh
qFZVMAJKyGkJp/mKHghyRAkBI2g0SoCUSF5Dxc9ySIpNUmtQksMxwH0aieqg
fFYIQaLzapUUbEIwaVnHeZMS0BAiRjJpsYZzHkaLZ3Ts8LwtS54kpxTrlZkK
xlZQ2yDt0mheg0xwFqpBZU1eNAhWRQNMaaFEuzjlsbBWnM0Lo0iqjPr6dRI3
QUuTHF+mBZJQGEIlMAZol2crAlXhcJUgORDexRJbwlhUg1FGc8YITCJKbLkE
1pQjMaI4QxCgnDGhUKKA04uYPF1kzl0gv/uueO7c+Sn4NY1+nbsAVFwCsgZu
LZZKZYwqFNmpEj+NUXhZLJXs6ZJeLKGWBxAMBMOVgLQxjiEkmqJJUBSkTRAS
Glkqa5LkJkH9f/2PfxuOdg76O6eoo/DzwXh30v+MjpbAn4KZRSe2n4f9T/uj
/rfR6BRF2305GXw+HO2BzP7bcPS38eBosHcw7k/2Jwfj4+P90T/GO/8YfPnb
cOfbAIXQHow/HEw+gJb+tjf4tovOj04Ge6c7qA15PBnNp93FdmcuC+cbaQZk
2gSiBADW21nWbebdBB7vZnE7j2tJEiRR1Kwn82krCyO/7oapkyZeFmWduNeK
cvhiM2qCqPajIAyrILCTOGvHreWsC2K6HjaDKLt6pfdqe/Pt01uvtjZegzD+
6d7b7Qe/bG/9buvei3vrzx/eePVw89Wj9efodufV1tpr0M+PNt48ufbm6drP
W7d/eXzj3fObrx7dfvf43rvnm2+fXwL+fXT78v31pSc/rt682L3SyVfn87n5
5bx1McsvueEyIsQwr2XdNFvx6nNuMO/6s6bXcfxZp9qzKl2jklt2wzTqiuzy
qs/LPsvUKNJhKE3iLUWNWSWhRFSCpduh7cSSrnOSpFiu7jWqbtsDPey2HC+t
gHL2GpVa4joos6fitHV4/XBeqnZ0d74WAk6BrBtWHT42Pb/n+kuGN294XbvW
ctxuxe/wQcZVIzNAxVec4utGaBqBqoeK1gDTrRkdQ2+aJojn3LR9zbAVvSYC
Qs2YVkMgR5GPVLUqSjY6ojXrDNrUMhnJKIkmLgOZmrhgMiJ4SXCsVVwMYbGi
eJMFnPJAyhIuGqjGW6/zks+LnqjZkuGQZ0fGNO+W0VgWC1iVoCU0Von2aNbh
2ArPB4wYkVyd5nWUX0fJNOpfAJVr4IxJcsj/kqxCshIJiCP0MqUSFAfymCRk
kkKFVWcxWVUWzUsCnLLlMkGclT/hFFB0BSerGGmXCMAjR2AiUaLLhTJcg+Mk
VgIPC0CjiDIoZ1C5TIGQMRxNSkVTjHGxgIvfTbHffYedOz99bmoaJU8WpmeK
hQsleAWRxBX4SGBqCVO+K/DnS0DfFFagqDJNEVQRJwsEU6b5QhkrA7/zdomm
ZyiySDEkJaIETtVUJEeXjfsPbk8mnyd7H/YHYHg/jRGl7h0OfjsZ/Xo8hI87
/0AhOV8mI3Cyw7+NBic7e8d7Q8DvIYjh8RA08WS0dzoEO3wAn52MDv6fweg/
h59PEYQnX8fDw8Gnyejzyf7waAia/K97/d9Gu7t/R62Fvx6M9uaTpNuud5vu
bBKn4WyWzqdpGmZOo1VvARnX88VsLk2aYWa1Mn8unsuDbjPsJAkgMmkm9TwM
mkkjD2fToOXWsno9iqPIjyKvHlRDUNHNVh1dX49AiwMtR3cur755uPH+yRqg
76cn6z9t33j39N4vT+/+4cWP77duv3t06+dHt97cv/L6EcD2xrutzVeP77zb
uvv68eKL7ZWXD1bfPbv8+una66f3Xz8Gsb368snFd4/Xn9289mht+dHt1bXF
udVmfnVhttddjrJFNwVTecmKrlTj5SBeAr/pBZ0wglvbQmUVbdNFG9G2l+tm
rGseEKwgO7Co8ozFkBpHc7Koi2rAKCnB10mprlVmVT1WZceSXdOOtFrT9Js2
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
/z/Hn493Px7s9oGmT4af/1/uXG4o
    "], {{0, 180}, {320, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
    Association[
     "Exif" -> Association[
       "DateTime" -> 
        DateObject[{2019, 5, 10, 21, 6, 11.935999870300293`}, "Instant", 
          "Gregorian", 1.], "Model" -> 
        "Apple Camera VendorID_0x106B ProductID_0x1570", "Make" -> 
        "Apple Inc.", "PixelXDimension" -> 320, "PixelYDimension" -> 180, 
        "TimeZoneOffset" -> 1., "Software" -> 
        "Created with the Wolfram Language : www.wolfram.com"]]],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{320, 180},
  PlotRange->{{0, 320}, {0, 180}}]], "Output",
 CellChangeTimes->{{3.766507567198435*^9, 3.7665075720035667`*^9}},
 CellLabel->"Out[10]=",ExpressionUUID->"1e8a0cdc-06ae-4b48-850c-f578fa93d3b2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ImageIdentify", "[", 
  RowBox[{
   RowBox[{
    TemplateBox[{"\"giant panda\"",RowBox[{"Entity", "[", 
        RowBox[{"\"Species\"", ",", "\"Species:AiluropodaMelanoleuca\""}], 
        "]"}],"\"Entity[\\\"Species\\\", \
\\\"Species:AiluropodaMelanoleuca\\\"]\"","\"species specification\""},
     "Entity"], "[", 
    TemplateBox[{"\"image\"",RowBox[{"EntityProperty", "[", 
        RowBox[{"\"Species\"", ",", "\"Image\""}], "]"}],
      "\"EntityProperty[\\\"Species\\\", \\\"Image\\\"]\""},
     "EntityProperty"], "]"}], ",", "All", ",", "10", ",", 
   "\"\<Probability\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.7665077164096746`*^9, 3.766507727092436*^9}, {
  3.766507795271302*^9, 3.7665077957567577`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"b8cab323-bfa5-4a8a-ac06-970a7b8ec96f"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    TemplateBox[{"\"giant panda\"",RowBox[{"Entity", "[", 
        RowBox[{"\"Concept\"", ",", "\"AiluropodaMelanoleuca::xg799\""}], 
        "]"}],"\"Entity[\\\"Concept\\\", \
\\\"AiluropodaMelanoleuca::xg799\\\"]\"","\"concept\""},
     "Entity"], "\[Rule]", "0.9999837943977968`"}], ",", 
   RowBox[{
    TemplateBox[{"\"procyonid\"",RowBox[{"Entity", "[", 
        RowBox[{"\"Concept\"", ",", "\"Procyonid::syv54\""}], "]"}],
      "\"Entity[\\\"Concept\\\", \\\"Procyonid::syv54\\\"]\"","\"concept\""},
     "Entity"], "\[Rule]", "0.999989429257339`"}], ",", 
   RowBox[{
    TemplateBox[{"\"carnivorous mammal\"",RowBox[{"Entity", "[", 
        RowBox[{"\"Concept\"", ",", "\"Carnivore::229v8\""}], "]"}],
      "\"Entity[\\\"Concept\\\", \\\"Carnivore::229v8\\\"]\"","\"concept\""},
     "Entity"], "\[Rule]", "0.9999967768718182`"}], ",", 
   RowBox[{
    TemplateBox[{"\"mammal\"",RowBox[{"Entity", "[", 
        RowBox[{"\"Concept\"", ",", "\"Mammal::nt5bz\""}], "]"}],
      "\"Entity[\\\"Concept\\\", \\\"Mammal::nt5bz\\\"]\"","\"concept\""},
     "Entity"], "\[Rule]", "0.9999991985783572`"}], ",", 
   RowBox[{
    TemplateBox[{"\"vertebrate\"",RowBox[{"Entity", "[", 
        RowBox[{"\"Concept\"", ",", "\"Craniate::7yhnv\""}], "]"}],
      "\"Entity[\\\"Concept\\\", \\\"Craniate::7yhnv\\\"]\"","\"concept\""},
     "Entity"], "\[Rule]", "0.9999995895860486`"}], ",", 
   RowBox[{
    TemplateBox[{"\"chordate\"",RowBox[{"Entity", "[", 
        RowBox[{"\"Concept\"", ",", "\"Chordate::b74gz\""}], "]"}],
      "\"Entity[\\\"Concept\\\", \\\"Chordate::b74gz\\\"]\"","\"concept\""},
     "Entity"], "\[Rule]", "0.9999995895977941`"}], ",", 
   RowBox[{
    TemplateBox[{"\"animal\"",RowBox[{"Entity", "[", 
        RowBox[{"\"Concept\"", ",", "\"Animal::6w7hz\""}], "]"}],
      "\"Entity[\\\"Concept\\\", \\\"Animal::6w7hz\\\"]\"","\"concept\""},
     "Entity"], "\[Rule]", "0.9999995955766332`"}], ",", 
   RowBox[{
    TemplateBox[{"\"placental mammal\"",RowBox[{"Entity", "[", 
        RowBox[{"\"Concept\"", ",", "\"Eutherian::xtx7f\""}], "]"}],
      "\"Entity[\\\"Concept\\\", \\\"Eutherian::xtx7f\\\"]\"","\"concept\""},
     "Entity"], "\[Rule]", "0.9999982746781806`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.766507728494342*^9, 3.7665078346230907`*^9, 
  3.767529296760601*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"aa70392a-9be5-4f82-8f0c-4df071a6f853"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetModel", "[", "\"\<Wolfram ImageIdentify Net for WL 11.1\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.7665078336333857`*^9, 3.7665078412776833`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"91719c30-7663-4be7-842d-a90ef732225b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["24", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 3, 7, 7}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {7, 7}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{3, 3}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "ChannelGroups" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 3], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "bn_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "pool_1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {55, 55}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]]], "conv_2_red" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 64, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {55, 55}, "$OutputSize" -> {55, 55}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]]], "bn_2_red" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {55, 55}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]]], "relu_2_red" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 55, 55}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]]], "conv_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {55, 55}, "$OutputSize" -> {55, 55}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]]], "bn_2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {55, 55}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]]], "relu_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 55, 55}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]]], "pool_2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {55, 55}, "$OutputSize" -> {27, 27}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]]], "3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 192, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 192, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 192, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 64, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 96, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 96], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{32, 192, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{32}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    32, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "3b" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 256, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 256, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 64, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 256, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 64, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 96, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 96], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 256, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 256, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "3c" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 320, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 320, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 320], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 320, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 320, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 320], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 64, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 96, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 96], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "max_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 320, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{320, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4a" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{224, 576, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{224}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 224, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 576], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{224}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{224}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{224}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 576, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 576], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 64, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 576, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 576], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 96, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 96], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 576, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 576, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 576], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4b" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 576, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 576], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 576, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 576], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 96, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 96], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 576, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 576], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 96, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 96], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 576, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 576, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 576], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4c" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 576, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 576], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 576, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 576], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 576, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 576], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 576, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 576, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 576], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4d" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 608, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 608], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 608, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 608], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 608, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 608], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 160, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 608, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 608, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 608], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4e" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 608, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 608], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 608, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 608], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 192, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]]], "max_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 608, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{608, 7, 7}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 7, 7}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{608, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "5a" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{352, 1056,
                     1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{352}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 352, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1056, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1056],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{352}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{352}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{352}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{352}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    352, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {352, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 1056,
                     1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1056, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1056],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{320, 192, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{320}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 320, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{320}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    320, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 1056,
                     1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1056, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1056],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{224, 160, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{224}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 224, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{224}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{224}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{224}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{224, 224, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{224}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 224, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 224, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 224], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{224}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{224}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{224}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 1056, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 1056,
                     1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1056, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1056],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "5b" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{352, 1024,
                     1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{352}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 352, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{352}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{352}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{352}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{352}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    352, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {352, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 1024,
                     1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{320, 192, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{320}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 320, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{320}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    320, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 1024,
                     1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{224, 192, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{224}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 224, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{224}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{224}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{224}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{224, 224, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{224}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 224, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 224, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 224], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{224}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{224}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{224}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "max_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 1024, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 1024,
                     1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "global_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {7, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 1024, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {1, 1}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 1, 1}, 
                    NeuralNetworks`RealT]]], "linear" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4315, 1024}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4315}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4315}, "$OutputSize" -> 4315, 
                    "$InputSize" -> 1024, "$InputDimensions" -> {1024, 1, 1}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4315}, NeuralNetworks`RealT]]], 
                    "softmax" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4315}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4315}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_red", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_2_red", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_red", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_2_red", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_2_red", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_2_red", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4e", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4e", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {224, 224}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> {0.48, 0.46, 0.4}, 
                    "$Version" -> "12.0.7", "VarianceImage" -> None, 
                    "Interleaving" -> False]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{4315}, 
                    NeuralNetworks`RealT], "Type" -> "Class", "Labels" -> {
                    Entity["Building", "AzadiTower::7v988"], 
                    Entity["Building", "Colosseum::pq39x"], 
                    Skeleton[4312], 
                    Entity["FictionalCharacter", "Yoda"]}, "Dimensions" -> 
                    4315, "$Version" -> "12.0.7", "InputDepth" -> 1, "$Rank" -> 
                    0]]], NeuralNetworks`Private`NetChain`opart = {
                    "Nodes", "3c"}, 
                   NeuralNetworks`Private`NetChain`part = {"Nodes", "3c"}, 
                   NeuralNetworks`Private`NetChain`selected = 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 320, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 320, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 320], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{160, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 320, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 320, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 320], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 96, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "ChannelGroups" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 96], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "max_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 320, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{320, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{320, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}]}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"bn_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "bn_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "bn_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "bn_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"55\"", "\"55\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_2_red\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_red"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_red"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"55\"", "\"55\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_2_red"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"bn_2_red\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "bn_2_red"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "bn_2_red"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"55\"", "\"55\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "bn_2_red"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu_2_red\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu_2_red"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu_2_red"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"55\"", "\"55\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu_2_red"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"192\"", 
                    "\"55\"", "\"55\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"bn_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "bn_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "bn_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"192\"", 
                    "\"55\"", "\"55\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "bn_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"192\"", 
                    "\"55\"", "\"55\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"192\"", 
                    "\"27\"", "\"27\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "23", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"27\"", "\"27\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3b\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "23", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"320\"", 
                    "\"27\"", "\"27\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3c\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3c"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "17", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3c"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"576\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3c"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "23", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"576\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "23", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"576\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4c\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4c"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "23", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4c"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"608\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4c"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4d\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "23", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"608\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4e\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4e"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "17", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4e"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1056\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4e"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    TemplateBox[{"\"(\"", "23", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5b\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "23", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"global_pool\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "global_pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "global_pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"1\"", "\"1\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "global_pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"linear\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4315\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4315\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {433., {373.9169921875, 379.0830078125}},
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.76650784548004*^9, 3.7675293091446953`*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"e1956af5-690c-45c2-bced-fdee784513db"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataLeNET", "=", 
  RowBox[{"ResourceData", "[", "\"\<MNIST\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.767650861826771*^9, 3.767650873807392*^9}, {
  3.767650953791006*^9, 3.767650964258606*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"87c54ffe-789c-4d5e-9291-d4f5e352886e"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9YcCaBKeEsdqnzgszMzEJYpU7KMDELiDEf+4kh8/WwPDMTs+lqZqZW
DLkYoHlMzMzznZgiMJwhyMTk2MskfWEDQzgWZ/h83tL26v9/Jh5Up96MYhLT
Xw1hMzFHIUv98GXm3/HmMUzOBlnuGDPzATgHTc6SyRHBYWCyRpLazMncj+Ax
MWcjya1ilnwGt7qCyfUzipwCXKqGWW7HfxS5PJg3o5iDUDz3fyWTHITRK8gU
iyoF1MeWe/7RKl85JoWI4xhyzMxSGkDCuvY/OnhsAY4CsTwMGSB4Vg+UK7qF
TYp+AABdfKAq
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9osJ+J4QAOqflGLExGE35jlXJiYWFiYXmAIfF+vwI3C4uOFha59V4g
LSwL52PKLWZiYmIA4gXzmZjQ5BYLs/Aoi7Gw8KzF0LceaJzzf6DwpP/ocvP5
mXicr/6fbzzp9//PVqhySixMbUDq9gsQxxFF7rwoExLPAdktl5VYWBA8VDMd
WZDlUN0ClOuDc66Lsqi8QJFbCJdSY5K4gGI5E9QtnwOZmFRuIPtgjzALi4Pj
hO2ODlYsPG0oUv//HxAGBzOQcF74Hx08qQPLSYV/wJACggXaLDoLj2CToRsA
AGmVjzg=
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+04BQDExNTM3Y5byYWIMg7iClzX40PLMc0BVPuFlAYl1wkSG5+Nha5
bUBnMNX+/z+RiWEyhhzIOCA9CYs+U6CU3P//P+uwyGUC5Xb8/9+DzS1AJwa9
/v9fDYucJwOTOohWZWLyRJM6oMTEogGkVwuzsGxCkwO6DiT3JZ6FZT66bSC5
MriDMOXu/K+FOggVAEODaW4mkIhGl4HoAwUzUDMGWASJHvX+X5hy/2cwQcMT
G2hmkduB4USqAwDgHYsG
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9YsI1JZtsrXHIsLCyBWGXeR0oD5Vqxyh1UZgLKsWzAJrdBAiwnvglD
Jo+JiYmBCURMxpDLB2phCp8SxsLk9BpV5skyYRYRjegPP+tYmFjuoEhd0AFa
VQhk3GLBkJvEApX7kg1kRSNLfclkYtB5hsqCgWKgSVPALKCZOhdRjHQEytX/
gsqdQXVlD1DOGejy+5PqWIJmoMqpsbCYPfwPCesdaP6OBIZG1rZMULgUoIcJ
yC2goGRikTyELucIlePVOIEu9f+VE1gO3RkQ8MCciWX+jtfYpOgGANWaiA8=

               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+s4OI0RiBgELiGIXOrU5GRCQx0TqJJfTRnYoLKMXWjyLyPF2YCy3FK
YcjNAasHymnNQZd7ZguSqpkXxrQIQ86QiYlFrOHb/7c3/3wIQZU7wc/EJAZl
P3BFlfMHmtOAZDOaXM037HIdjIziW+C8REbGLoRcJxNTKoKXjKIPj9xFRSS5
H92cTN7fsOvrBjol8D9WuYmcTEz8e1DlBDXOvX79eq8GHxOX2H4kqf9rpaBx
Awxr/in/UYE/Qm4ymtT/6wJQubhjv9HlqAsAfP1nug==
               "], {{0, 28}, {28,
                0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+c4Pg0ZcYDWGXeRooxMTEJ6+npbXqLLreaCQQYQUTwd1SpY4IIOaYO
FKmPECkmH2sQKfgZWe4eWIa98v/bNUJAxkdkuWiwXD3Y9A5NpoXItrEDZRo/
/obwfJjYjyPkApiY+B0fw3g+TExBCDk9JiZfBG8xE5M+gqfDyOiDZEUFgx6K
vqVIcpXI+lDN/FuIJqd5B857iGJfFNALGrdhvBgmpmiE3NtgoKRmww8wZ7s4
U8g7JNu/e4LCJRbk5f38aGH2/0cQSJKLT0CAk0nu4z8Uuf9vj5TKQ+KIf/5/
THBruj0DE5PnNixSVAMAZ4J1/Q==
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+04JU/E1Mzdqlp/ixAMA2LzFE1PiaQHE/fL3SpAxIsLGA5JpY+dLl8
FricBppUExMQMEAImauoclAtEKIQReoJUEQE6BbOsjtzWViEDyFJXdBhYhFZ
O4OJpez//21AvTuQdOkATVr5///2HV/BckGvEXLLQC64A+VsA7pnO1xqtTDI
BaUwOWQzDwClWGRYOEu/ADnvb0kDHfT1P5LCoKuFhYXXgJxJLGAHIcnBLQe5
KucrkhwTUwGEBYojJhR/A/UZ5YNZwDhynoIidxDkFlU1IGCSdHr9HxWsSYQF
5ZT/GOAWRK51+0NMOeoCAFXPZPw=
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJzFUUEOwiAQ3Hjy6APcg7+Qo0evNTygjbXxUpOtifERPISP8JD9SAXbAgXO
OkmbhWFmF+bQPKrbBgCGrf1V9etEVL8vO7uQ/XDv+vZ67p9t19Kxccf28zf+
ESwBqMwIOxqCLlBkL8SjLigZQRhXoNWqNQUwb5BUiRRBLqeMs8dAGU9NUCAi
WdJeglnK2GPekXnlXb1prtO+i8iiCpwKrTOOM1MKTjKdBsMFGdckQ/Smlowe
0eC6h8vomx1rBORkNJftBEoop1DSoZT8T/ABLia5GQ==
               "], {{0, 28}, {28,
                0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+kwISRmZlZ88xrLFIHlZhZWVmZWeMxJQ/qsELkWM+hS11TYoXK1X9F
lwPZBcVL0eUyHcH6wkKAeteiyT1wAMo5zX4dDJRbjyanBRTTfvT/P8hOdDMX
A+0C0WeAtAmq1FqQXSBGNVBfG6ouCWbWBLCfMc18qMPMqnQdxFoKlItBdaUW
o/h6mL3aqHIZrMxZEBZmmB1WYtY9jEPuvynEvhZTTLkWHgZ4eM5G93pbCCss
HjDk/r+Oh8o5XceQ+/86FBR35849wpSiIgAAr/t0gA==
               "], {{0, 28}, {28,
                0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+04OASLQbpJZ+xSe2UZAKB9B9Y5DiZIGAqptQrDoiU/nNMuWSoNhtM
qeWCQHEl7HIgh1he98MidzyZhcnJ88P/lfxMuo/R5LSYmJL/gBhGGO5sY2aq
AEv9v4gu91ibif0FhHkVXc6KSXTnf+xyX0yZXGDso0y6T5DlpjAxXYcyT8mg
+QEhd0GGSeIoVrlfNYpMEkdQffDRmElWcdvRo6FMTDKousDuhAJBDKn/93z4
QDKs3R8xpIBgiw9TxrKV2GSoCgAw4ZSu
               "], {{0, 28}, {28, 0}}, {0, 
               255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+s4LENIwgwHMKU+unABAGHMaSeOoLE+R14MeU+uID1mP/XwZB7uRck
w6d3+YUqhlwzWJfn//81mPbdVGNi4p5wC6scSF8UyGxPrHL8l4D0KSYmtqOo
Uu/DmdRBUiC5UjRtCUxMOf+xy5UzM8n8gsrxzEKVK2ZiaoawkplUUaU+RTMV
QrTdF0OXO8jEVAtm3DJhYmrAkMu5DQQZikxcDd9R5e6aMsGA+X90UAyVYRfZ
hyG3IogJFtaY4OPG+UCpsuPY5KgJADVeiUk=
               "], {{0, 28}, {28, 0}}, {
               0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8w8H2zKSNDzK2/WKQ+eTKBwQtMqQ8+TEzaS1SZmHwmYchNY2KKv5MM
0sjahyb1RpuJaXkbk1j9Ei4m9l5UuelMTBP/FjIt/f//qQUT+wFkqX9BTEyP
/q+WvgFkb2dh0niEJHebicnkE4yzlokpFFUuGs75Ysnk/hNFbi2CV8rEdAfB
q2diuoDgnUeRS8UjN5OJaQ4uORS3vNdn0nmHkLvPzRTwG8a5zMSUjOSH/yEg
v0PAQzUm5zdockcgrMNqTEw7kaX+b2RikjgPpJ/WszFxL/yAIvc9g4lJdFab
ihQTk9n6/2jgpjgk2pnM9qJL0Q0AADqplU8=
               "], {{0, 28}, {28, 0}}, {
               0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9QsJuRgXEKVpkv/pJMTEza2KQeWzGBgNSUj5hytkxQcApDahcfSJzP
lYnJBl3qaxxQhvP6MQkscsUgXan/nzFhkdMCClZ8//+nHlNukyBQ7geQ0Y0h
9yWKiUli5z8ga6MQutw9oC5PCNMcXW4uUO45hHkVXc4KIReDRc7pE5h1Soap
DUOuF8x4JcMk8QSr3K+aAiaJI/8x5IS3HVVTAFob+B9TDgbOo8tlwWQ8P/xB
l/scDpZhX/YCXYaOAABaU4ZG
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8wcOQELpkd9oysOe+wSrVwMDEyMVlv8A8IaD6PKrWCg8N/wcwuHiF7
cSYmrvSfSFIvpJhKQbTK0f8LOtdLMlo/RMi1Mxp9B9G9YN5NBsaUX3C5ZKbF
yDYcEmGaCefIM21Esb6LyfotjM2IJvdNh2kbLrn/AUwpMKYt4yxUuQ2McLl+
Jp1vKHLbWMxhzGt8TCtQ5J7xM8HZOUwyF5DlFjLB9f3/ZcckuRm7W/7/f6DC
yNAI89PHLEbuS0gqXyUyMsnGds5//XpbpzwTxyoU6x+mMAEBI5jgWI3qpf+/
nnQZcktpaWn5d93/jwVceoFNlF4AAK/7qL8=
               "], {{0, 28}, {28, 0}}, {
               0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+84NNPHBJfN+UxOe7BJvNlkx0zMxOzYNKOp+h6NgJlQHJAIF1/7hdC
5udGW2YwYFKzFwfRFX9gUr9zmKEg4On/63kiQMZ0mJw+RKLq/Hkwd4cwM7Mk
TI7JLRQoFfQSxp8J5MHYz4t4mJldEfZ/V0bI7eRgZo66hXDaOhZmWxibgYmJ
ZRdC6oYEE1MD3D5mtgaE1E+gqx1/IeTUEVI/8oAuQZjCxKzwHsZ+5gaUmvId
LhfBzOz1FsKc5sDMLJLxFWHMLSVmZl27+dtqnW1lgFL1/5HBPGVomAHDWnjn
f1RwPRAqZ1X66D86+PWiuwAInn/FkKEfAAAc73tm
               "], {{0, 28}, {28, 
               0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9Q8DiaUSz7C1apP9GMonKMxljlljCKnL8fybIYU+beBE2jc///P1fX
xZC6q8bIqANirBC6gi6lzsjIzHMIyLrJ7okmF8LobhRwG8KUQXO9qOMnuyQI
u1nwKYpcMWPN/zqYHOMCFDkzweP/d86AyWUjSx1kQHJ4JmMrstxKRrMPcKuF
OC8jy9UzFiB8w4PqzoOMCDOPsvmgyD3kR8gZMO5HkfuvLnEXyqpjD/2GKlfD
GAqm39Wxyz1Hlfp/lovLferUqVUSjNyn/qODPWyMIMBidx1DChj8SeyRkSXH
sMjQCwAAwmS3sA==
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9gMI1BZc+e01ilXnsxAYHsLkyZ33WGTGBQiyH1rYgJCiJfo8tVMsHB
PhSJv2sMOMHCbKIc6HJrwBJOTExG/33Q5FaJgqSSnkZnrEGX2ycElNlz++P/
D5//o8n9BrpQKfEFlIcqV8fExHcQxtkuyxTwHC7VAXSZIYzzvRLF79VMTLZP
YJwmlHC5pMXE1A9l7wwFmrHsClxuDxOT9YlvEANrgLpW/vuPLMfEVAdkXOkF
2iVRcg3Jc68jgHIcPj4+4FjYjhJc/2fww8KYu+P7P1S5/1OgUgET/mOAP21g
Kc/nmFJ0BACa2XGA
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9A8NKDmZGZmXkzpsyqVeGsrMysQLDj/5VVH5GlpoCFwYTu/wbWXCSp
XiFUOVYkXUJg4a3XgEDtLorch2xmZkbBaXB+PTMzXKoYqCdiAsIYJH1XQLYg
OwxJzgMoNRFJ6pguQg7ojIk/kL2KZAwwNNYgG7mSmVkNSV8pUkCAnHYNSQ7B
gTgNRc4LIeeBLLcZxQ9+KE67LQ+MGpUrV678+P/higczA3MjmqNBBk9YCQoh
ZkVkV191hkYBmGhE8RAokGByZagy//+/uqYGllO7du3j/4ECAPfWZe0=
               "], {{
               0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+K4P4xCMCU2eMmxczMzATEbntRZT45c4LF+Ur8mJk4XT4hST1lYOIO
mAXlNHIzpSGk1vIwaa5DcMOYmeHsNxrMhsf/Y5dLYmZGtgAolwFjXmNiqkeW
WsxkCFcayWz9DVlOnbkQzmZiDkeWWsak/wlJbjeS1E05pvkIHiMTkiMvSTFl
IKlkYkb4baccswyq3TD7HlUyMbs+QJZbwszTBKTO9PbpMjNlvPmPApKYmBiZ
QJg74Mx/NPCm1dpKydraqu04ugwEPMMuTEcAAN9VrxY=
               "], {{0, 28}, {28,
                0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9QcFWEYTV2mQ/V+kxMIZOxSf30YwIB3olY5DKYIKAEU+q8Pm65VSBx
4WR3puyf6FI/ikByT/6HMjFtRZd7w4RT7r0ryInTfoPkFv5DlQOZyDsbyADK
MX3HlJP/j1XucyITk+QZEOutELrcZiYm1UMQpjAWuXAocyJT9R/scq8DBXJ+
oUj9SoHKzQzFCLM/9UxM0j5AwMXEpHINzeubmeAgBk3q/w0LmFToN3S5/7dV
wDLy+15iSNENAABLqocx
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/6c52MkQ1YtLrpWJiakdh1wUUE70NHa5OUA5JumnWGQOhwuaBgIlGzBk
lqz7p1H/+LMXE1PAHzSpt8ZMm0D0D6DGk6hSJ9mZmApAjH8NTEzOqHLTgcpf
g1nr2JgcUOXsmZhUf0GYJkz6r5Cljgsxsc5GGLEFWW4zE5M8jN2BJreeiWkG
lPmbj0n1PrKcFkKuiQnNLQi5P/5MTBXY5b7FMjHJ3kKR84EqvpgE9OcBVO+9
cGZi8wECMSYmseSvqHL/z4gwgQGLOJa4fd8MkkqfjikzKAAAO7yecQ==
               "], {{
               0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+kYLGDLxNv0fRHWKSeMjEzM4Pw5DdoMsdaFEHi4fJA+dWoUv48ED3/
36QxM+k9Q5L5Ws/AxC3Xa8vkC+TEMDKFI8mtYmZyOv7//5uqb0DOTSZmJLk3
Dsy2SPYzMYu+hHOmMDN/+o8sx1wP54Qx8SG7q4iJqRhupBxzCbLcXmYE/xEz
82lkuUeoco/R5K4jmb8EWS4VyX9A86OQ5ZD99wYYhkhSjUzM6xG8MGZmzZtw
KTamjJ8IuacKTIxM9aB4+3RNnYlJ9iaSKf9bwXEQFhZmCKRNUaT+vzkOjjdQ
3IrV/vyPDhaWOKYxR5c8fokhQ1UAACbKi30=
               "], {{0, 28}, {28, 0}}, {
               0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8ocMCfiSmh7wBWuWImZiDgm70XU+qkDFiOiVnA6xia1E15ZiZZTpAc
EEz+gyJ3DCj8ZHk/EBQCWekPkOUsmZg2QFj3gSHIZI0ktZmTuQHG/jOViVnz
MULOlpm5H8ErYGa2Q/DkmNVuITlMlFkB4W9+5tXItuciyfUySV9AlsthYoJb
kcBsg+IjOSTrmTDkJJ8h9Jl+RZJazMOsD+f0MTPHIaQ2MDErI1zdy8TEFAiN
nqf1wHCpQqj8LA2OnlWb/6+qkQCGZ91PJBvm6YOjgNMKFA/KVchS//+/mSMA
jT8uhTn/0cGB/n4loFzDCgwZugEA/PyCYQ==
               "], {{0, 28}, {28, 0}}, {
               0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+k4HM5I4NNzx9sUj8DmKzjmZk+YJOrZRL9/f+Jkfh1TKmTnEy7gdRz
nqkYUn8qReb8BjGqOTahyx1nOghhvBCrQ5fz8fgNZXkqo0m9Ej8CYy4Qf4Uq
V++BYEuvQpVzaUaSc8UjNx23XJg7bjmTTJxyX5VvoMmlwJkTzFCl/tdJ/4Cy
PnttRpP7Lxr5DUw/18MM6xLWiC9/v3ypk1n6BUPu/wIOJl8mJu6VmDJAcCGA
STwLS8RSFQAA8djXNw==
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+U4EWEPiND3RuschlMIKD3FJucF1BGxovJ4CUWORmg3OKbskx1fzHl
7JiY2A/+P8vEdAlTLpSJqeL//8/6TB0YUu/FmZheAenDTG4YctFMTPIfgfRH
NY6DaFJ/7JhY94NZFkw+aHJ7mJiMIKy5TM5ochlMXFcgrAOsmHI8MCa34kt0
OTW4HFMPqlNsmCph7GSmTFR9xQg5AaYSVLnLcLlTnEL3UeW+m0tdBzOeyWH4
4X87q+TRd/8/X9ViElyNLgeKWzUfQyYm604Mqf9vj+alM2nmbf2BKUVFAAD0
ta6a
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9A0M7EdAC7zM0aTmZmkw9Y5RSZgSDyJhaZ31OYQHJM8mVPMeSmMDMx
K9cDCWaBYnS5UCaG8P//N9gzAQHDUhSpMzzMGveA9OetYkCDbd4gy0UyMz+A
sK5k2TAx+yFJHhNlZkbwhJiZvT/BeauYmYMQcmeBkv1wniwTP3KIxDAxweVu
ijL7I9sONCYRxu5jZl6NLPdGD2G9AZrcVxNmYRibCU1uFZJbepmYcpGkziQg
OW0LDzMbXPLYKkFm5jkIld3AKLC0ijp27JinlSgzk1g0Urg8Xu3NDIkjECG3
4z8K+NQPk0vq/z9AAAActoc0
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/6cDWN7wC7vEm6OvP6q9wSbzI5eDSeTJ6nXY5BqZot98+P8/+RsWOU3F
uyBK9Cim1BHGbjAtgkWuiGU7mM4oxpSTF4PQ5QqYcoyqUDkmLHIVOOVeMPRC
GGUSGHJzGVuh+lKwyE2FMCKxydVDGKJ2WOQgbjnE3onpTgbBt0DykzwjlnAx
Y6r/+/9XJlMElrB+K8t07kEyk/QnTKn//3OYePgYZa5gk/r/q5GLSeIiVqmB
BwBRONdQ
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9QcKsoOdnW9gIWmS/VAkxAwOiFKfUsmEkkYuOiQEaOk+hST3WZhJaC
GGZMG9Hl7JmEjoIZyRhyRYwip4DUm1//kxnR5C4yMi0GUu9k1c5lo+uLYhR4
DqReMzEdfdvzHNVj7IxLQPTfLtaYJWi2bWJivAFhWTMFocklMKp+gKpiZDiE
KifK1AdlvZJlrECResbPtBvGtkGT28DE9B+P3GaE3BxU+7QZ9b5BWF/1rD+g
yp1kYiy7DaT/vg5nOozmh8cijEwWzRs2RDAxuT1Ek/v/oUsNFK1M/JM+o0sB
wZNGfSa7nOtYZOgFAGvxrro=
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+s4H6lKiMjo9pqVNHL+hrJdzqEOcuX7Mpg49yIIiXJCALW50Gcw/K6
z5HkOhlN35gxen2D8O6IhSPJ2Snc/X8kRvgDlFts9B0udZjRH0TdhPFPCq2H
yx1hXITqtBpzhBz/c1S5DZoIOVE0j+5hP4lT7r/IUbhbRNCkNjAcgetj2Ysm
x4owk3Eyqlwuwi2/TFz+IEv9drZAcDoZjyHLzWfsQnDeC8l/RPA+uhh+R1K5
nNn1PVyhC3MTiu2zGYUWQgLnkyZjJKrL/hzTYOcTsSorK5MQTHn2Hx0cS+EE
RXDObQwZKgIAuF+9FQ==
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x848LrNimk/dqkX5szMzO4/sUk9swJKMTNJT/mAIfXUmhksx8ys4vsK
Tc6VWXDhHnm1U5O4mJm1DqBIzeVlnvX//40H//9PqudjNpiHJPVOkpnvOIwz
iZlZ6h1c6pM9M898hKsamJnb4bw2ZuYoJFOamJk5d8I4jszMN5DdrMvM3AHj
MDAloLjspR6TB4zNxDwD1Ud3mZkRck9R5Z4gy4V/QpHbyawHY+YwM29Bltot
hnAL0A9O1+EyH9ZKMGs+gPFuVrAzS+RdA4LXz2+tsWVm1r6HZMoaLXA0MBtr
8QBJ7buori4WZIfEEZ+gIIrlYLC2o6OjvaPjDYYEvQAAZOiSuA==
               "], {{0, 
               28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8x4Pqt/z82lZUDwfWfqDLvKxjF/qdrzC9O6ZRkTNyNLPUmmrH3/3+R
YjBnjiSj60e41E5Z3jYgNd3mJph7z4epGCZ1jc/yCooNz/UUYMxo1r1oDitn
grEYE9EdXa4BYzFsRpX51cBZBdfXiiqVybHkG1wuCknm0wZb9dUI7gSWFRDG
+2fXp7hqdT1DUvrRTaTwBZBekiRh0HgO3V3/C2wYGBm5kzZjSIDBjRs37mGX
GewAAH4J2qU=
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x84sJeR8ejhI0fOYpHaJsbElM3IxCS+DVMumYmJqYsBSCj4x6LK3Orm
ZPJ++/vtJD6grPBjFDkRJiauKSDGpFCgZCC6nBiE9QFouMJ2hMzXZFYmpj1Q
zhygxoZfcLlOINf4KZSzWwHIOwaTuu8A5M1DcTFc7ggTitxteSS5w4wMjMlI
/pEFhhCyvlTUUDhGrBznUhjvfQgTk8Q5FLckL0H4T3HHfxQ5Jq5JYE6eLUqY
fbsZyAKU5NPQUNPQAIaQ0tP/yEAErJWJkQk5hKBgcrc5TM7i8n90cPsYMFSP
Hjt27A6GFJ0AAN+lb/g=
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x84cI2RMenuXVUGw7tv0aVOCTLDQOxTVKm9ykBBvTQFsORcVLlIkFjR
/1WSuOX+b5uJXc7hIZDxax4zs/IZZKkWLmZm049g5nGgqn1IUm9TmZn5oGw0
uVe5zDjl9jATkOvGI/cat9yK3wi55i+ocichzDfCXKh+B8nN+wVi3VBBDzOw
fTOXAYEJiKW3H10OBmRrd//HISew6T8KeLcvBiY1/8h/dPDOHySRcv/+Twwp
ugEAAFtm0Q==
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/6ctOM7RhlPuOS9XK05JCSam6Z9xyC1lYmJUam9fhSGxZ8vtL8cVGZmY
mLgMbqNKreRim/b//2V5SaAkk+ZXZKnvDkwFYMajjo5EJqaFyHIfmGTPw9i/
PZjYjyPJXWXyRXB8mNw/IslFo8rFIEkdYmT0gXM2MzJGI8kdZkLoe2TIxHQd
h1w70IefcMoJHPiPXe6jIJMPstT/t45MEjvBrCvuTExbUeT+r2RiEqj8DozD
GCYmrTuocu9BwcgvIMDBxKT7BFXq/+8jxiBZJkYm1on/McCDVpAcg9pcTKnB
AABR6qFs
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9A8CaaiYGp88htbHIbWViYWFhYLC5hSn20hMixGD/FkPvVxcLCoy0A
lFTFkFsAFG3/HwAkJdCl5gkBRf//38MP1D0ZVep7DAsL/zogYzdQic83ZKlP
eSwssutBrBsg5/Qgy+UDBYLArLcR6HJicLn/c9Hk/JmY1H2g7DlMTEzdCKkT
uiws82EcoD7Ngwg5oK/hco+NWYROIWnjY2GJ/wGVUkT1+xGgtjQw68VcYyA7
GYvcqhQfkOdSP6DJCWtqaoqC4oE9GVnq/zU9FihgYrHO/Y8KTvbwQeVc7vzH
AGvAUrOOPcCUohsAACV/clM=
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJzFUUEOgjAQbCc9ePQBAvEXiiePXjGWM0QkXjApJMZH8BCBd8A//AgWFMQW
rtpJm21mp53dXfoX5wRCSDyTh+Ndt0J4t/1cXg5RfA6j4LiLkiAMxMpv0hbv
Xf9xlQTrbIJzwcB4NUbdQVuUI5zN0MLUlZzAqOpUKnPNiAXWCBKGQuUESJtf
mnSjcujyXU3HKbgaDWqr1Oij691RKG8OfgH7ph52r+Oqz6yvStap+JRVJa9A
6H1x2wmk3ILeF07RwVB7XYF1GBmDOaHqlXkxOvbfrCf/vJgi
               "], {{0, 
               28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9Q8HmaPAPHS+xyNYyMPMybsUvJMcqfL8cm82kSMyMjoxU2bd+8GBn5
pYQYmdNfYUgVMDLK3v7/spSR0RndQKAu1v1Axt9Twsw1qHIzgVZNgDCP87Bc
RZZ66MrIaPgIyrFgXIIst5iRUegTjFOJKlfFyNgI51SyvkOWc2EUegHnmHv8
R5XTgjH/VjLPQpHzYKyCMT8yit5FkVvMGAdlrTZmPP4fTU4KwljFzOz8BVXu
ODNY7s8pEabI/+hAnqt29+5KTUbGBAyp/0WMYCC24A+m3Md0oIxr0ilMGfoB
AJn5rUc=
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9YsEKfDZfUE21GGxxSnXKMjOI5F7FJ9bAzgoBk9mcMqbesjFyyYNls
dKnFRoyss17bguSkTqHJpTMyLvz//2OzC1BSC1VqATOj4QcQ48/PMxIgVQhw
lpOR8TWMY844H0nqlTsjY85f7HJ+jIyq92Cc9zrIcl9UGFkWw3mrGcUvI+Rm
MTIWIXixjBJXETwRRhkE74wgih9EGC0QnHhGqdNY5b6uzmRizPmPIqcF9ty7
A4nAUElBCetWdkbjuVf9vM0ZGZm01n79jwJMGCGARWXhf3RwRwkspbYAQ4aO
AAAuh5ct
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9QcHEaI6P8kSPfsMlZMzKBQD0WqfkiEDmOVnSZ37O4mRhF+UCSrm/R
dQEFxddMCgVJdqPJaQDFrP//v44p972Ig4lJ6NH//z9vhqDJfcoFKT8GZiej
yYFN8n2CTa7cGChlD5FCk3tsw8jIyFoB4cxhYGTsQsh1gkwshLDfAD2hfhAu
dVUbJHcTzG52BjIDEdqOALlCi/78///gei3QJ0zGn1DlUoH0SVVIeN78jyqn
kZycrMfEAHLuvA9Icid4maAAqM/4BUp4QdwJllMP/IQq9f9kNw9YKrfr4H9M
cKoaaNExdD30BQD00me+
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9QcImRkTH7+TdsUlcYmUGg7ROm1FEhiBzzbgypXfLMULmKd2hSW9SZ
mRklwsGSl1ClNmkDxXgX3e/1A9KJn1F0gaSYJYCsbhDjFbJd6mCzDmKTWwSX
+v8qEVVuvwAzQnUJityvFcDwYBS6BuZ8yQSyX8KlVoE0KZ6A8ED2ab6FyT0H
G7gEwnmahuI/JLm3izKATPfHaHLR3d3dXUXo4QmRAwFIeMY8QMh9a0OW811y
DznAPnUg5NxvoYbz/09QnYyalx7/RwffX70KY2a+9vIthgwdAQDiq1iS
               "], {{
               0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9AoMrExJB1EJvM1XxhFhYmFuH8fEy5OSwsLHJMQIIl8j2a1AagsPG1
AiOgHFPYB1QpCSYWuWv//1+TBRkcjSx1C+gMpjsQVeIMTDJXkeSKgarDoSZt
AppeiJB6pcTCEg23RIaFRfgQjHPfEegChMptQN4OZA5OOSYmJjMkOSB3O4zj
j6wQTR/QYUlfccshOfp/JiiEYJxmFhZlb7hULSSEkCxn2rYNZOzVbZnAEFJH
GPLACRTCLAn5+XmGIFb4YiQbXtuA5FgghFw0ajS8KlSGySGcAQdntgeC5HJ2
YErRCwAAE+FujQ==
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9QcHj+/PPYZd6HSDOxKJ+5j02ugYWFiQUI1mPIPPcUZtFxEgbK8dqh
Sc22ZWHRufN/RxBQM3/iG2Sp/UwMTEZgkeuqDExMS5Cd4crCxDERwr4hxsLi
jCTlxMJiNBHGO6/MoozwynagCxIRSs+wsIjDOY5AuSMIuftALow9n4mJaQGS
7feZmODe0GRhMX6BJHeahWUhjA0MjUlIUueVWFQuIMntRJITRfYDEzLneiIT
SzCSUgegY+Y/B7E+BzIxMSghGfJ/B9DRTEaOjo4OViwsEkqLkOXeNwpDogdI
FF/4jwb2ODs5A4GT86Tf6FKDAgAAcTOKoQ==
               "], {{0, 28}, {28, 0}}, {
               0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9IcN+UgYkp4BUWmdX5jixMLCwsgWjiP29FqgoDxUFyLMmocj1QYTDh
jSI1jQ8i3Lp9x45sVLltTEBgysRUgMUVD5yAeoBEIRa5A0BnzP/fzAmTexWJ
8Mc2oLYd//+rQeXuOyKZgCYH5CLJAZ2y/f//5BkoXIQ+pNCAGoPgsOCQu2oE
5G3ALvf/miwLi/gm7HL/I5mYGJhktkG81YQaQu/DINEzDRgQ+UwsqCH04Q44
CnjU1CSAqpRf/0cBBYXC8Igq+48ODu0wB8uZ7fiKIUcPAABCMG4O
               "], {{0, 
               28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9QcGDbNhwyV/OFWViwSyVLs7DgkvNmAsltwCa1QQIs541F6ksmEwMT
EDAwrcCQK2ZhYQqfEsbCxKKBLtXEycIS/eH/Ij4mFuVXIIGFanC5fBaWIJiD
CkGMSUEwqVNKLCw7QIwzQDnlM0DGg9cwOaAzlM6AWduA7tmOYh3MJKAcC9QE
LHJzWFhEDmGX28DEIrL2P1Y5UOCg+w8UJM3bts0BhUs0mlwWKCjB4akz5QNY
5EA+TO6gMFROLhUqMgkRW2uEwXLG1+CqCxGmHtqxY/uOHdf+DyAAAD0JiRc=

               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9ocOPKFRwyZ6M5mJkdzmOR+TmRixkImITW/ECXuubIzMRsGxtszsyc
ii4XwswsvPv3//8/NnHz3kGReWbGxKQKU8WUgyInw8wc9gXKbmCWRXZGGhNz
CNwFDczMSFIpzExhCMc1MHsi5CYCnXEL2VUz4OzdXExMtk/g3FwmHoQ7HZmZ
yxC6Zggxp8E55zmYbX8ju8obYXUgM3MHjA0KHKMzCEOYmEU+QpnrFZiZ674g
pP4zMAmD5R6t0GVisjj4HxmoMjPrzFy5ylOcmUm++xWKFMgtwJgBYm7N6//R
wYFyCaCcUuw5DBkQeHz16tVXWGXoBwApUJ4P
               "], {{0, 28}, {28, 0}}, {
               0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+EYFemNwMjAyOjUGbpPTSpRwJMcGB8HlXunSlIVFBNTY2LiYn/EKrk
aiYm9rybQMYZPSYm4SfIUr8LgLogzC9+TEyzkeUmAU2sgLI3MDGx7kNI/XQE
yj2Acr7KMTEtQsgtBEoJv4DxmlDkSpmQuahyVkxMMgieMxPLVlxy0kwct3DI
bWLCbWYPExPnCxQ5vpNQ9kNlJibJ/yhyTF5QdgSQjeT1//OAfM7bINbvCmYm
5orfSHL/A4GSGof/f9ztAWQY/UcBG1WAYpKqwNBiYtd5hCr3f58sNGYDV/7H
AM8vlqnqZWUt+YwpRU0AAFs2dzE=
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+84PGRI0de4JDyYWFhiXiLJro7IO7//wpbFhBwbUNRv5OfReJ/AwcT
iwI7UJJrCpJcAFBA4oE3C5PRhQIHILsHTW7CRhaWeaf//78FlLS4DZeaLcDC
0vFjMctKMO+FCguLIkzqTSILi/Le1yz6NyB8TaApMLloIDvt/7eeU/8x5ZjA
cgiALMfAxMSUipC6JQ/k49CXAuTGY5fbrcjCkgwPtu1AOe6+2/AQQvb7bQtQ
KArMnTt3zlxjEFN5B8KGS2ARIGACkwJ7kRz9/6mqAEyOXULiwH9UsDtIgEVf
jInFOvc/FjC359TS7p472KToBADJZ2yJ
               "], {{0, 28}, {28, 0}}, {0, 
               255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8g8LQTBFZik2oRZAIBdn1M2bUcTFDApncDTa6BiYmz69Ahdy2grMJ1
FKn1HEycPSDGC08+Jiblq8hynUxMllDmaqBOZWSdzgi5jw0gY5HsZETI/f8H
kpS5iiy3Bc75tAZo53xkuUNIVngwMWndxyG3h4eJqRBJbjOyuy2AVsLY/kxM
Fn9wyAH9x7QWh9xOLiYmrsQzMO5SJSS5/6v5gTzhlWvW7Pn/Z00pGzB05yFM
WQGJIyYeCzMwNRPZaSvUmBDA5cB/FPBpfqQ4CxMTi7i4eO+r/5hgenf3dCzC
9AIAhI9zFA==
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9g8Kyq6tofrDJ/F2gzMTFF3cci9TaGCQzUMCW36jIycTav7uBmUnuA
JvXcjInR4CCQMYeLKQ5V6rA5E1PnUzBTlYkJVYqbiSkYykaT2wnU1fsXq9wr
oNt74f5CkXtrzMTUA9P1/5oIkw1c6kcMI2MAnHcjkJFtF5yXx8Rk8BRuRjYT
Uz5c6pk2k+FjOMeeiUlxL1xOk0kKJvVrjywTk+YjhEsYmZyhrINlTEwCsz7+
R5abD6bv1zIyMRmvR/Y2UC575cp2Q0NZJkYmj/f/0eRgIGnFx/9Y5RLyH/3H
AO+qQeDuX0wZ+gIAs6SUgw==
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+C4Mv5EDFx8UBsUucTmZmZjJx0H/9/2VV4C0VqPS8zs/7KL/8f/zho
wcwsgiz1loFJPBHCXMGkKcCEbKA6E/MSmL0HXokzI6RemzKHXvgL525h5oaz
X5oyeyJbkMacA2cHMcteRZLqZpNdCWO3MDHVI0lFMjEFwzlMzEmvEObXo3CZ
mBvh7C/NzKzpb/4jyc2GyczRYZbdiewsJuZJYPrJVBVm5pTnyFL/hZiYmKLs
ss2YmDj8T/1HBSckmIHBzMws0YwuAwTvtzY2Nix59R5TZigAANDxtag=
               "], {{
               0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "0"}], ",", 
           TemplateBox[{"59900"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x964Hw8FyOD9goQcwWa1FUuRtsp/nxMUzDlXgsxLvn9//8MxkhMOWPG
tr9A6q+eNYbcEiaNb2CGAafQRjQ5AcbDEIYBI2Pu/ygUOU7GdxBGIiPjrv/B
2OSW3TJkjPzx370fWU6ScQOIOq7DyH7p/3+3QmS56czcRy8fMmZnZATZ9fgL
iqGujCDAz8h45j8G+FRfVVV1xIAx+CumHBic42S7ikPqvxljOC6p85ysN3DJ
mTKG4ZK6yMmIU5sxo/IXHFJ/pRi7cWkDxu5dXHIkAQCnlr6V
               "], {{0, 
               28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x964IwLIyMjQ9h6LFIXFBl1ezyVmVisMKS2SzP1vfr//9MBL6ZvaFJP
BZgyIKwlTA1oci6MIVBWN6MbmjsYuS9CWIf5mCJQpL5YMCZDmQeYmM6gyD1n
YnwBZfYyMaEa+U6EcQrESQu4GG3QnLKakS2ltKS0VJORiX0/uvfqRJmYGJl4
JRmZJNGlgJ7eBQQ3dzMy1WPKQUAGowEuqe0cjCW45JqZFD/hkHonz+SOS9tU
RsbduORSmExxSV3jY0rHJRfHJPwGlxwpAAC88r5+
               "], {{0, 28}, {28, 
               0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+K4HFUoDRbA6rYmjcg8k09N6OApDjnLhQ5y/lA4iA/o1fXy/9vRe1R
5Bxu//9/iI+t/geI06uLInfh//+3AiwLwOzPqiKv0ZyRzVgMYexkZFyFKvVK
gOUJmPHHl5H/NKrcYsZSCGMzI2M2mpFVjHNB1Pc6RkabT2hy97mEb/3/v8mA
kZFl0X90MJFJRkODnVGb0R5D6v//k2GMJq0HxFmvY5H7/+/97/8rGRWxSYHA
XxnGSlxynYzsf3DJaTDW4JI6z8GD7jc4cGB0xCX1lBW33DoGwdO45EgCAMzA
w+E=
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+C4Gsa0OGya7BJbRBiVM/O5tLHIrVRiHXZt///54thSn3UZ5kKor+x
VmPIFTDmgOk5jEroUm/1WR6AGaqMluhyJYwhIOrvNCb+5+hywYx9IMt8GBmt
MKxTZFz2dOJEHUZG1qsYcomMyoKMjCZOjOGYXthtY2bdduytOCOmNijYyqj7
F5ecHuMmXFLH+Zg/4JLzYUzCJfVCjvECLrksRqE3uOQcGXlf4pC6xc44BZe2
PWIaj3HJkQQA0C/J/g==
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9m4M+RAgZGRqbQbZhS9xyYhDzr2/bfLniFJvO7nEtv518Q6+2ULWhy
RUyVP8GMX61MGahS17nV30GNZmLqQpWbwzQFyjrHpPMTVa6W6RqE8TOYKQHN
uh6mgxDGRSapZ2hy+5i0voLovdw8O9A991mR6QiQWs7OVIwu9f//ImbGxC5F
BqYwTKn//9uFeYU5GCWwSQHBq/+WrEtxyP3/yjkZl9T/tHicUpGs33FJ3efN
+IdLrkH4My6pD5JlOG27yzMVpxwmAACvQNN8
               "], {{0, 28}, {28, 0}}, {
               0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+k4M8dU0ZGRhdsUkdNGfXqU8J5D2FKnWHnnAekjmkux5B6ayCyCcxY
dwZDLoSxHcLwkapGk9rIYfUZzDjByZiKJmfDuB7CuMfI2IMq9ZBN7iOENZmR
8TqqXDmjL4TxnIvR6y+K1HdXxiYw42cjI5SFkNPiWw2WSmVk1EH3QTmj+7ub
cxq9GRn51qPLfQOFJFAPB6MrutT//19nJ1mUrHwmxDgTUw4CljHafsEh9Z6P
tQOXti8MPC9xyWUxuuOSes6N6Tk4iGSswSlHJQAAxSrC9g==
               "], {{0, 
               28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+C4E+ns7Rw8w80QRDxoVqDSVKfkzH+G4rcKSC+YMUoOQNIhzBO/oVm
3mkBRqdPIEYuI+N8NLkCRhuwFEhuGZqNFszzICxPRo4vqHIPGOUgjP18jLlo
Rk6Dyp23ZWQ8iCb3WI5t1tObp6LYGRmzf6PJ/d/AxcjPyMjJxqjwBV3q///7
k5uamnoFGVsxpSCgklH+OQ6prxqMzbi0LWRk3ItLLpPR/Q8OqWeCjAtwaWtj
5MflkueijD64tLUzMrbhkjuhrf0UlxxJAABNiMSC
               "], {{0, 28}, {28, 
               0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+KYE8Cg1Hr3l+YEtti5NgE1EWYmJJ+oMn8yOJhc5l25/+jxg7eZaiS
B+SY/I5D2UVMcruQ5ayYAh/D2IlMTGWocldgzOlsTJyHUeX6oawb0kycG1Hs
K2KqhrJsmZhaUJ35gofzLIj+3sDF5P4czQ9hTJ5Ax9wxYmKS24Em9f+AKiOj
CiMjAyPLAXSp///vxUhpGLcyMnljSgHBq///+xlZTmKV+///jQSjCw6pLyVM
jHdxyM1hYsrAEkEg8EiFiQmHrv9TmTgX45B6rckkj0tbHxNTOy450gAAqLK6
QQ==
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+C4GiZIiMjYzI2qSZJJkYlQyamckwpU3b5jNvv73MxOfxBl4pgk3gA
oi2YrH+jSe1lFDsHoj+qMnmhSf00ZQgCMxYwMnqiyb1hYlwGZtQzMcWhyd1n
YnwLorcpMjFdRJObBJT7c3RShCQThnX/LzMxzvRhYmJkYmKqw/DdXAZgkJg2
uzOyn8aQ+/8WCH69F2NCdyUcdDAxzcElZ8rk9hmH1F5GpoW4tHkyqH7CIXWL
nRGnnCsTYxsuIy2Y2G/jkqtkysYlRRIAAGocuaM=
               "], {{0, 28}, {28, 
               0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9u4ICZrnDtM2wy/XGSTIxMTF1YpIJYmFiDq6Zwy1c5oUstYpSrOwek
d/IwyaPLhXDtANPrOZkS0aQuMm4BUYfyWRk10bW9FLTfdrjTF+gW7ScYTtkA
FGYCupPnChZ3VtroqEQzMtVjkQKCvz/2MIq8wS73/38iQzsuqecCgndxyc1l
SsMl9ceYaQMuuQ9Merik/rcxNuCUk2XC5m8wuMyu8xeXXBhTKU4jp3NfxSmH
AQCE98vV
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+CoFo/hZ9tKzaZx5qMIMDe9AxD6qAGUMLm6v4OIY3P6HJ39RkZs3/9
///vBMteNKnfyYyMjr/BTP6daHIzGBmVnoJZf85P/4sq18jIGAZhFaat+4Iq
t4CRsRREP33IxCj+AlXupTxI34NqBW6gc2+jWdjCyC1vzw/2YvwvNLnH4VyM
ULAL3X///1/vybHVAkpZo2uDgH+uQKnHWKX+XwJq68Eu9d6GkVH2D3a5SYyM
LPOxS/2XY2SNwCF1hIVRAYfU/ys8jO245P7v476MU44EAABue7HS
               "], {{0, 
               28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+SYF+AiOPKf9hkHiSzMvBLM4Z+xSLlwCjQ8uTbYgmXz+hSv4MZBY+D
GJd0zqPLdTMKHIewfqFLnZAUPAGiX+SFost99wcb+HePPiPjQzS5/Yz5QPKh
GyMQfMCQm/3//iQhRsMoTkZ0655zq6hwMkot+b2TGUPu/xYuRt6sX//fyTEu
wZD7//wA0Mt/fRjVv2HKgUEbI+NFHFJLuRhzfmOX2qfK6P4Wu9QLXcZUHAZ+
LGAMe41d6m0MI+9iHNo2MzLm4ZD6/1PT4h0uOdIAABFFx3c=
               "], {{0, 
               28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+84ONiSYZ8rDJf6yUZ9eo7sUldkOYIv/YHq67F7Gp7cFhVz6ryCIfU
RjG1BzikfuhwnwczEtWno8udYlwDot6sY2GMQpdbyPjy//9/e4QZGRk3osv1
Md57fN2Wka2YkfM9utwZRgkuRkbb46sZfTHc8m+uCIf7vn+/7RhPY3Hp03u/
/v+fyCj/HIdPLrAyrsMh9b+OMRJ7eAJBvsBdHDL/+gwm49LVyciIEV4wYMLo
+A+XXLziB1xSVAMAKMbUdQ==
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9m4PfDY1aMDOkfsEjdtmNiYjK35XHEkDmixMFs2X3/7//zPLVoUvud
mBxOQZgL1X+iSD3QYpv0G8r+InwaRa6ecR2MeffiwRYUuWnGfyCMtwXiJv8/
osiFii/98GHtvS4LHkYmQTSnTAM6n4mRid8jpVIcXe7TkkBzX7OuCz/+Xxep
x/AfDCQx3sIltZ5P6QsOqe8WPPeQuLeR5dqZJiJzHyCxf3kxncJl2xzGBlxS
98W0n+CSq2SajEvqBY/hR1xyW5jm4pLCAAACOM8+
               "], {{0, 28}, {28, 
               0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+C4IwDI8NdrDLPvcSZmJjkF2CRehjLxOn3+Wub/kdU8c8v/5/kk2Be
CGJ7zkSV+/Pzoz4TxykQ8zo7dx2aiXOY2EC6rk5UY2JyRZNby8TV3qqgwAd0
DYbcNxMmCDDFlPu/jJ09xjDi2rW7TEwFWL0IBF1MTC245ASYhN7hkJrGxFSL
Q+q+AJPsVexSp/iZhHZhl3rvxMTUgV3qXxoTE+dz7HL3gF4vwy71x5yJSe8b
drlz3EwSv7FL/f+vJb4YlxRpAABRIbsU
               "], {{0, 28}, {28, 0}}, {0, 
               255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+S4E2WFIN34XtMiefzrVSYQCAGXeapHycTFFj/RJU6KQYRdwwN5WLa
iSK1nBsozmu4+vWv/9+dmVYgSx0H6nLquwxmT2Ziuo0sV8zErA923Z/3YVxM
TFdR5UzB9FkfsKUlqHI3gOSvJVwQBy1AlTNZvaBNECQuzoRm32yY15I3KaHL
vbcESQhn7/6Xy8TE2vMPxX+veqK6Dt75/3+3ABOTGHqQQcBeYLhxx2GVugnU
xRSAVepfGlDK5QJWuc1AKdNLWKVmAQOV+Qh2hxQAtbVgl/r/uYJJ6w8OOZIA
AAoziDM=
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+S4M++FgNGButrmDJfF5oyMjJyCrE0/0WTOd8tw8hpvmzf7f9zxc+g
yPxawcXIFQo17P59ZKnf2YyctpexO2I1I+dKGPv5dxSpD1zCV2DsW0rhKJLv
GIPgJigyMt5DldNbenu1Z3JysiYrI6PHX1Q5RkZWJkYI4D+G6pYr0UBQMGnN
n1pGnlXYnfu/hZExCbvM9xoxRpF7WKW+NTMyCp/Erm0qI6M7DqmHUoxpOJzx
OYVR6zcOubmMjBNwSP33ZAz/h0suXv0LLikSAQA+dLy7
               "], {{0, 28}, {28,
                0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9W4NfDIgsLi+CmX5hSp90ZIcDoPbrUVkWgsKSklRc/40w0qQYeRs6g
g3+BrG5G/acoUq95GF1uQpgHGRlTUeSeMar8gDKTGBm90eREmo9e+b8mMkSR
g5GxB0XuiwXQJbKWTBCX7kF1yyN+sKhp0/5MRo+/aA59PTUkJGf/n//ftRhb
MD0PARMZGRbikPqsyWj/GbvUv2JG1sU4tK1hZMzFIXVdm9H2C3apD4qMIotw
aGtnZCjHIXVDgNHiBw65vYyMS3FIAeVycElhAgDgY7GD
               "], {{0, 28}, {28,
                0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+i4NO8Um8mBiamrk/oMjcztJmBQFqYmbkMVeauOz8zk77Hsl33L++K
nY0idVCDmVl37jtsNiXyMCvN/4xN5oc2EwPbAezuWwJ0QRd2qQ5RZqX72KX+
xzEzr8Ih1cDN3I3VGUDgwKT4DMJ6HqpYihoknczMFRcmxgEBEzNz8HcUuXcy
wJBiYgYToegheTY+npvJLt6WmSkYI5CB4NWL792CzN7fsUj9//9nLxOTNw7H
zmNmbseu6/9/RWZTbHaBwAImzXs4pP4re7/FJUUiAACS8bbs
               "], {{0, 
               28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9+4MfOem2duPIfmDIPvcSZGJmYmBiT0GXedAsxMQmXnry4oXQDmtRu
DSZG4Y432GxKY2RkbPiGTeZXDiOT4Xkg4+5UxUI0uclMHLFATS+L+BmZXFCl
7vIzrQbamMEBdCPTDjQ5PkYbX6CFjpP8GbPR7UsCqmc3XPp3GQfjfnS5Vxcv
Xrz6//92aSar39jc+v//GaB9q7FL/T/DzjgDh9T/dSzsx3FIfRNi6sOlrYFR
+BEOqXOMDLhM/N/NpP4Fl5wD0x5cUv8D3XBKYQIAwtq91Q==
               "], {{0, 
               28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9m4FNRkRQT7943WKTWGjIxMzMzMYdjSlXzA8WZNZmYRY+gSzXyMDM7
7nv84boGM38GqtQBBibuABDjkToTkyaqnDMTcyGIfqoOtPMmitQeTiaxW///
v2lRBNoZjaptFTOT9f8zjRIgdzKXoMptZmVkYmJiZJIIYGQy/ITmzCaQ3xTb
3mzG5r9d4bXHn/3fo8gkdhDT72BQycw0H4fUTgy/IUAYut8Q4KsVut8QoJ5Z
8zEuOUYmLPEDAUC/LcIlZ87EfByX3BamjJ+45NABAJYuqaw=
               "], {{0, 
               28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+K4EF1uh2j1itsUmvFmJmA0ANT5lU1EyOTvMlME+7rGHKFTMxiO1//
/3+oFUOqj4lR7BrYZMYd6HLpzFoPwVI8TBMw5JhMQC5drMlk8hpTH4/JTA+Q
SzGk/r8yYWQCQe51WHz3uj8jw56J2QSLFBiYQN2KBbxSwHQjDGgyYQkvCFjL
xHwIh9QXLcYluLQtZhZ7iMshmkwtuLTNZGLGJfXfmCEYp1wrHn2kAQDmpcS7

               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9uYFWGiGD3H2wynyy5GIHA+Qmm1DVHRkZV1UQ75qLf6FJXAhhF14AY
/Iwz0OVqGTnPAKlfBzgYNdDlTBgi////0As0mHE2mtRWZsapbW2OjJzcjKof
0eT2s4LcqG5/NphxEoYzF+fl5c16//8yI99VbB4Eglc6jAk4pP6XMDLexiF1
Xowx8x8OuWRG/ms4pLayMebjsk2T0eMvdpnvGayss3DouszINBWH1D0Fxj5c
ls1jdPiAS66S9z0uKSwAAJngw3c=
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9m4MGZdDsgOIMpc7BQjJkJBO3RZb4EMTIxMpm0rr0WxGSCKnVNC6jD
fieIGcSMKvdAjIGp8BCYBdR/DUXuDDNTLZixFminNpqRPIxL/r86Ux0EtJN7
HZpTWpmYTRSAbgxhQrMNBDRBOmKvrWVkasGQ+3r27Nnr//+bMIVg+hwC+piA
9uIAYszBX3FIrWUUu4ZD6hoP0wQcUq+CmDxwWTaTifk1xGhMuRhYiBhjOoQn
FsrCDJl0phkwVZhy2q9xuQQLAADR0rhj
               "], {{0, 28}, {28, 0}}, {0, 
               255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x964N9SBkaG+VilnpcwAQHHAmxSOkwSlZ+bWAKwyFkzaTwFUgcuoIn/
PvTqvIDOYxDz4xEvwzfIck+99kuyHQAzo4B23kbVGck0F0Tds2TW5UWXE2V6
8P//pwOsTAaXRTDlYn+WKTGxhj3bwCT/ClUuG+Q3nrir///PZnJFc+nPdSkp
E66BWJ4YcnDwVoFpNS65+0ycJ3HJ1TGJ4ZL6X8FkhlPOlakOp5wA0xFcUptY
mJ7hklvGZPwVtxy2uCURAADUq8P5
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9e4EZvti5TzkdsUvsFmJmZmJndMSW/zeJg5nBpaCxnXoAu9d6ViVlp
LpDxwzoIXS6dmUntEZgVxqzt/w3FGUxMtiD6+5VsJiZGplfIcg3Mak+AVLcZ
M7NEOBMzitxWZu4QQ3FxNlaJxvdTmMy+oDhFAuR8Yaed///vFOC5gOqWx3U5
OQsfQNyig833IDCLSfgSLjlx5hxcUitYOC7gkHokztyBUxsz9zkcUgcZmPbh
0lbEJI81+oBgN5v4alzawph7cEn9D4vGKYUBAHPnus8=
               "], {{0, 28}, {28,
                0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x924GZenJLJcqxSD+2YmBiZRE9gynxpEmLije2bryH8DUPOk4nR9CSQ
/mB7BF2qlpExHlMDGKxjYZ8KpO6WlG7GkBNiyvv/7WURPyOTFoYcI5Nzgi4H
yJ2xGHKr2BkZGdULVzPKv0OX2v3/Zs+6F1/+T2R0xO6e//8X8Cs+wiH1zoIp
A5e2EkZpXFInRNjn4pIzAfoRB6hkdPuEQ+qHMUMPLm1bmSze4JJrZlqNS+p/
oBtOKUwAAJZyy7k=
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9m4Fg1OwMTE1PpNwyZHy1CzMxMzECg9BhN6oQ7UFRt/vz5/vLM51Gl
jksxM0ev/g1ivg64gSoXxiyy8Ct2Z7zVY14OY5/adg5F7qEQ82Ew49uqKAHm
CBS5n97MDvMO/180Qxnk0FZUQzuBQjxSLBA/PEGV+3O9xqmmpubLHWZm2+/Y
3bTTlCn6DnapdabMbJuxS73nYRJai13qjS2zdAN2qf8ezMyLcUjN5mbejUuK
h7n5D3apU9zMzb+xS70yxyn1P4bZA4eB2AEAW2u5PA==
               "], {{0, 28}, {28,
                0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9+4G2WNCOj7lssMlf61RiZgED1PLrMp5mOTExiVg1p4ozxaFJPVJiY
3FeDmWprUKVOSjEGLfj4///tU0BbUaV+uzMuA9HfTcUwnPGSiQlEbTdlSseQ
e83J9HJmvSUrI9NWTPcXMAGdL6TOIP4eU+5mTnZO6f1MxnWYUhCwj1HrCS65
2Uw4pb5oM+GS+r+IyROnnLr5M1xSOYyOuKQ+aDPhlLNjYl6JS46RKQ6X1DLG
oIe45DABAK1qykI=
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9e4FM9EwMTU/EyTJkX9XzMzEzMzMxsBzDkZgCFmfUsgcRedKmXBswu
N268erdLAlNuDzPzov//79upYNEHlGs45AqUYQ58h0UOCERZma0wpP4/a5OT
k0tt5GBOxOXFNmbmG7jkHJlN32CX+dHGwPQUh67vpkw2n3HI/fJj0n6PQ+4j
M9N0XEbmMCt9wyHXyMxchUPqfzwzcx8ul4QxM+PSdg0YzLjluI7jksMEALaP
vrE=
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9u4HM9IwOjbcsPLFK/g5jAYDmm1CMfoLh+jhwWuYfqTPqei7/8rw9/
gSE3hYnrEJC6LluPaWQyk/f/Z1OmyDDJY8pFMHlZcAFtFPiKKTePGexInxNY
fPA/R1uFiSnwGzYpIGhiEnmAQ+qEOFMxDqlfwkwmWNwBBkeYmFbg0sbHlP4X
h9wUJoEbOKT+uzOl45Lax8W8BpecBxMHLqn/BnjlynDKYQEAWULG9Q==
               "], {{
               0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+C4FOfPxNTLlapudLMTMzMbHLnMWSeTudnBskxMxdjyNWDhGNXr/bG
lNsA1CLcD2Q8wpB7xMSgUXwBooqB6TiKXCqzxj0o8zwT8wlkqc2icJNeyDCJ
XUGWs2JmvgCVqmFmyviPKhcENVCGmdnxM4qcJRNTbx8QMDABQdF/NH0QbzP5
izEzf0CVu5IClNO3sTn+TI8ZTdv//19Xr179BkjPYha7hS4HA3LMCrikepmY
VuOS62M2+4ZLTpE5GpfUf7SgRAYb8MiRAAAsGKhh
               "], {{0, 28}, {28, 
               0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9+oM2fqbjtPqb4uynu/EzMQMCzGV3qdQdQGCzHbIkm9dIFJMqkGmzF
zKyNJuXKzOc2+dSpB/+7mZn9UeUmMfPNgxitxMx3AFVOi9kPTN9wgimCg8OC
zHv////7ZAkHM08UmksWMjNvnpqbDnLnAnQPLGSGACZm0zcYHtdkYmLib/jP
wJSAIfX/y6dPn778r2cyeIUpBwaf+JnycEj9b2Bmmo5LLpeZ6RNuOemvOKSu
qzD34ZB6qsrMjMvEa8ws4bjlcEphAgDDTq4C
               "], {{0, 28}, {28, 0}}, {
               0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+KoN6BAYfT94NlGBj2Y0pBZICkA4amerAM0FwMOah5DmAVaDZCbALK
1WMaCnbC/v0Qa+sxHAKU2A8xHNWh+2GK6zGkgI5jgPsD3Xv1MGdg8d3/egY4
wJCDSGLxAIoKdOvgAI+2/XgSF8g6XGZijzyCRoLk6nFJkgAA1BeWXQ==
               "], {{
               0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9u4H6tHAODdu0bLFILVZjAwOATusyfWSpMbCIiIqxMTM/RpH63MzHp
b1j/9r+jIPdLNLnJQKnbLZLOP//fOoyuLYxJdoMnExPvVUx3PGNiEpAFusMH
ixufQZyIVe61OBO3VRZ2uf9Xdx//v4KJKRubHAh4M5l9xCH1wQy3trNMTIdw
yaUxiV/DJRfI5IBL6q0RUyEuuflMktdxSN3hYLLCpe0mEz45KVxGYgEAur69
hw==
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+S4JEqA2PoeWwydzPYmIBAHovUYlUmJslCNSYZTKkNrExMAWf+f5pR
hSF1W41J7sSP//9XSi/HkDNkkjsHpJbzMM1Dl7onzlTz//9rH14m3n3ockZM
TBM99VSAzuzFMFKaCQaWYMjN4GJiEnF2FmHi2YPphWP79l38f1mEyR1TCgLS
mJSf45D6bMZkgEvbXiamNlxya5hUHuOQ+m7KhBmWUJDFxGSGS86Uiakeh9Qf
YyalezjkNjCpLMBlJEkAABACuhg=
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+i4MMOKwbxmZjiv293pAoxAYEzhtSTeiYI4MlGl3qozsRkkrsPCE6h
S93XYmLy/fj/7rLLmJaVMrGs+/L/fz5TEIbUDhamTf//3dVgZmrEkHNiYvry
sQvkkF/Y5KK1gVKCBzCtW8IDcX8iptT//0v9/f2BmndjkwOBIibnHzikXnIx
NeHSVszEchyH1FsDJm9c2nKZmDbjkuNhUniFWw4zKKFgETPTQlxyP3j8cXmO
RAAAW7+9wQ==
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+C4N+jFEZGhtwv2OQWMIFBCabMm+msQAlpJiY+TLkWJiaOmH2LscnN
5mIKX/D/fwcTkzm61HlOJv0f//8/U2Zi2oom9daAKRwo9VyXiYnlF5rcbSam
6P+fl2gzMXFvQzcSKKccb4jdB49FIX5jsviE6YPruf7+/tFMTCsxpSCgkInp
CA6pPw5MFj9xyG1jYtmCy0geJm0Y8zia1GsuhBw6KGNiasAh9VCUyfo1Drll
TEz9uIxcxlR8GJccaQAAAZi0XQ==
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9u4E8tAyOD1i4sMh82ezOBQAem1HEXJgjoxpDq5WFi0izu5GBimvsR
Xc6JSW3fz1OOII3rMOTYD1xs4AZJCV/BkON6Uw+xby6GfU5MmWADmYr+YJFj
YmIOl2Gy/43phV2aPBYLPmuz7caU+v//GdAJxUzi2KRA4G8okz8uuXdMTM24
5I7gkfNkMv6MS06MKQ6X1DZWnHI/Upn0nuKQO8fEtBiXkeeYOE/hksMAAFxE
tOA=
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x924EWnDSNjxTNsUl1CTCBwElNmiwUnWIpJcTq61GxmsLgckFB6hSLz
q0sTKGi69s4xkOb5yFJfWoEifPWP//+rATKkbyDL2TMxubZ8AjJ+gAwuQpaq
ZGbi/wNirGBnYlK78xdJagUbk+LDpUDQzQ2Uuo3ikB28TBx6EPezuN9Bc/8c
XpC4LlCXMqa/dy+LWbbsjQ6TyFxMOTBYyMS0DIfUfxkmyYu45YxwSc1nZYrH
IXVPmcniAw65WiamWFxGAuUu4JYzfolLDhMAAJLInQA=
               "], {{0, 28}, {28,
                0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9u4MqW1BQBRgaFuxgyv9t4mNiUFQv4mNrRpb5HMDE5bv//exGPwTJ0
uZVMvOv+/f9/gKnsK7rUaU6LayB6M1M9hm0NgkAXvH24SI6J7ya6XBFX36o4
OSYgEHmFLndXj4lJwLZ3MhPTekzP/Thy5Nb/6yFMsT8w5UDgrDiTyl/sUuvE
mUyeYJc6J84UfQe71H83psjvOKRWscncxiF1i5N1Hw6p52FM/Tik/tcz6ePw
2P8zojw7cWkrY8rCJfVfxfYnTjlsAACPtso+
               "], {{0, 28}, {28, 0}}, {
               0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9u4FmLGRMTI1PORwyZl0EyzEDAxMwcAxd7+wRMfTFlZuJSbGx89UqU
4ya6Nmbm+uMgxhNx4QdochOZ28B0s53zBHTr6pkOg0yuZWBag+GU88yydavK
DIFuWYIh9yWdjQnkTr6uv1i8t3N1MVBuPRYZEAhihjoIE7QwsercwS7VzcSc
jkPXfXEm3TfYpX6mMDMVYZe6bcjMXPcFq9T3JCamOhyWJTFzFWHX9XMiE1cz
Dl1LmC2O45D6v475IC4pHAAA/S7A0A==
               "], {{0, 28}, {28, 0}}, {0, 
               255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+SYL2DCScjo8ZuTJk/ccyMjI4eHgLcl9Glfjkxipx69/f//1PaF9Hl
6hmT34IZbxReokm9EE35ApHaM/krmtxHbfXbt4EmXjTlf4jhlLtCjAwmRSEc
jGJ3Md35xMdQm4ORUWYtdg8+4WF0+4xd6nE0o8gL7FL/KxkZj+GQWs/I2P0P
u9RDdkaHH9ilvmoyCr7HLvUxlFn3OXapXx2MYjic8X81I/ME7DK/N/Aw12N3
YLYFI3MCdl1brbkE1+CyjHQAAGGNzMg=
               "], {{0, 28}, {28, 0}}, {0, 
               255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+S4Ey1nRgjk91DTJm1JkzMTNoZ4kxnMfTYMWoVHgIyZjKgy60VY675
CmZ5iKGZWc1U+BrC2s50DU0bUy2M9RDdxJmMSCJntqPIHWLSLpw58/WrmQdn
tpgwiaNp9DABA49COybGYEz/gUGLGPOSr9ilqpnkD2GXeeXBpH0dh5QmUwsO
q9YqiO3ELvMgiFELPURgwA4WnhhguxguX70qZNLG4auDmkzc63BYNZMpBIev
yAIAxzvMJg==
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9+4MvradqMXthk7qbJMsmYujBhytxP4eWuX/T5/xFMuXPiUt3v//8/
lH8nDF3qo6rE7f+/V9oyMO7agC53hJvfxtpV0FFS5MZbDDOXdnV13Xj+hlET
pyc28B7FJfVL2winthqm27ikTnPk45L6YaDzBpdcItdhXFLbGGfjkvpo4vcN
l1yK1ENcUrMZW3FJvVTkXoNLLpFpAi6pbYzhf3DJYQMAga7fJw==
               "], {{0, 
               28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+a4PDESCbXL6hi+0HErSJZZj17fcY5mHqOCXLGXvj+/0T5bwypKwJa
l3HY9C+G/Q6Ifr8xdje63DdG3Q/fvm2okeFkbMKUAwLNsGlPXgRdxzDz9+/l
H/4CGSkWOGwFgi8XccncrTyNS+qBGuMeHFJPlXj9n2GXeifDdQmXiVHqGM6H
gQre27ikpjNNwiHzdweT7gcccocZOe7hkHopyDoBl2UBLBNxSZEMAF4x4ho=

               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+S4NvNQmUGvqnYpLZHMzExKTAbf4YJ/PsLZTyxYGZiy9/7JoP1Fkzu
/lEIvUWNyWTGaxDrMrp5j7WFV/zG7oo/rkz5UOYvdLlzTOoQxqcSy90Ycqor
gKDeRpeJyQNN7pkqs5CQV11d5zM1Jn90Q++vBFM/M5j0nmB30v89TExbcUjN
5GQ//Q+7VL8Qxxwcug4LMRVgl/m5h5djHg4D1zCx4zLwqCA81NDAjzQWzoof
WKW+2zGxzcVh4BcmJlx2kQ4AH0TNuA==
               "], {{0, 28}, {28, 0}}, {0, 
               255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9u4PoEB0YG3oNYZH62czOBgPBrDKnj4kxMadu+fhXgffYZTWq+GFPQ
XhAjfnNNAqrUN2nOuh9g1s1YZldUuRQmLzB9NYONSXUJqpwLE5dae/uptXKs
TEwtaNbtK3ZwcHDa+f+xOJPfNxxeXMYkeA2H1CFmprk4pF6ZMangMPGVLpPW
YxzanJlUcEldEOVYiEPqsxRTPQ6pnzFM/F9xyG1jYtqCQ+q9FZPSCxxyaUzc
93FI/ReVn4NLChsAAGMtyDs=
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+a4OYUKQbGp9hk/ibxMjFFyezHlPlTy83kfvLrvx+/MKSe+zB57fmI
1aY7+l5zfoMYv5+0m3eiyokybQNRn7eVMTExbUCRamHJeP3+UJGCrCATk9B+
VBvnsAGVMztkbn3JyzQd3b4l+aeuXf///5Up0+zfWB30f4020wLsMv+v8jDN
+oNd6m2oUMVfHNqcmfpwyPzvYcn6hkNqpZTqYxxSXfxOH3BIdUsFPcIu83c5
j/pWHLouybLPwOXENbKFuKRIBwCamdHI
               "], {{0, 28}, {28, 0}}, {0, 
               255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}], ",", 
           RowBox[{
            GraphicsBox[
             TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+a4OvOODat7Vgkfk2yk2BSk2cMw5R64sDhWn7y/3nGegypp2o+L0H0
eQMMqds86e/AjE+zD6PL9TI++fr/85s35wMw7VvDyKjqLc3IYsPIvhFd7t/m
6UDw5ls1YyIWL4DBSd7wHzikztrI3sYh9dZc7j4OqQ/mSttwSP0NYVqDQ+pd
JGMDDqn/sYxZOJz4LY/J8zMOXZ2MIs9wSM1gEjmHQ2qCoBouXf9DVXDZRQYA
ALLv2oU=
               "], {{0, 28}, {28, 0}}, {0, 255},
               ColorFunction->GrayLevel],
              BoxForm`ImageTag[
              "Byte", ColorSpace -> Automatic, Interleaving -> None],
              Selectable->False],
             DefaultBaseStyle->"ImageGraphics",
             ImageSizeRaw->{28, 28},
             PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "9"}]}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          PaneBox[
           TagBox[
            TooltipBox[
             StyleBox[
              StyleBox[
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "FEStrings", "sizeBriefExplanation"], StandardForm],
                ImageSizeCache->{58., {2., 8.}}],
               StripOnInput->False,
               DynamicUpdating->True,
               LineSpacing->{1, 2},
               LineIndent->0,
               LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLText",
              StripOnInput->False],
             StyleBox[
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
                StandardForm]], DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}, StripOnInput -> False]],
            Annotation[#, 
             Style[
              Dynamic[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
              DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}], "Tooltip"]& ],
           Alignment->Center,
           BaselinePosition->Baseline,
           ImageSize->{Automatic, {25, Full}}], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 4, 20042440055505699725, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 4, 20042440055505699725, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 4, 20042440055505699725, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[20042440055505699725 === $SessionID, 
   Out[4], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.767650893218026*^9, 3.767650971491726*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"52cd929b-1293-4fa3-9979-129317b2a516"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sample", "=", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"dataLeNET", ",", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.767650942903201*^9, 3.767650977038859*^9}, 
   3.767651046580542*^9, {3.767651607939933*^9, 3.767651610680243*^9}, {
   3.76765186159275*^9, 3.767651865025666*^9}, {3.767652480995845*^9, 
   3.76765248305097*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"3457139c-29d4-4191-bda1-82c9f7a5f36e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+c4C5DCE6504zWOOUe8rh+//+qL8+y/PRPDMlYxtRcEUYQqP+FJlUq
ChQV7Dxyf7oC43JUqUssjIyG9z4AWXulGHtR5f7c7hR3A9K/O8UYY+5iWOjm
+P3/XhNG4cVfMF06i7Eil5XR+DY2XywCOkZq/X1sUk91GBlNXmOTedMhBNR2
AKtUGqN8uDXjSSxSb1MZlU/938G4FlPqgxejzdP//3MYN2FIfYxgVH/4//8L
Q5Mf6FJ/ahi5dgPpuYzBGNq+iTP6AF2zXF7zOIbc3xtqbJKSgoxCJ7D54N3k
IHazwmPYpKgLAICotUk=
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], "\[Rule]", "8"}], "}"}]], "Output",
 CellChangeTimes->{3.767652483736928*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"aa077b6d-85ca-4e0b-ba23-d56125e36618"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netw", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{
    RowBox[{"NetModel", "[", 
     RowBox[{
     "\"\<LeNet Trained on MNIST Data\>\"", ",", 
      "\"\<UninitializedEvaluationNet\>\""}], "]"}], ",", "dataLeNET"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7676510118272257`*^9, 3.767651053055327*^9}, {
  3.767651616278742*^9, 3.767651617970006*^9}, {3.76765187183805*^9, 
  3.767651873217372*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"af111f4d-340b-4b78-818a-e6cbf1ddfd2f"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["11", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 1, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {24, 24}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 24, 24}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 20, 
                    "$InputSize" -> {24, 24}, "$OutputSize" -> {12, 12}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 12, 12}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{50, 20, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{50}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 20, "ChannelGroups" -> 1, 
                    "$InputSize" -> {12, 12}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 20], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 12, 12}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 50, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {4, 4}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 4, 4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 4, 4}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{500, 800}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{500}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 800, "$InputDimensions" -> {800}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "9" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "10" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{10, 500}],
                     "Biases" -> NeuralNetworks`Private`DummyArray[{10}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
                    "11" -> Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, "$Version" -> 
                    "12.0.8", "VarianceImage" -> None, "Interleaving" -> 
                    False]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {0, 1, 
                    Skeleton[7], 9}, "Dimensions" -> 10, "$Version" -> 
                    "12.0.8", "InputDepth" -> 1, "$Rank" -> 0]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"24\"", "\"24\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"24\"", "\"24\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"12\"", "\"12\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"800\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.767651034772785*^9, 3.767651078788561*^9, 
  3.767651641213591*^9, 3.767651887315784*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"8e52bf93-bbcb-47f4-970a-0a0219014ff9"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"resource", "=", 
   RowBox[{"ResourceObject", "[", "\"\<MNIST\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"ResourceData", "[", 
    RowBox[{"resource", ",", "\"\<TrainingData\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"testData", "=", 
   RowBox[{"ResourceData", "[", 
    RowBox[{"resource", ",", "\"\<TestData\>\""}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.767651996417321*^9, 3.767651996419012*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"f851b14c-4abb-4107-94d4-65cb285f38a9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netw2", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"20", ",", "5"}], "]"}], ",", "Ramp", ",", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"50", ",", "5"}], "]"}], ",", "Ramp", ",", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", 
      RowBox[{"FlattenLayer", "[", "]"}], ",", "500", ",", "Ramp", ",", "10", 
      ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", 
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", "9"}], "]"}]}], "}"}], "]"}]}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"28", ",", "28"}], "}"}], ",", "\"\<Grayscale\>\""}], "}"}], 
      "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.767651945038743*^9, 3.767651953483067*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"424816cc-2c27-4b55-8d0e-8987af0930fc"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["11", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{20, 1, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {24, 24}, "$WeightsInputChannels" -> 1], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 24, 24}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 20, "$InputSize" -> {24, 24}, 
                    "$OutputSize" -> {12, 12}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 12, 12}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{50, 20, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 20, "$InputSize" -> {12, 12}, 
                    "$OutputSize" -> {8, 8}, "$WeightsInputChannels" -> 20], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 12, 12}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {4, 4}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 4, 4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 4, 4}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{500, 800}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 800, "$InputDimensions" -> {800}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "9" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "10" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{10, 500}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
                    "11" -> Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "Interleaving" -> False, 
                    "MeanImage" -> None, "VarianceImage" -> None, "$Version" -> 
                    "12.0.8"]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {0, 1, 
                    Skeleton[7], 9}, "InputDepth" -> 1, "Dimensions" -> 10, 
                    "$Rank" -> 0, "$Version" -> "12.0.8"]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"24\"", "\"24\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"24\"", "\"24\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"12\"", "\"12\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"800\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.767651954245326*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"7a24ad75-fc88-4cb5-bfe4-65063c758584"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"lenet", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"netw2", ",", "trainingData", ",", 
     RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "3"}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.767651966882704*^9, 3.7676520471444387`*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"df5319d6-9fc3-4c4d-9fb5-2ea23afd7afb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lenet", "[", 
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+c4C5DCE6504zWOOUe8rh+//+qL8+y/PRPDMlYxtRcEUYQqP+FJlUq
ChQV7Dxyf7oC43JUqUssjIyG9z4AWXulGHtR5f7c7hR3A9K/O8UYY+5iWOjm
+P3/XhNG4cVfMF06i7Eil5XR+DY2XywCOkZq/X1sUk91GBlNXmOTedMhBNR2
AKtUGqN8uDXjSSxSb1MZlU/938G4FlPqgxejzdP//3MYN2FIfYxgVH/4//8L
Q5Mf6FJ/ahi5dgPpuYzBGNq+iTP6AF2zXF7zOIbc3xtqbJKSgoxCJ7D54N3k
IHazwmPYpKgLAICotUk=
     "], {{0, 28}, {28, 0}}, {0, 255},
     ColorFunction->GrayLevel],
    BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSizeRaw->{28, 28},
   PlotRange->{{0, 28}, {0, 28}}], "]"}]], "Input",
 CellChangeTimes->{{3.767651119485095*^9, 3.7676511291552753`*^9}, {
  3.767651417430448*^9, 3.7676514235513573`*^9}, {3.7676515239715242`*^9, 
  3.7676515500956383`*^9}, {3.767651586686987*^9, 3.767651587955119*^9}, {
  3.767651645439802*^9, 3.767651733379154*^9}, {3.767651811285022*^9, 
  3.7676518372168417`*^9}, {3.7676521738089314`*^9, 3.76765218006352*^9}, {
  3.7676524412782583`*^9, 3.767652487417371*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"f2fcf12a-c497-45d8-b5f8-dee02298276d"],

Cell[BoxData["8"], "Output",
 CellChangeTimes->{
  3.767651423841737*^9, {3.7676515411657467`*^9, 3.767651553200066*^9}, {
   3.767651589041328*^9, 3.767651592395232*^9}, {3.76765164827818*^9, 
   3.7676517349518223`*^9}, {3.7676518235692167`*^9, 3.7676518377169952`*^9}, 
   3.76765217583431*^9, {3.767652442117796*^9, 3.76765248818307*^9}},
 CellLabel->"Out[49]=",ExpressionUUID->"e270d626-90df-4afc-8636-3b94dfa91449"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.7676514895138903`*^9, {3.7676515390731983`*^9, 
   3.76765154805558*^9}},ExpressionUUID->"828a7dfe-13c8-4f69-a267-\
0c59e0d61daa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"ImageResize", "[", 
    RowBox[{"x", ",", 
     RowBox[{"{", 
      RowBox[{"28", ",", "28"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"{", 
      RowBox[{
       GraphicsBox[
        TagBox[RasterBox[CompressedData["
1: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
hBCi+vg3NRR1Cg==
          "], {{0, 134}, {132, 0}}, {0, 255},
          ColorFunction->RGBColor],
         BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
         Selectable->False],
        DefaultBaseStyle->"ImageGraphics",
        ImageSize->{43.23046875, Automatic},
        ImageSizeRaw->{132, 134},
        PlotRange->{{0, 132}, {0, 134}}], ",", 
       GraphicsBox[
        TagBox[RasterBox[CompressedData["
1:eJzt3WdMVVsWB3DKRbFQLGBBRcWCY2iWwNPYos8eFWxPjR2wowKKjAU1frFE
o8E2Cow89WE3KkpsiV1sTGyxgb2iY+9lzf3v+TKTcXyUewry/yWYqJezd8Jh
n332XmvtWsPGh0U62NnZxThb/wgbGtcmOnpofE936196R8WMGhEVEd4pKjZi
RER0yDBH6z8utH7NsX5ZrF9CRERERERERERERERERERERERERERERERERERE
RERUBN25c0cSExOlY8eOUrNmTQnw95cjR44Y3S3S0bdv32T//v0ybNhwGTRo
kKxbt06ePHmi/m/Tpk3S4C8NDO4h6SErK0umT58uE8aPl507d8rXr1//5zPH
jx+XypUqG9A70lpubq6kpaXJpEmTJC4uTo0Dz549++H3pKamSt26dXXqIWnl
8+fPcuHCBUlOTpYZM2ZIQkKCLFmyRM6dOydfvnzJ83WioqKkb9++GvaUbO3p
06dy8OBBWbRokcT/NV6mTZsms2fPli1btsjt27cLde369eurOQSZz+vXryUz
M1OSkpLUmD9hwgSJjY2VuXPnSkZGhjx8+NCm7WEsKVfOXd6/f2/T61L+PP/n
czWPW716tcTExMjgwYMlPDxcoqNj1Ph/9uxZefv2reb9QJsRERGat0P/fr7n
5OTInj17ZOHChTJy5EgJDQ2Vbt26Wd/7hlnH/oWyb98+efDggSH9e/z4sZRy
dpbjJ44b0n5xc+nSJTl27JhcvnxZ/czfvXtndJf+y6xZs8TPz8/obpAJYL5Q
ybOSLFu2zOiukAmsXLlS3Nzd1PyVijesTWD9CfNYog1paVKyZEm5e+eO0V0h
g2FfKyAgUIYPH250V8gEtm/fLk5OTnLt2jWju0IGw9jQqFEjtfZFtG3bNjVv
yM7OMborZDDEPWDtafTo0UZ3hUxg7dq1Urp0abl7967RXSGDffz4UWrXrs31
BlIWL14srq6uKnaKireXL19KRQ8PFT9FNHnyZKlQoYK6L6h4Q56Fs7OzzJ8/
3+iukAkMHTpUvKp5MRaOVCyOxWKRFStWGN0VMoHu3burPe1Pnz4Z3RUyGGL0
cKTtH2l/GN0VMoEWLVpIUFDQd3PzqHjZsWOnGht2795tdFfIYBgP/P39pVWr
VkZ3hUxgzZo1amxgLYefF2JfkbuBfK309HSVzzVnzhy1bx0WFiYhISGqpkeV
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
Cw8vFiw=
          "], {{0, 142}, {132, 0}}, {0, 255},
          ColorFunction->RGBColor],
         BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
         Selectable->False],
        DefaultBaseStyle->"ImageGraphics",
        ImageSize->{43.20703125, Automatic},
        ImageSizeRaw->{132, 142},
        PlotRange->{{0, 132}, {0, 142}}], ",", 
       GraphicsBox[
        TagBox[RasterBox[CompressedData["
1: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
AAAAAAAAAAAAAIA1+y+TeYnE
          "], {{0, 148}, {164, 0}}, {0, 255},
          ColorFunction->RGBColor],
         BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
         Selectable->False],
        DefaultBaseStyle->"ImageGraphics",
        ImageSize->{49.39453125, Automatic},
        ImageSizeRaw->{164, 148},
        PlotRange->{{0, 164}, {0, 148}}], ",", 
       GraphicsBox[
        TagBox[RasterBox[CompressedData["
1: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
          "], {{0, 
          132}, {136, 0}}, {0, 255},
          ColorFunction->RGBColor],
         BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
         Selectable->False],
        DefaultBaseStyle->"ImageGraphics",
        ImageSize->{50.6796875, Automatic},
        ImageSizeRaw->{136, 132},
        PlotRange->{{0, 136}, {0, 132}}]}], "}"}]}], "}"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.767651702137972*^9, 3.767651710687121*^9}, {
  3.7676517502770147`*^9, 3.767651750557563*^9}, {3.767652185974598*^9, 
  3.767652266238607*^9}, {3.7676523010544024`*^9, 3.767652322518916*^9}, {
  3.767652406297516*^9, 3.7676524311370573`*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"4f72ea79-d4fe-4f31-87d6-b90513e016cf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJztVstqIlEQlUkWs5wPyCZ/kW2W2WbIBySMCdkYMAPDfII/IMSlG0FMdCGo
+MRsfIHaOlFRQcEHIiio+NZKVzEVukMzMPY1s5kDZV/vvdSpU123bh9f3Z1f
fzIYDPef5Z/zyx+nZvPlz69f5D8XpvvbG5Px25npu/HGaD65OpAnj37boWzw
Hypst1vYbDYfxvXRaDQakEwmYTgcks59xIA+V6sVeL1eCAQCUK1WVWsiwe/K
7/dDqVSicblcBpvtAQqFglBO5srn85BKpWiMOtFarRZYrVbIZDKqvXoxnU4p
j1p1uVwuZZ02WtOrkX3ncjnKn3IOwf4fn55Ir16w72g0CuPxWDP++XwObrdb
qL5QKASj0ehtTplX1P38HFft3xUcb7vdhnA4DLPZTBULmsvlgslkootHi7PT
6ZBOPOfdbpfmstkspNPpN37RnIhms0n5w3q1WCxUn+/3iOZEOBwOCAaDVEtS
QRLKpeREQ40ej4fmUB+ed+QVcSaU4HeE2vr9vqpXYwzMKSK37AN7mNPpVPHz
EzmLxaJq/65gn5FIhHr2+97G40QiAYvFQheX0h/2Erz3tNbR8F1qre/Kh3WC
/pT5UvYy5BNx/pkvFovBy68XzT2VSoX6AcegB6xhMBiA3W6HXq9H/Q37ar1e
h3g8DpIkwXq9Fnb2lTXq8/mIA+/gWq1Gd+Q+8KfY9/XtxmeBc/wvvhH/Bq8M
BQu8
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJztVkmLGlEQlmQOOc4PyGX+xVxzzNWQHzAyjszFgA7E+TsdPAhuoLggqKC4
9EVxAT24b7iAC7i1S6WryDNtmDCLr5k5zAelz9dFfbW3F7of2psPGo3G/En+
0F79/GIyXd1/O5d/fDeabw1G/fVX453eoDdd6j7Kl5//yJks8I43if1+T6Km
bbXsP4b1eg29Xg9arRZXH7bbLSwWC5hMJjAcDomj3W6TDPp9CAQCpMMDyFOt
VqFerxPPeDyG5XJ5sN+X+UQxTefdbseF8yGw/Pl8PvJBecfDtlJYHLVaDeLx
OJ15x4b2lDaR1+l0wnw+59orD/m92WwgmUxCNpv9r84pkCQJ8vk81crlcoHH
4wGLxQKhUAhyudzJ9pX5SaVSYLVaIRKJ0JxhLMFgEBqNBvUpxhgOhymvp3DN
ZjOw2+0Qi8UoPoZKpQJ+v/9IdzQaQSaToTw/p5ZMdzqdgs1mg06nc3iG84Yx
CIIAq9XqUDP2jVzPnXnkk6QNeLxe8pnxMDsYL86+0rd/z08F8zORSECz2Tzc
sXtRFCEajR7pvhTMv8FgAOn0393E7rvdLuWXB5fSBtYca6fcI9grwi+B+ofn
uwhtIx8Dq5nb7YZSqXTkFw9gzxUKBfIfew2BOwRnmjcXAjlYHIhisQgOh0MV
LlYTjA/fqbijcKaVPaMGcJ5xP5XLZdU4Xhuv+f+LJ34Dcy4RQw==
      "], {{0, 28}, {28, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJztVk1LAlEUlWrRsh/Qpn/RtmXboh+QZNLGQINo7VIQF/oDFFwIfm00ZAZr
UBHUWrgRFA1UFBQ3fosfp7mPZsiKNr1XFB24M+/ex7zzzsy9982e8fLofMNg
MNi21cvR6fWB1Xp6c7yjOicW24XZYjo7tFyZzCbrvnFTDe6+2JZq+MenWK1W
P70FISBd8/kcrVZL90VhsViwezAYhN1uX4vxhqaj2+3C6XQiFosxf7lcCuHT
dPh8PuRyOSQSibW4CK7k3R1SqRRqTzVIssRivPVpXI1GA263m43vlXsUCgUh
fIRerweHw4FOp8P8eDyOUqnExrzyk9aZTqfIZrNwuVyo1+v6XDgcZnp58hEm
kwny+TxGoxHztXcbCATQ7/e58XwETQd9L+ITVee0/uu1B4MBIpGIPicKGme7
3dZr7zv4KpUKMpmMcD5t7WKxyOy7+B4fHlhtkF7K17fflycfWTqdxnA4fDc/
m80wHo+581IPoPOvWq0imUwiFAohGo1CkiTWc0jrV/XS86SJeqbf74fH44HX
64WiKGg2m2wPvEBcVHOyLKt98xblcvnDM4iHrs8gMlcIWj7+1f+y34Zn4fQW
1A==
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJztlc9qwkAQxqXtocc+QC99i1577NXSB1BqpRcLWih9n1xMIJeAF1GIIHhQ
459AqqCCJBfFgBGNqMk0u3RCeukpI23pBxtmhzA/vtll9ir9nHw8SSQShfPg
k0y93uTzqbe7i2Bznys8ZXOZh9vcSyabyV+nT4Pk5ec6Cxb860fI9/0/xYmy
9vs9WJYFruuSs6bTKei6DoZhQLfbJfGLNcfjMeegyuUy50f/iYs1n89hOBzy
eLVaQbvdBlEUoVKp8JznebHwsA7z1Wq1QNM0qNfrMJvNYDKZgKqqsfJQzCfz
6DhOmGP9xP5S3lv0UiwWYblcknGYB/SxXq9BEIQwT8lkeh8MoFQq8fhwOJDx
sJfVahX6/f6XHCVPlmVYLBZknKhY/yRJIvXFhGdn2zYoisJjSibyRqMR1Go1
ch7W7nQ6R70rjUYDTNPk8THmCpuflHMFhV6Yv91uR85DZrPZPAqLabvdQq/X
C9nU2mw2sb/p3yn6RvwGfQDkRyUh
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSize->{38.8046875, Automatic},
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.767651711237598*^9, 3.767652199818199*^9, 3.7676522600038433`*^9, {
   3.767652302974478*^9, 3.7676523230562468`*^9}, {3.7676524086499166`*^9, 
   3.7676524315690804`*^9}},
 CellLabel->"Out[44]=",ExpressionUUID->"39308793-b607-4770-a4ef-163f33b79dbc"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{808, 755},
WindowMargins->{{139, Automatic}, {Automatic, 7}},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 180, 3, 98, "Title",ExpressionUUID->"4382e9b2-623b-4fa0-bcec-6fbdd281ebab"],
Cell[CellGroupData[{
Cell[785, 29, 206, 3, 30, "Input",ExpressionUUID->"832cc71b-d711-4abf-a539-1b72e7b91007"],
Cell[994, 34, 204925, 3366, 197, "Output",ExpressionUUID->"1e8a0cdc-06ae-4b48-850c-f578fa93d3b2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[205956, 3405, 823, 16, 40, "Input",ExpressionUUID->"b8cab323-bfa5-4a8a-ac06-970a7b8ec96f"],
Cell[206782, 3423, 2476, 47, 108, "Output",ExpressionUUID->"aa70392a-9be5-4f82-8f0c-4df071a6f853"]
}, Open  ]],
Cell[CellGroupData[{
Cell[209295, 3475, 257, 4, 30, "Input",ExpressionUUID->"91719c30-7663-4be7-842d-a90ef732225b"],
Cell[209555, 3481, 377362, 6851, 75, "Output",ExpressionUUID->"e1956af5-690c-45c2-bced-fdee784513db"]
}, Open  ]],
Cell[CellGroupData[{
Cell[586954, 10337, 301, 5, 30, "Input",ExpressionUUID->"87c54ffe-789c-4d5e-9291-d4f5e352886e"],
Cell[587258, 10344, 92437, 2010, 492, "Output",ExpressionUUID->"52cd929b-1293-4fa3-9979-129317b2a516"]
}, Open  ]],
Cell[CellGroupData[{
Cell[679732, 12359, 440, 8, 30, "Input",ExpressionUUID->"3457139c-29d4-4191-bda1-82c9f7a5f36e"],
Cell[680175, 12369, 918, 20, 47, "Output",ExpressionUUID->"aa077b6d-85ca-4e0b-ba23-d56125e36618"]
}, Open  ]],
Cell[CellGroupData[{
Cell[681130, 12394, 510, 12, 52, "Input",ExpressionUUID->"af111f4d-340b-4b78-818a-e6cbf1ddfd2f"],
Cell[681643, 12408, 40545, 813, 75, "Output",ExpressionUUID->"8e52bf93-bbcb-47f4-970a-0a0219014ff9"]
}, Open  ]],
Cell[722203, 13224, 573, 13, 73, "Input",ExpressionUUID->"f851b14c-4abb-4107-94d4-65cb285f38a9"],
Cell[CellGroupData[{
Cell[722801, 13241, 1260, 31, 94, "Input",ExpressionUUID->"424816cc-2c27-4b55-8d0e-8987af0930fc"],
Cell[724064, 13274, 41459, 837, 75, "Output",ExpressionUUID->"7a24ad75-fc88-4cb5-bfe4-65063c758584"]
}, Open  ]],
Cell[765538, 14114, 415, 9, 30, "Input",ExpressionUUID->"df5319d6-9fc3-4c4d-9fb5-2ea23afd7afb"],
Cell[CellGroupData[{
Cell[765978, 14127, 1262, 24, 43, "Input",ExpressionUUID->"f2fcf12a-c497-45d8-b5f8-dee02298276d"],
Cell[767243, 14153, 421, 6, 68, "Output",ExpressionUUID->"e270d626-90df-4afc-8636-3b94dfa91449"]
}, Open  ]],
Cell[767679, 14162, 181, 4, 30, "Input",ExpressionUUID->"828a7dfe-13c8-4f69-a267-0c59e0d61daa"],
Cell[CellGroupData[{
Cell[767885, 14170, 14695, 262, 64, "Input",ExpressionUUID->"4f72ea79-d4fe-4f31-87d6-b90513e016cf"],
Cell[782583, 14434, 4313, 90, 58, "Output",ExpressionUUID->"39308793-b607-4770-a4ef-163f33b79dbc"]
}, Open  ]]
}, Open  ]]
}
]
*)

